
  EXPLORED Args.parser output 
 EXPLORED learningOn  true
 EXPLORED bidirectionality  true
 EXPLORED effect-filter  false
 EXPLORED specfile :: tests_specsynth/case4.spec
 EXPLORED goal Number :: 0
 EXPLORED Max path length :: 3stexcwhitespace var: slen
whitespace colon
whitespace var: list
whitespace colon
whitespace var: int
semicolon
var: subs
whitespace colon
whitespace lparen
var: n1
whitespace colon
whitespace var: int
rparen
whitespace arrow
whitespace lcurly
var: v
whitespace colon
whitespace var: int
whitespace pipe
whitespace var: v
whitespace equalopwhitespace var: n1
whitespace ar-minuswhitespace int: 1
rcurly
semicolon
var: nil
whitespace colon
whitespace lcurly
var: v
whitespace colon
whitespace var: list
whitespace pipe
whitespace var: slen
whitespace lparen
var: v
rparen
whitespace equalopwhitespace int: 0
rcurly
semicolon
var: int_gen
whitespace colon
whitespace var: int
semicolon
whitespace var: sizecheck
whitespace colon
whitespace lparen
var: s
whitespace colon
whitespace var: int
rparen
whitespace arrow
whitespace whitespace lcurly
var: v
whitespace colon
whitespace var: bool
whitespace pipe
whitespace lbrace
var: v
equaloptruerbrace
whitespace iffwhitespace lbrace
var: s
equalopint: 0
rbrace
whitespace conjwhitespace lbrace
var: v
equalopfalserbrace
whitespace iffwhitespace lbrace
var: s
whitespace lessthanopwhitespace int: 0
rbrace
rcurly
semicolon
var: cons
whitespace colon
whitespace lparen
var: x
whitespace colon
whitespace var: int
rparen
whitespace arrow
whitespace lparen
var: xs
whitespace colon
whitespace var: list
rparen
whitespace arrow
whitespace lcurly
var: v
whitespace colon
whitespace var: list
whitespace pipe
whitespace var: slen
lparen
var: v
rparen
whitespace equalopwhitespace var: slen
whitespace lparen
var: xs
rparen
whitespace pluswhitespace int: 1
rcurly
semicolon
whitespace var: goal
whitespace colon
whitespace lparen
var: s
whitespace colon
whitespace lcurly
var: v
whitespace colon
whitespace var: int
whitespace pipe
whitespace truercurly
rparen
whitespace arrow
whitespace lcurly
var: v
whitespace colon
whitespace var: list
whitespace pipe
whitespace var: slen
whitespace lparen
var: v
rparen
whitespace equalopwhitespace var: s
rcurly
semicolon
RelSpec {  SRs ;  PRs ;  TSs  
 Assume false
 name subs : 
 params :
 Type  Arrow ( ( n1 : {var_v0:Ty_int | true} ) -> {v:Ty_int | (v) ==((n1) -- (1))} 
 Assume false
 name nil : 
 params :
 Type {v:Ty_alphalist | (slen)(v) ==(0)} 
 Assume false
 name int_gen : 
 params :
 Type {var_v1:Ty_int | true} 
 Assume false
 name sizecheck : 
 params :
 Type  Arrow ( ( s : {var_v2:Ty_int | true} ) -> {v:Ty_bool | DoubleImpl 
 v = true
  
 	 Conj <c s = 0
 	 , DoubleImpl 
 v = false
  s > 0 >c } 
 Assume false
 name cons : 
 params :
 Type  Arrow ( ( x : {var_v3:Ty_int | true} ) ->  Arrow ( ( xs : {var_v4:Ty_alphalist | true} ) -> {v:Ty_alphalist | (slen)(v) ==((slen)(xs) + (1))} 
 Assume false
 name goal : 
 params :
 Type  Arrow ( ( s : {v:Ty_int | true} ) -> {v:Ty_alphalist | (slen)(v) ==(s)};  Formulas  }
 INITIAL GAMMA 
 
 goal :  Arrow ( ( s : {v:Ty_int | true} ) -> {v:Ty_alphalist | (slen)(v) ==(s)}
 cons :  Arrow ( ( x : {var_v3:Ty_int | true} ) ->  Arrow ( ( xs : {var_v4:Ty_alphalist | true} ) -> {v:Ty_alphalist | (slen)(v) ==((slen)(xs) + (1))}
 sizecheck :  Arrow ( ( s : {var_v2:Ty_int | true} ) -> {v:Ty_bool | DoubleImpl 
 v = true
  
 	 Conj <c s = 0
 	 , DoubleImpl 
 v = false
  s > 0 >c }
 int_gen : {var_v1:Ty_int | true}
 nil : {v:Ty_alphalist | (slen)(v) ==(0)}
 subs :  Arrow ( ( n1 : {var_v0:Ty_int | true} ) -> {v:Ty_int | (v) ==((n1) -- (1))}
 INITIAL SIGMA 
 
 TypeNames 
 
 Qualifiers 
 
 Qual slen :  :-> Ty_alphalist :-> Ty_int
 Show ***********Calling S-FUNC synthesize***************
 Show Uncurried , s:{v:Ty_int | true} -> {v:Ty_alphalist | (slen)(v) ==(s)}
 Decreasing Measure s
 Decreasing Type {v:Ty_int | true}
 Calculated Decreasing Predicate s > v
 Calculated Decreased Goal Type  Arrow ( ( s1 : {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c } ) -> {v:Ty_alphalist | (slen)(v) ==(s1)}
 Show Trying :: Top-level Match
 Show :: Synthesize Match {v:Ty_alphalist | (slen)(v) ==(s)}
 Show :: List Ty_int
 Show :: Non List Case
 Match-case failed :: Try Top-level If-then-else 
 iSynthesize If-THEN-ELSE {v:Ty_alphalist | (slen)(v) ==(s)}
 iSynthesize Boolean {var_v5:Ty_bool | true}
 esynthesizeScalar for {var_v5:Ty_bool | true}
  Enumeration for 
 spec 
 {var_v5:Ty_bool | true}
 >>>>>>>>>>>>>>>>>> No Scalar found in Environment, Trying esynthesizePureApp <<<<<<<<<<<<<<<<<< 
  Pure Fun Application: esynthesizePureApp 
 Show Potential Functions
  , 
 sizecheck
 ############################################################
  Trying Pure Component sizecheck
  *************** Trying Arrow Component ************sizecheck :  Arrow ( ( s : {var_v2:Ty_int | true} ) -> {v:Ty_bool | DoubleImpl 
 v = true
  
 	 Conj <c s = 0
 	 , DoubleImpl 
 v = false
  s > 0 >c }
  *************** Synthesizing Args ei : ti for ************sizecheck
 ##################################################################################
  Synthesizing the 1th argument for Function sizecheck
  Trying Arguments in Scalars 
 esynthesizeScalar for {var_v2:Ty_int | true}
  Enumeration for 
 spec 
 {var_v2:Ty_int | true}
 
 Enumerating a Scalar Term int_gen
 
 Type of the Scalar Term {var_v1:Ty_int | true}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 
 Enumerating a Scalar Term s
 
 Type of the Scalar Term {v:Ty_int | true}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 Show :: Found a Few Macthing Scalars 
  Next Trying Arguments of the form f (ei...) 
  Pure Fun Application: esynthesizePureApp 
 Show Potential Functions
  , 
 subs
 ############################################################
  Trying Pure Component subs
  *************** Trying Arrow Component ************subs :  Arrow ( ( n1 : {var_v0:Ty_int | true} ) -> {v:Ty_int | (v) ==((n1) -- (1))}
  *************** Synthesizing Args ei : ti for ************subs
 ##################################################################################
  Synthesizing the 1th argument for Function subs
  Trying Arguments in Scalars 
 esynthesizeScalar for {var_v0:Ty_int | true}
  Enumeration for 
 spec 
 {var_v0:Ty_int | true}
 
 Enumerating a Scalar Term int_gen
 
 Type of the Scalar Term {var_v1:Ty_int | true}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 
 Enumerating a Scalar Term s
 
 Type of the Scalar Term {v:Ty_int | true}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 Show :: Found a Few Macthing Scalars 
  Next Trying Arguments of the form f (ei...) 
  Pure Fun Application: esynthesizePureApp 
 ##################################################################################
  *************** Successfully Synthesized Args ei Forall i 
 # of Possible Argument Options for subs 2
 Possible Arg Options 
 EI s
 Possible Arg Options 
 EI int_gen
 Apply Single Argument Case : f (ei) Case subs
  Case : f (ei) Case subs s
 Finding Already seen tree for apply subs  (, s )
 Typechecking the Term apply subs  (, s )
 Against {var_v2:Ty_int | true}
 Argument s :: {v:Ty_int | true} | true
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
  Show *************** TypeChecking Succsessful {v:Ty_int | (v) ==((s) -- (1))}
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 let _lbv0 = apply subs  (, s )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  Case : f (ei) Case subs int_gen
 Finding Already seen tree for apply subs  (, int_gen )
 Typechecking the Term apply subs  (, int_gen )
 Against {var_v2:Ty_int | true}
 Argument int_gen :: {var_v1:Ty_int | true} | true
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
  Show *************** TypeChecking Succsessful {v:Ty_int | (v) ==((int_gen) -- (1))}
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 let _lbv1 = apply subs  (, int_gen )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 ##################################################################################
  *************** Successfully Synthesized Args ei Forall i 
 # of Possible Argument Options for sizecheck 4
 Possible Arg Options 
 EI s
 Possible Arg Options 
 EI int_gen
 Possible Arg Options 
 EI _lbv1
 Possible Arg Options 
 EI _lbv0
 Apply Single Argument Case : f (ei) Case sizecheck
  Case : f (ei) Case sizecheck s
 Finding Already seen tree for apply sizecheck  (, s )
 Typechecking the Term apply sizecheck  (, s )
 Against {var_v5:Ty_bool | true}
 Argument s :: {v:Ty_int | true} | true
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
  Show *************** TypeChecking Succsessful {v:Ty_bool | DoubleImpl 
 v = true
  
 	 Conj <c s = 0
 	 , DoubleImpl 
 v = false
  s > 0 >c }
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 let _lbv2 = apply sizecheck  (, s )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  Case : f (ei) Case sizecheck int_gen
 Finding Already seen tree for apply sizecheck  (, int_gen )
 Typechecking the Term apply sizecheck  (, int_gen )
 Against {var_v5:Ty_bool | true}
 Argument int_gen :: {var_v1:Ty_int | true} | true
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
  Show *************** TypeChecking Succsessful {v:Ty_bool | DoubleImpl 
 v = true
  
 	 Conj <c int_gen = 0
 	 , DoubleImpl 
 v = false
  int_gen > 0 >c }
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 let _lbv3 = apply sizecheck  (, int_gen )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  Case : f (ei) Case sizecheck _lbv1
 Finding Already seen tree for apply sizecheck  (, _lbv1 )
 Typechecking the Term apply sizecheck  (, _lbv1 )
 Against {var_v5:Ty_bool | true}
 Argument _lbv1 :: {v:Ty_int | (v) ==((int_gen) -- (1))} | (_lbv1) ==((int_gen) -- (1))
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
  Show *************** TypeChecking Succsessful {v:Ty_bool | DoubleImpl 
 v = true
  
 	 Conj <c _lbv1 = 0
 	 , DoubleImpl 
 v = false
  _lbv1 > 0 >c }
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 let _lbv4 = apply sizecheck  (, _lbv1 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  Case : f (ei) Case sizecheck _lbv0
 Finding Already seen tree for apply sizecheck  (, _lbv0 )
 Typechecking the Term apply sizecheck  (, _lbv0 )
 Against {var_v5:Ty_bool | true}
 Argument _lbv0 :: {v:Ty_int | (v) ==((s) -- (1))} | (_lbv0) ==((s) -- (1))
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
  Show *************** TypeChecking Succsessful {v:Ty_bool | DoubleImpl 
 v = true
  
 	 Conj <c _lbv0 = 0
 	 , DoubleImpl 
 v = false
  _lbv0 > 0 >c }
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 let _lbv5 = apply sizecheck  (, _lbv0 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 Show :: iSynthesize Boolean Successful _lbv5
 Show :: iSynthesize Boolean Successful {v:Ty_bool | DoubleImpl 
 v = true
  
 	 Conj <c _lbv0 = 0
 	 , DoubleImpl 
 v = false
  _lbv0 > 0 >c }
  *********************Synthesizing the True branch*******************
 Show :: True Predicate 
 	 Conj <c var_v6 = true
 	 , DoubleImpl 
 var_v6 = true
  
 	 Conj <c _lbv0 = 0
 	 , DoubleImpl 
 var_v6 = false
  _lbv0 > 0 >c  >c 
 Show ***********Calling Scalar synthesize***************
 esynthesizeScalar for {v:Ty_alphalist | (slen)(v) ==(s)}
  Enumeration for 
 spec 
 {v:Ty_alphalist | (slen)(v) ==(s)}
 
 Enumerating a Scalar Term nil
 
 Type of the Scalar Term {v:Ty_alphalist | (slen)(v) ==(0)}                                                                                                                                                
 solver 
 (declare-sort T383)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun slen (T383) Int)
(declare-fun nil () T383)
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= (slen nil) 0))
(assert (= var_v6 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= (slen nil) 0))
(assert (not (= (slen nil) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
 
 Timeout the subtype check T_vi <: T_goal
 >>>>>>>>>>>>>>>>>> No Scalar found in Environment, Trying esynthesizePureApp <<<<<<<<<<<<<<<<<< 
  Pure Fun Application: esynthesizePureApp 
 Show Potential Functions
  , 
 goal, 
 cons
 ############################################################
  Trying Pure Component goal
  *************** Trying Arrow Component ************goal :  Arrow ( ( s1 : {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c } ) -> {v:Ty_alphalist | (slen)(v) ==(s1)}
  *************** Synthesizing Args ei : ti for ************goal
 ##################################################################################
  Synthesizing the 1th argument for Function goal
  Trying Arguments in Scalars 
 esynthesizeScalar for {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c }
  Enumeration for 
 spec 
 {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c }
 
 Enumerating a Scalar Term int_gen
 
 Type of the Scalar Term {var_v1:Ty_int | true}                                                                                                                                                     
 solver 
 (declare-sort T423)
(declare-fun slen (T423) Int)
(declare-fun nil () T423)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= var_v6 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (not (> s int_gen)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
 
 Timeout the subtype check T_vi <: T_goal
 
 Enumerating a Scalar Term s
 
 Type of the Scalar Term {v:Ty_int | true}                                                                                                                                                     
 solver 
 (declare-sort T464)
(declare-fun slen (T464) Int)
(declare-fun nil () T464)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= var_v6 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (not (> s s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
 
 Timeout the subtype check T_vi <: T_goal
 
 Enumerating a Scalar Term _lbv0
 
 Type of the Scalar Term {v:Ty_int | (v) ==((s) -- (1))}                                                                                                                                                     
 solver 
 (declare-sort T505)
(declare-fun slen (T505) Int)
(declare-fun nil () T505)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun s () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(assert (= (slen nil) 0))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= _lbv0 (- s 1)))
(assert (= var_v6 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= _lbv0 (- s 1)))
(assert (not (> s _lbv0)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
 
 Timedout the subtype check T_vi <: T_goal
 
 Enumerating a Scalar Term _lbv1
 
 Type of the Scalar Term {v:Ty_int | (v) ==((int_gen) -- (1))}                                                                                                                                                     
 solver 
 (declare-sort T546)
(declare-fun slen (T546) Int)
(declare-fun nil () T546)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun int_gen () Int)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= _lbv1 (- int_gen 1)))
(assert (= var_v6 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= _lbv1 (- int_gen 1)))
(assert (not (> s _lbv1)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
 
 Timedout the subtype check T_vi <: T_goal
 >>>>>>>>>>>>>>>>>> No Scalar found in Environment, Trying esynthesizePureApp <<<<<<<<<<<<<<<<<< 
  Pure Fun Application: esynthesizePureApp 
 Show Potential Functions
  , 
 subs
 ############################################################
  Trying Pure Component subs
  *************** Trying Arrow Component ************subs :  Arrow ( ( n1 : {var_v0:Ty_int | true} ) -> {v:Ty_int | (v) ==((n1) -- (1))}
  *************** Synthesizing Args ei : ti for ************subs
 ##################################################################################
  Synthesizing the 1th argument for Function subs
  Trying Arguments in Scalars 
 esynthesizeScalar for {var_v0:Ty_int | true}
  Enumeration for 
 spec 
 {var_v0:Ty_int | true}
 
 Enumerating a Scalar Term int_gen
 
 Type of the Scalar Term {var_v1:Ty_int | true}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 
 Enumerating a Scalar Term s
 
 Type of the Scalar Term {v:Ty_int | true}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 
 Enumerating a Scalar Term _lbv0
 
 Type of the Scalar Term {v:Ty_int | (v) ==((s) -- (1))}
 ################################################
 Skipping Variable _lbv0 As Outer Function Call is subs
 
 Enumerating a Scalar Term _lbv1
 
 Type of the Scalar Term {v:Ty_int | (v) ==((int_gen) -- (1))}
 ################################################
 Skipping Variable _lbv1 As Outer Function Call is subs
 Show :: Found a Few Macthing Scalars 
  Next Trying Arguments of the form f (ei...) 
  Pure Fun Application: esynthesizePureApp 
 ##################################################################################
  *************** Successfully Synthesized Args ei Forall i 
 # of Possible Argument Options for subs 2
 Possible Arg Options 
 EI s
 Possible Arg Options 
 EI int_gen
 Apply Single Argument Case : f (ei) Case subs
  Case : f (ei) Case subs s
 Finding Already seen tree for apply subs  (, s )
 Found _lbv0
  Case : f (ei) Case subs int_gen
 Finding Already seen tree for apply subs  (, int_gen )
 Found _lbv1
  Next Trying Arguments of the form f (ei...) 
  Pure Fun Application: esynthesizePureApp 
 Show Potential Functions
  , 
 subs
 ############################################################
  Trying Pure Component subs
 ##################################################################################
  *************** Successfully Synthesized Args ei Forall i 
 # of Possible Argument Options for goal 2
 Possible Arg Options 
 EI _lbv1
 Possible Arg Options 
 EI _lbv0
 Apply Single Argument Case : f (ei) Case goal
  Case : f (ei) Case goal _lbv1
 Finding Already seen tree for apply goal  (, _lbv1 )
 Typechecking the Term apply goal  (, _lbv1 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv1 :: {v:Ty_int | (v) ==((int_gen) -- (1))} | (_lbv1) ==((int_gen) -- (1))                                                                                                                                                
 solver 
 (declare-sort T663)
(declare-fun slen (T663) Int)
(declare-fun nil () T663)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun v () T663)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= (slen v) _lbv1))
(assert (= var_v6 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= _lbv1 (- int_gen 1)))
(assert (= (slen v) _lbv1))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply goal  (, _lbv1 )
  Case : f (ei) Case goal _lbv0
 Finding Already seen tree for apply goal  (, _lbv0 )
 Typechecking the Term apply goal  (, _lbv0 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv0 :: {v:Ty_int | (v) ==((s) -- (1))} | (_lbv0) ==((s) -- (1))                                                                                                                                                
 solver 
 (declare-sort T704)
(declare-fun slen (T704) Int)
(declare-fun nil () T704)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun v () T704)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= (slen v) _lbv0))
(assert (= var_v6 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= _lbv0 (- s 1)))
(assert (= (slen v) _lbv0))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply goal  (, _lbv0 )
  ###################################################
  The Choice of Function goal Was Ill Fated Try Next Choice of function
 ############################################################
  Trying Pure Component cons
  *************** Trying Arrow Component ************cons :  Arrow ( ( x : {var_v3:Ty_int | true} ) ->  Arrow ( ( xs : {var_v4:Ty_alphalist | true} ) -> {v:Ty_alphalist | (slen)(v) ==((slen)(xs) + (1))}
  *************** Synthesizing Args ei : ti for ************cons
 ##################################################################################
  Synthesizing the 1th argument for Function cons
  Trying Arguments in Scalars 
 esynthesizeScalar for {var_v3:Ty_int | true}
  Enumeration for 
 spec 
 {var_v3:Ty_int | true}
 
 Enumerating a Scalar Term int_gen
 
 Type of the Scalar Term {var_v1:Ty_int | true}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 
 Enumerating a Scalar Term s
 
 Type of the Scalar Term {v:Ty_int | true}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 
 Enumerating a Scalar Term _lbv0
 
 Type of the Scalar Term {v:Ty_int | (v) ==((s) -- (1))}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 
 Enumerating a Scalar Term _lbv1
 
 Type of the Scalar Term {v:Ty_int | (v) ==((int_gen) -- (1))}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 Show :: Found a Few Macthing Scalars 
  Next Trying Arguments of the form f (ei...) 
  Pure Fun Application: esynthesizePureApp 
 Show Potential Functions
  , 
 subs
 ############################################################
  Trying Pure Component subs
  *************** Trying Arrow Component ************subs :  Arrow ( ( n1 : {var_v0:Ty_int | true} ) -> {v:Ty_int | (v) ==((n1) -- (1))}
  *************** Synthesizing Args ei : ti for ************subs
 ##################################################################################
  Synthesizing the 1th argument for Function subs
  Trying Arguments in Scalars 
 esynthesizeScalar for {var_v0:Ty_int | true}
  Enumeration for 
 spec 
 {var_v0:Ty_int | true}
 
 Enumerating a Scalar Term int_gen
 
 Type of the Scalar Term {var_v1:Ty_int | true}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 
 Enumerating a Scalar Term s
 
 Type of the Scalar Term {v:Ty_int | true}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 
 Enumerating a Scalar Term _lbv0
 
 Type of the Scalar Term {v:Ty_int | (v) ==((s) -- (1))}
 ################################################
 Skipping Variable _lbv0 As Outer Function Call is subs
 
 Enumerating a Scalar Term _lbv1
 
 Type of the Scalar Term {v:Ty_int | (v) ==((int_gen) -- (1))}
 ################################################
 Skipping Variable _lbv1 As Outer Function Call is subs
 Show :: Found a Few Macthing Scalars 
  Next Trying Arguments of the form f (ei...) 
  Pure Fun Application: esynthesizePureApp 
 ##################################################################################
  *************** Successfully Synthesized Args ei Forall i 
 # of Possible Argument Options for subs 2
 Possible Arg Options 
 EI s
 Possible Arg Options 
 EI int_gen
 Apply Single Argument Case : f (ei) Case subs
  Case : f (ei) Case subs s
 Finding Already seen tree for apply subs  (, s )
 Found _lbv0
  Case : f (ei) Case subs int_gen
 Finding Already seen tree for apply subs  (, int_gen )
 Found _lbv1
 ##################################################################################
  Synthesizing the 2th argument for Function cons
  Trying Arguments in Scalars 
 esynthesizeScalar for {var_v4:Ty_alphalist | true}
  Enumeration for 
 spec 
 {var_v4:Ty_alphalist | true}
 
 Enumerating a Scalar Term nil
 
 Type of the Scalar Term {v:Ty_alphalist | (slen)(v) ==(0)}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 Show :: Found a Few Macthing Scalars 
  Next Trying Arguments of the form f (ei...) 
  Pure Fun Application: esynthesizePureApp 
 Show Potential Functions
  , 
 goal, 
 cons
 ############################################################
  Trying Pure Component goal
  *************** Trying Arrow Component ************goal :  Arrow ( ( s1 : {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c } ) -> {v:Ty_alphalist | (slen)(v) ==(s1)}
  *************** Synthesizing Args ei : ti for ************goal
 ##################################################################################
  Synthesizing the 1th argument for Function goal
  Trying Arguments in Scalars 
 esynthesizeScalar for {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c }
  Enumeration for 
 spec 
 {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c }
 
 Enumerating a Scalar Term int_gen
 
 Type of the Scalar Term {var_v1:Ty_int | true}                                                                                                                                                     
 solver 
 (declare-sort T1011)
(declare-fun slen (T1011) Int)
(declare-fun nil () T1011)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= var_v6 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (not (> s int_gen)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
 
 Timeout the subtype check T_vi <: T_goal
 
 Enumerating a Scalar Term s
 
 Type of the Scalar Term {v:Ty_int | true}                                                                                                                                                     
 solver 
 (declare-sort T1052)
(declare-fun slen (T1052) Int)
(declare-fun nil () T1052)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= var_v6 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (not (> s s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
 
 Timeout the subtype check T_vi <: T_goal
 
 Enumerating a Scalar Term _lbv0
 
 Type of the Scalar Term {v:Ty_int | (v) ==((s) -- (1))}                                                                                                                                                     
 solver 
 (declare-sort T1093)
(declare-fun slen (T1093) Int)
(declare-fun nil () T1093)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun s () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(assert (= (slen nil) 0))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= _lbv0 (- s 1)))
(assert (= var_v6 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= _lbv0 (- s 1)))
(assert (not (> s _lbv0)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
 
 Timedout the subtype check T_vi <: T_goal
 
 Enumerating a Scalar Term _lbv1
 
 Type of the Scalar Term {v:Ty_int | (v) ==((int_gen) -- (1))}                                                                                                                                                     
 solver 
 (declare-sort T1134)
(declare-fun slen (T1134) Int)
(declare-fun nil () T1134)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun int_gen () Int)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= _lbv1 (- int_gen 1)))
(assert (= var_v6 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= _lbv1 (- int_gen 1)))
(assert (not (> s _lbv1)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
 
 Timedout the subtype check T_vi <: T_goal
 >>>>>>>>>>>>>>>>>> No Scalar found in Environment, Trying esynthesizePureApp <<<<<<<<<<<<<<<<<< 
  Pure Fun Application: esynthesizePureApp 
 >>>>>>>>>>>>>>>>>>  No pureApp found, Call esynthesizeConsApp <<<<<<<<<<<<<< 
  Next Trying Arguments of the form f (ei...) 
  Pure Fun Application: esynthesizePureApp 
 ##################################################################################
  *************** Synthesizing Args ei : Failed for some  arg
 ############################################################
  Trying Pure Component cons
  *************** Trying Arrow Component ************cons :  Arrow ( ( x : {var_v3:Ty_int | true} ) ->  Arrow ( ( xs : {var_v4:Ty_alphalist | true} ) -> {v:Ty_alphalist | (slen)(v) ==((slen)(xs) + (1))}
  *************** Synthesizing Args ei : ti for ************cons
 ##################################################################################
  Synthesizing the 1th argument for Function cons
  Trying Arguments in Scalars 
 esynthesizeScalar for {var_v3:Ty_int | true}
  Enumeration for 
 spec 
 {var_v3:Ty_int | true}
 
 Enumerating a Scalar Term int_gen
 
 Type of the Scalar Term {var_v1:Ty_int | true}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 
 Enumerating a Scalar Term s
 
 Type of the Scalar Term {v:Ty_int | true}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 
 Enumerating a Scalar Term _lbv0
 
 Type of the Scalar Term {v:Ty_int | (v) ==((s) -- (1))}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 
 Enumerating a Scalar Term _lbv1
 
 Type of the Scalar Term {v:Ty_int | (v) ==((int_gen) -- (1))}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 Show :: Found a Few Macthing Scalars 
  Next Trying Arguments of the form f (ei...) 
  Pure Fun Application: esynthesizePureApp 
 ##################################################################################
  Synthesizing the 2th argument for Function cons
  Trying Arguments in Scalars 
 esynthesizeScalar for {var_v4:Ty_alphalist | true}
  Enumeration for 
 spec 
 {var_v4:Ty_alphalist | true}
 
 Enumerating a Scalar Term nil
 
 Type of the Scalar Term {v:Ty_alphalist | (slen)(v) ==(0)}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 Show :: Found a Few Macthing Scalars 
  Next Trying Arguments of the form f (ei...) 
  Pure Fun Application: esynthesizePureApp 
 ##################################################################################
  *************** Successfully Synthesized Args ei Forall i 
 # of Possible Argument Options for cons 4
 Possible Arg Options 
 EI _lbv1
 EI nil
 Possible Arg Options 
 EI _lbv0
 EI nil
 Possible Arg Options 
 EI s
 EI nil
 Possible Arg Options 
 EI int_gen
 EI nil
 Show f (ei, e2, ....en) Case
 Finding Already seen tree for apply cons  (, _lbv1 ), nil )
 Typechecking apply cons  (, apply subs  (, int_gen ) ), nil )
 Against {var_v4:Ty_alphalist | true}
 Typechecking the Term apply cons  (, _lbv1 ), nil )
 Against {var_v4:Ty_alphalist | true}
 Argument _lbv1 :: {v:Ty_int | (v) ==((int_gen) -- (1))} | (_lbv1) ==((int_gen) -- (1))
 Argument nil :: {v:Ty_alphalist | (slen)(v) ==(0)} | (slen)(nil) ==(0)
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
  Show *************** TypeChecking Succsessful {v:Ty_alphalist | (slen)(v) ==((slen)(nil) + (1))}
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 let _lbv6 = apply cons  (, _lbv1 ), nil )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 Finding Already seen tree for apply cons  (, _lbv0 ), nil )
 Typechecking apply cons  (, apply subs  (, s ) ), nil )
 Against {var_v4:Ty_alphalist | true}
 Typechecking the Term apply cons  (, _lbv0 ), nil )
 Against {var_v4:Ty_alphalist | true}
 Argument _lbv0 :: {v:Ty_int | (v) ==((s) -- (1))} | (_lbv0) ==((s) -- (1))
 Argument nil :: {v:Ty_alphalist | (slen)(v) ==(0)} | (slen)(nil) ==(0)
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
  Show *************** TypeChecking Succsessful {v:Ty_alphalist | (slen)(v) ==((slen)(nil) + (1))}
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 let _lbv7 = apply cons  (, _lbv0 ), nil )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 Finding Already seen tree for apply cons  (, s ), nil )
 Typechecking apply cons  (, s ), nil )
 Against {var_v4:Ty_alphalist | true}
 Typechecking the Term apply cons  (, s ), nil )
 Against {var_v4:Ty_alphalist | true}
 Argument s :: {v:Ty_int | true} | true
 Argument nil :: {v:Ty_alphalist | (slen)(v) ==(0)} | (slen)(nil) ==(0)
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
  Show *************** TypeChecking Succsessful {v:Ty_alphalist | (slen)(v) ==((slen)(nil) + (1))}
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 let _lbv8 = apply cons  (, s ), nil )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 Finding Already seen tree for apply cons  (, int_gen ), nil )
 Typechecking apply cons  (, int_gen ), nil )
 Against {var_v4:Ty_alphalist | true}
 Typechecking the Term apply cons  (, int_gen ), nil )
 Against {var_v4:Ty_alphalist | true}
 Argument int_gen :: {var_v1:Ty_int | true} | true
 Argument nil :: {v:Ty_alphalist | (slen)(v) ==(0)} | (slen)(nil) ==(0)
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
  Show *************** TypeChecking Succsessful {v:Ty_alphalist | (slen)(v) ==((slen)(nil) + (1))}
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 let _lbv9 = apply cons  (, int_gen ), nil )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 ##################################################################################
  *************** Successfully Synthesized Args ei Forall i 
 # of Possible Argument Options for cons 30
 Possible Arg Options 
 EI _lbv1
 EI nil
 Possible Arg Options 
 EI _lbv1
 EI _lbv9
 Possible Arg Options 
 EI _lbv1
 EI _lbv8
 Possible Arg Options 
 EI _lbv1
 EI _lbv7
 Possible Arg Options 
 EI _lbv1
 EI _lbv6
 Possible Arg Options 
 EI _lbv0
 EI nil
 Possible Arg Options 
 EI _lbv0
 EI _lbv9
 Possible Arg Options 
 EI _lbv0
 EI _lbv8
 Possible Arg Options 
 EI _lbv0
 EI _lbv7
 Possible Arg Options 
 EI _lbv0
 EI _lbv6
 Possible Arg Options 
 EI s
 EI nil
 Possible Arg Options 
 EI s
 EI _lbv9
 Possible Arg Options 
 EI s
 EI _lbv8
 Possible Arg Options 
 EI s
 EI _lbv7
 Possible Arg Options 
 EI s
 EI _lbv6
 Possible Arg Options 
 EI int_gen
 EI nil
 Possible Arg Options 
 EI int_gen
 EI _lbv9
 Possible Arg Options 
 EI int_gen
 EI _lbv8
 Possible Arg Options 
 EI int_gen
 EI _lbv7
 Possible Arg Options 
 EI int_gen
 EI _lbv6
 Possible Arg Options 
 EI _lbv1
 EI nil
 Possible Arg Options 
 EI _lbv1
 EI _lbv9
 Possible Arg Options 
 EI _lbv1
 EI _lbv8
 Possible Arg Options 
 EI _lbv1
 EI _lbv7
 Possible Arg Options 
 EI _lbv1
 EI _lbv6
 Possible Arg Options 
 EI _lbv0
 EI nil
 Possible Arg Options 
 EI _lbv0
 EI _lbv9
 Possible Arg Options 
 EI _lbv0
 EI _lbv8
 Possible Arg Options 
 EI _lbv0
 EI _lbv7
 Possible Arg Options 
 EI _lbv0
 EI _lbv6
 Show f (ei, e2, ....en) Case
 Finding Already seen tree for apply cons  (, _lbv1 ), nil )
 Found _lbv6
 Finding Already seen tree for apply cons  (, _lbv1 ), _lbv9 )
 Typechecking apply cons  (, apply subs  (, int_gen ) ), apply cons  (, int_gen ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv1 ), _lbv9 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv1 :: {v:Ty_int | (v) ==((int_gen) -- (1))} | (_lbv1) ==((int_gen) -- (1))
 Argument _lbv9 :: {v:Ty_alphalist | (slen)(v) ==((slen)(nil) + (1))} | (slen)(_lbv9) ==((slen)(nil) + (1))                                                                                                                                                
 solver 
 (declare-sort T1517)
(declare-fun slen (T1517) Int)
(declare-fun nil () T1517)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun _lbv6 () T1517)
(declare-fun _lbv7 () T1517)
(declare-fun _lbv8 () T1517)
(declare-fun _lbv9 () T1517)
(declare-fun v () T1517)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= (slen _lbv6) (+ (slen nil) 1)))
(assert (= (slen _lbv7) (+ (slen nil) 1)))
(assert (= (slen _lbv8) (+ (slen nil) 1)))
(assert (= (slen _lbv9) (+ (slen nil) 1)))
(assert (= (slen v) (+ (slen _lbv9) 1)))
(assert (= var_v6 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= _lbv1 (- int_gen 1)))
(assert (= (slen _lbv9) (+ (slen nil) 1)))
(assert (= (slen v) (+ (slen _lbv9) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv1 ), _lbv9 )
 Finding Already seen tree for apply cons  (, _lbv1 ), _lbv8 )
 Typechecking apply cons  (, apply subs  (, int_gen ) ), apply cons  (, s ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv1 ), _lbv8 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv1 :: {v:Ty_int | (v) ==((int_gen) -- (1))} | (_lbv1) ==((int_gen) -- (1))
 Argument _lbv8 :: {v:Ty_alphalist | (slen)(v) ==((slen)(nil) + (1))} | (slen)(_lbv8) ==((slen)(nil) + (1))                                                                                                                                                
 solver 
 (declare-sort T1558)
(declare-fun slen (T1558) Int)
(declare-fun nil () T1558)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun _lbv6 () T1558)
(declare-fun _lbv7 () T1558)
(declare-fun _lbv8 () T1558)
(declare-fun _lbv9 () T1558)
(declare-fun v () T1558)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= (slen _lbv6) (+ (slen nil) 1)))
(assert (= (slen _lbv7) (+ (slen nil) 1)))
(assert (= (slen _lbv8) (+ (slen nil) 1)))
(assert (= (slen _lbv9) (+ (slen nil) 1)))
(assert (= (slen v) (+ (slen _lbv8) 1)))
(assert (= var_v6 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= _lbv1 (- int_gen 1)))
(assert (= (slen _lbv8) (+ (slen nil) 1)))
(assert (= (slen v) (+ (slen _lbv8) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv1 ), _lbv8 )
 Finding Already seen tree for apply cons  (, _lbv1 ), _lbv7 )
 Typechecking apply cons  (, apply subs  (, int_gen ) ), apply cons  (, apply subs  (, s ) ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv1 ), _lbv7 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv1 :: {v:Ty_int | (v) ==((int_gen) -- (1))} | (_lbv1) ==((int_gen) -- (1))
 Argument _lbv7 :: {v:Ty_alphalist | (slen)(v) ==((slen)(nil) + (1))} | (slen)(_lbv7) ==((slen)(nil) + (1))                                                                                                                                                
 solver 
 (declare-sort T1599)
(declare-fun slen (T1599) Int)
(declare-fun nil () T1599)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun _lbv6 () T1599)
(declare-fun _lbv7 () T1599)
(declare-fun _lbv8 () T1599)
(declare-fun _lbv9 () T1599)
(declare-fun v () T1599)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= (slen _lbv6) (+ (slen nil) 1)))
(assert (= (slen _lbv7) (+ (slen nil) 1)))
(assert (= (slen _lbv8) (+ (slen nil) 1)))
(assert (= (slen _lbv9) (+ (slen nil) 1)))
(assert (= (slen v) (+ (slen _lbv7) 1)))
(assert (= var_v6 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= _lbv1 (- int_gen 1)))
(assert (= (slen _lbv7) (+ (slen nil) 1)))
(assert (= (slen v) (+ (slen _lbv7) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv1 ), _lbv7 )
 Finding Already seen tree for apply cons  (, _lbv1 ), _lbv6 )
 Typechecking apply cons  (, apply subs  (, int_gen ) ), apply cons  (, apply subs  (, int_gen ) ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv1 ), _lbv6 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv1 :: {v:Ty_int | (v) ==((int_gen) -- (1))} | (_lbv1) ==((int_gen) -- (1))
 Argument _lbv6 :: {v:Ty_alphalist | (slen)(v) ==((slen)(nil) + (1))} | (slen)(_lbv6) ==((slen)(nil) + (1))                                                                                                                                                
 solver 
 (declare-sort T1640)
(declare-fun slen (T1640) Int)
(declare-fun nil () T1640)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun _lbv6 () T1640)
(declare-fun _lbv7 () T1640)
(declare-fun _lbv8 () T1640)
(declare-fun _lbv9 () T1640)
(declare-fun v () T1640)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= (slen _lbv6) (+ (slen nil) 1)))
(assert (= (slen _lbv7) (+ (slen nil) 1)))
(assert (= (slen _lbv8) (+ (slen nil) 1)))
(assert (= (slen _lbv9) (+ (slen nil) 1)))
(assert (= (slen v) (+ (slen _lbv6) 1)))
(assert (= var_v6 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= _lbv1 (- int_gen 1)))
(assert (= (slen _lbv6) (+ (slen nil) 1)))
(assert (= (slen v) (+ (slen _lbv6) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv1 ), _lbv6 )
 Finding Already seen tree for apply cons  (, _lbv0 ), nil )
 Found _lbv7
 Finding Already seen tree for apply cons  (, _lbv0 ), _lbv9 )
 Typechecking apply cons  (, apply subs  (, s ) ), apply cons  (, int_gen ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv0 ), _lbv9 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv0 :: {v:Ty_int | (v) ==((s) -- (1))} | (_lbv0) ==((s) -- (1))
 Argument _lbv9 :: {v:Ty_alphalist | (slen)(v) ==((slen)(nil) + (1))} | (slen)(_lbv9) ==((slen)(nil) + (1))                                                                                                                                                
 solver 
 (declare-sort T1681)
(declare-fun slen (T1681) Int)
(declare-fun nil () T1681)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun _lbv6 () T1681)
(declare-fun _lbv7 () T1681)
(declare-fun _lbv8 () T1681)
(declare-fun _lbv9 () T1681)
(declare-fun v () T1681)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= (slen _lbv6) (+ (slen nil) 1)))
(assert (= (slen _lbv7) (+ (slen nil) 1)))
(assert (= (slen _lbv8) (+ (slen nil) 1)))
(assert (= (slen _lbv9) (+ (slen nil) 1)))
(assert (= (slen v) (+ (slen _lbv9) 1)))
(assert (= var_v6 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= _lbv0 (- s 1)))
(assert (= (slen _lbv9) (+ (slen nil) 1)))
(assert (= (slen v) (+ (slen _lbv9) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv0 ), _lbv9 )
 Finding Already seen tree for apply cons  (, _lbv0 ), _lbv8 )
 Typechecking apply cons  (, apply subs  (, s ) ), apply cons  (, s ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv0 ), _lbv8 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv0 :: {v:Ty_int | (v) ==((s) -- (1))} | (_lbv0) ==((s) -- (1))
 Argument _lbv8 :: {v:Ty_alphalist | (slen)(v) ==((slen)(nil) + (1))} | (slen)(_lbv8) ==((slen)(nil) + (1))                                                                                                                                                
 solver 
 (declare-sort T1722)
(declare-fun slen (T1722) Int)
(declare-fun nil () T1722)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun _lbv6 () T1722)
(declare-fun _lbv7 () T1722)
(declare-fun _lbv8 () T1722)
(declare-fun _lbv9 () T1722)
(declare-fun v () T1722)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= (slen _lbv6) (+ (slen nil) 1)))
(assert (= (slen _lbv7) (+ (slen nil) 1)))
(assert (= (slen _lbv8) (+ (slen nil) 1)))
(assert (= (slen _lbv9) (+ (slen nil) 1)))
(assert (= (slen v) (+ (slen _lbv8) 1)))
(assert (= var_v6 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= _lbv0 (- s 1)))
(assert (= (slen _lbv8) (+ (slen nil) 1)))
(assert (= (slen v) (+ (slen _lbv8) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv0 ), _lbv8 )
 Finding Already seen tree for apply cons  (, _lbv0 ), _lbv7 )
 Typechecking apply cons  (, apply subs  (, s ) ), apply cons  (, apply subs  (, s ) ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv0 ), _lbv7 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv0 :: {v:Ty_int | (v) ==((s) -- (1))} | (_lbv0) ==((s) -- (1))
 Argument _lbv7 :: {v:Ty_alphalist | (slen)(v) ==((slen)(nil) + (1))} | (slen)(_lbv7) ==((slen)(nil) + (1))                                                                                                                                                
 solver 
 (declare-sort T1763)
(declare-fun slen (T1763) Int)
(declare-fun nil () T1763)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun _lbv6 () T1763)
(declare-fun _lbv7 () T1763)
(declare-fun _lbv8 () T1763)
(declare-fun _lbv9 () T1763)
(declare-fun v () T1763)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= (slen _lbv6) (+ (slen nil) 1)))
(assert (= (slen _lbv7) (+ (slen nil) 1)))
(assert (= (slen _lbv8) (+ (slen nil) 1)))
(assert (= (slen _lbv9) (+ (slen nil) 1)))
(assert (= (slen v) (+ (slen _lbv7) 1)))
(assert (= var_v6 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= _lbv0 (- s 1)))
(assert (= (slen _lbv7) (+ (slen nil) 1)))
(assert (= (slen v) (+ (slen _lbv7) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv0 ), _lbv7 )
 Finding Already seen tree for apply cons  (, _lbv0 ), _lbv6 )
 Typechecking apply cons  (, apply subs  (, s ) ), apply cons  (, apply subs  (, int_gen ) ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv0 ), _lbv6 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv0 :: {v:Ty_int | (v) ==((s) -- (1))} | (_lbv0) ==((s) -- (1))
 Argument _lbv6 :: {v:Ty_alphalist | (slen)(v) ==((slen)(nil) + (1))} | (slen)(_lbv6) ==((slen)(nil) + (1))                                                                                                                                                
 solver 
 (declare-sort T1804)
(declare-fun slen (T1804) Int)
(declare-fun nil () T1804)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun _lbv6 () T1804)
(declare-fun _lbv7 () T1804)
(declare-fun _lbv8 () T1804)
(declare-fun _lbv9 () T1804)
(declare-fun v () T1804)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= (slen _lbv6) (+ (slen nil) 1)))
(assert (= (slen _lbv7) (+ (slen nil) 1)))
(assert (= (slen _lbv8) (+ (slen nil) 1)))
(assert (= (slen _lbv9) (+ (slen nil) 1)))
(assert (= (slen v) (+ (slen _lbv6) 1)))
(assert (= var_v6 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= _lbv0 (- s 1)))
(assert (= (slen _lbv6) (+ (slen nil) 1)))
(assert (= (slen v) (+ (slen _lbv6) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv0 ), _lbv6 )
 Finding Already seen tree for apply cons  (, s ), nil )
 Found _lbv8
 Finding Already seen tree for apply cons  (, s ), _lbv9 )
 Typechecking apply cons  (, s ), apply cons  (, int_gen ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, s ), _lbv9 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument s :: {v:Ty_int | true} | true
 Argument _lbv9 :: {v:Ty_alphalist | (slen)(v) ==((slen)(nil) + (1))} | (slen)(_lbv9) ==((slen)(nil) + (1))                                                                                                                                                
 solver 
 (declare-sort T1845)
(declare-fun slen (T1845) Int)
(declare-fun nil () T1845)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun _lbv6 () T1845)
(declare-fun _lbv7 () T1845)
(declare-fun _lbv8 () T1845)
(declare-fun _lbv9 () T1845)
(declare-fun v () T1845)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= (slen _lbv6) (+ (slen nil) 1)))
(assert (= (slen _lbv7) (+ (slen nil) 1)))
(assert (= (slen _lbv8) (+ (slen nil) 1)))
(assert (= (slen _lbv9) (+ (slen nil) 1)))
(assert (= (slen v) (+ (slen _lbv9) 1)))
(assert (= var_v6 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= (slen _lbv9) (+ (slen nil) 1)))
(assert (= (slen v) (+ (slen _lbv9) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, s ), _lbv9 )
 Finding Already seen tree for apply cons  (, s ), _lbv8 )
 Typechecking apply cons  (, s ), apply cons  (, s ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, s ), _lbv8 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument s :: {v:Ty_int | true} | true
 Argument _lbv8 :: {v:Ty_alphalist | (slen)(v) ==((slen)(nil) + (1))} | (slen)(_lbv8) ==((slen)(nil) + (1))                                                                                                                                                
 solver 
 (declare-sort T1886)
(declare-fun slen (T1886) Int)
(declare-fun nil () T1886)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun _lbv6 () T1886)
(declare-fun _lbv7 () T1886)
(declare-fun _lbv8 () T1886)
(declare-fun _lbv9 () T1886)
(declare-fun v () T1886)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= (slen _lbv6) (+ (slen nil) 1)))
(assert (= (slen _lbv7) (+ (slen nil) 1)))
(assert (= (slen _lbv8) (+ (slen nil) 1)))
(assert (= (slen _lbv9) (+ (slen nil) 1)))
(assert (= (slen v) (+ (slen _lbv8) 1)))
(assert (= var_v6 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= (slen _lbv8) (+ (slen nil) 1)))
(assert (= (slen v) (+ (slen _lbv8) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, s ), _lbv8 )
 Finding Already seen tree for apply cons  (, s ), _lbv7 )
 Typechecking apply cons  (, s ), apply cons  (, apply subs  (, s ) ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, s ), _lbv7 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument s :: {v:Ty_int | true} | true
 Argument _lbv7 :: {v:Ty_alphalist | (slen)(v) ==((slen)(nil) + (1))} | (slen)(_lbv7) ==((slen)(nil) + (1))                                                                                                                                                
 solver 
 (declare-sort T1927)
(declare-fun slen (T1927) Int)
(declare-fun nil () T1927)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun _lbv6 () T1927)
(declare-fun _lbv7 () T1927)
(declare-fun _lbv8 () T1927)
(declare-fun _lbv9 () T1927)
(declare-fun v () T1927)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= (slen _lbv6) (+ (slen nil) 1)))
(assert (= (slen _lbv7) (+ (slen nil) 1)))
(assert (= (slen _lbv8) (+ (slen nil) 1)))
(assert (= (slen _lbv9) (+ (slen nil) 1)))
(assert (= (slen v) (+ (slen _lbv7) 1)))
(assert (= var_v6 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= (slen _lbv7) (+ (slen nil) 1)))
(assert (= (slen v) (+ (slen _lbv7) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, s ), _lbv7 )
 Finding Already seen tree for apply cons  (, s ), _lbv6 )
 Typechecking apply cons  (, s ), apply cons  (, apply subs  (, int_gen ) ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, s ), _lbv6 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument s :: {v:Ty_int | true} | true
 Argument _lbv6 :: {v:Ty_alphalist | (slen)(v) ==((slen)(nil) + (1))} | (slen)(_lbv6) ==((slen)(nil) + (1))                                                                                                                                                
 solver 
 (declare-sort T1968)
(declare-fun slen (T1968) Int)
(declare-fun nil () T1968)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun _lbv6 () T1968)
(declare-fun _lbv7 () T1968)
(declare-fun _lbv8 () T1968)
(declare-fun _lbv9 () T1968)
(declare-fun v () T1968)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= (slen _lbv6) (+ (slen nil) 1)))
(assert (= (slen _lbv7) (+ (slen nil) 1)))
(assert (= (slen _lbv8) (+ (slen nil) 1)))
(assert (= (slen _lbv9) (+ (slen nil) 1)))
(assert (= (slen v) (+ (slen _lbv6) 1)))
(assert (= var_v6 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= (slen _lbv6) (+ (slen nil) 1)))
(assert (= (slen v) (+ (slen _lbv6) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, s ), _lbv6 )
 Finding Already seen tree for apply cons  (, int_gen ), nil )
 Found _lbv9
 Finding Already seen tree for apply cons  (, int_gen ), _lbv9 )
 Typechecking apply cons  (, int_gen ), apply cons  (, int_gen ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, int_gen ), _lbv9 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument int_gen :: {var_v1:Ty_int | true} | true
 Argument _lbv9 :: {v:Ty_alphalist | (slen)(v) ==((slen)(nil) + (1))} | (slen)(_lbv9) ==((slen)(nil) + (1))                                                                                                                                                
 solver 
 (declare-sort T2009)
(declare-fun slen (T2009) Int)
(declare-fun nil () T2009)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun _lbv6 () T2009)
(declare-fun _lbv7 () T2009)
(declare-fun _lbv8 () T2009)
(declare-fun _lbv9 () T2009)
(declare-fun v () T2009)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= (slen _lbv6) (+ (slen nil) 1)))
(assert (= (slen _lbv7) (+ (slen nil) 1)))
(assert (= (slen _lbv8) (+ (slen nil) 1)))
(assert (= (slen _lbv9) (+ (slen nil) 1)))
(assert (= (slen v) (+ (slen _lbv9) 1)))
(assert (= var_v6 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= (slen _lbv9) (+ (slen nil) 1)))
(assert (= (slen v) (+ (slen _lbv9) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, int_gen ), _lbv9 )
 Finding Already seen tree for apply cons  (, int_gen ), _lbv8 )
 Typechecking apply cons  (, int_gen ), apply cons  (, s ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, int_gen ), _lbv8 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument int_gen :: {var_v1:Ty_int | true} | true
 Argument _lbv8 :: {v:Ty_alphalist | (slen)(v) ==((slen)(nil) + (1))} | (slen)(_lbv8) ==((slen)(nil) + (1))                                                                                                                                                
 solver 
 (declare-sort T2050)
(declare-fun slen (T2050) Int)
(declare-fun nil () T2050)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun _lbv6 () T2050)
(declare-fun _lbv7 () T2050)
(declare-fun _lbv8 () T2050)
(declare-fun _lbv9 () T2050)
(declare-fun v () T2050)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= (slen _lbv6) (+ (slen nil) 1)))
(assert (= (slen _lbv7) (+ (slen nil) 1)))
(assert (= (slen _lbv8) (+ (slen nil) 1)))
(assert (= (slen _lbv9) (+ (slen nil) 1)))
(assert (= (slen v) (+ (slen _lbv8) 1)))
(assert (= var_v6 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= (slen _lbv8) (+ (slen nil) 1)))
(assert (= (slen v) (+ (slen _lbv8) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, int_gen ), _lbv8 )
 Finding Already seen tree for apply cons  (, int_gen ), _lbv7 )
 Typechecking apply cons  (, int_gen ), apply cons  (, apply subs  (, s ) ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, int_gen ), _lbv7 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument int_gen :: {var_v1:Ty_int | true} | true
 Argument _lbv7 :: {v:Ty_alphalist | (slen)(v) ==((slen)(nil) + (1))} | (slen)(_lbv7) ==((slen)(nil) + (1))                                                                                                                                                
 solver 
 (declare-sort T2091)
(declare-fun slen (T2091) Int)
(declare-fun nil () T2091)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun _lbv6 () T2091)
(declare-fun _lbv7 () T2091)
(declare-fun _lbv8 () T2091)
(declare-fun _lbv9 () T2091)
(declare-fun v () T2091)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= (slen _lbv6) (+ (slen nil) 1)))
(assert (= (slen _lbv7) (+ (slen nil) 1)))
(assert (= (slen _lbv8) (+ (slen nil) 1)))
(assert (= (slen _lbv9) (+ (slen nil) 1)))
(assert (= (slen v) (+ (slen _lbv7) 1)))
(assert (= var_v6 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= (slen _lbv7) (+ (slen nil) 1)))
(assert (= (slen v) (+ (slen _lbv7) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, int_gen ), _lbv7 )
 Finding Already seen tree for apply cons  (, int_gen ), _lbv6 )
 Typechecking apply cons  (, int_gen ), apply cons  (, apply subs  (, int_gen ) ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, int_gen ), _lbv6 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument int_gen :: {var_v1:Ty_int | true} | true
 Argument _lbv6 :: {v:Ty_alphalist | (slen)(v) ==((slen)(nil) + (1))} | (slen)(_lbv6) ==((slen)(nil) + (1))                                                                                                                                                
 solver 
 (declare-sort T2132)
(declare-fun slen (T2132) Int)
(declare-fun nil () T2132)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun _lbv6 () T2132)
(declare-fun _lbv7 () T2132)
(declare-fun _lbv8 () T2132)
(declare-fun _lbv9 () T2132)
(declare-fun v () T2132)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= (slen _lbv6) (+ (slen nil) 1)))
(assert (= (slen _lbv7) (+ (slen nil) 1)))
(assert (= (slen _lbv8) (+ (slen nil) 1)))
(assert (= (slen _lbv9) (+ (slen nil) 1)))
(assert (= (slen v) (+ (slen _lbv6) 1)))
(assert (= var_v6 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= (slen _lbv6) (+ (slen nil) 1)))
(assert (= (slen v) (+ (slen _lbv6) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, int_gen ), _lbv6 )
 Finding Already seen tree for apply cons  (, _lbv1 ), nil )
 Found _lbv6
 Finding Already seen tree for apply cons  (, _lbv1 ), _lbv9 )
 Typechecking apply cons  (, apply subs  (, int_gen ) ), apply cons  (, int_gen ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv1 ), _lbv9 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv1 :: {v:Ty_int | (v) ==((int_gen) -- (1))} | (_lbv1) ==((int_gen) -- (1))
 Argument _lbv9 :: {v:Ty_alphalist | (slen)(v) ==((slen)(nil) + (1))} | (slen)(_lbv9) ==((slen)(nil) + (1))                                                                                                                                                
 solver 
 (declare-sort T2173)
(declare-fun slen (T2173) Int)
(declare-fun nil () T2173)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun _lbv6 () T2173)
(declare-fun _lbv7 () T2173)
(declare-fun _lbv8 () T2173)
(declare-fun _lbv9 () T2173)
(declare-fun v () T2173)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= (slen _lbv6) (+ (slen nil) 1)))
(assert (= (slen _lbv7) (+ (slen nil) 1)))
(assert (= (slen _lbv8) (+ (slen nil) 1)))
(assert (= (slen _lbv9) (+ (slen nil) 1)))
(assert (= (slen v) (+ (slen _lbv9) 1)))
(assert (= var_v6 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= _lbv1 (- int_gen 1)))
(assert (= (slen _lbv9) (+ (slen nil) 1)))
(assert (= (slen v) (+ (slen _lbv9) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv1 ), _lbv9 )
 Finding Already seen tree for apply cons  (, _lbv1 ), _lbv8 )
 Typechecking apply cons  (, apply subs  (, int_gen ) ), apply cons  (, s ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv1 ), _lbv8 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv1 :: {v:Ty_int | (v) ==((int_gen) -- (1))} | (_lbv1) ==((int_gen) -- (1))
 Argument _lbv8 :: {v:Ty_alphalist | (slen)(v) ==((slen)(nil) + (1))} | (slen)(_lbv8) ==((slen)(nil) + (1))                                                                                                                                                
 solver 
 (declare-sort T2214)
(declare-fun slen (T2214) Int)
(declare-fun nil () T2214)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun _lbv6 () T2214)
(declare-fun _lbv7 () T2214)
(declare-fun _lbv8 () T2214)
(declare-fun _lbv9 () T2214)
(declare-fun v () T2214)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= (slen _lbv6) (+ (slen nil) 1)))
(assert (= (slen _lbv7) (+ (slen nil) 1)))
(assert (= (slen _lbv8) (+ (slen nil) 1)))
(assert (= (slen _lbv9) (+ (slen nil) 1)))
(assert (= (slen v) (+ (slen _lbv8) 1)))
(assert (= var_v6 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= _lbv1 (- int_gen 1)))
(assert (= (slen _lbv8) (+ (slen nil) 1)))
(assert (= (slen v) (+ (slen _lbv8) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv1 ), _lbv8 )
 Finding Already seen tree for apply cons  (, _lbv1 ), _lbv7 )
 Typechecking apply cons  (, apply subs  (, int_gen ) ), apply cons  (, apply subs  (, s ) ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv1 ), _lbv7 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv1 :: {v:Ty_int | (v) ==((int_gen) -- (1))} | (_lbv1) ==((int_gen) -- (1))
 Argument _lbv7 :: {v:Ty_alphalist | (slen)(v) ==((slen)(nil) + (1))} | (slen)(_lbv7) ==((slen)(nil) + (1))                                                                                                                                                
 solver 
 (declare-sort T2255)
(declare-fun slen (T2255) Int)
(declare-fun nil () T2255)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun _lbv6 () T2255)
(declare-fun _lbv7 () T2255)
(declare-fun _lbv8 () T2255)
(declare-fun _lbv9 () T2255)
(declare-fun v () T2255)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= (slen _lbv6) (+ (slen nil) 1)))
(assert (= (slen _lbv7) (+ (slen nil) 1)))
(assert (= (slen _lbv8) (+ (slen nil) 1)))
(assert (= (slen _lbv9) (+ (slen nil) 1)))
(assert (= (slen v) (+ (slen _lbv7) 1)))
(assert (= var_v6 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= _lbv1 (- int_gen 1)))
(assert (= (slen _lbv7) (+ (slen nil) 1)))
(assert (= (slen v) (+ (slen _lbv7) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv1 ), _lbv7 )
 Finding Already seen tree for apply cons  (, _lbv1 ), _lbv6 )
 Typechecking apply cons  (, apply subs  (, int_gen ) ), apply cons  (, apply subs  (, int_gen ) ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv1 ), _lbv6 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv1 :: {v:Ty_int | (v) ==((int_gen) -- (1))} | (_lbv1) ==((int_gen) -- (1))
 Argument _lbv6 :: {v:Ty_alphalist | (slen)(v) ==((slen)(nil) + (1))} | (slen)(_lbv6) ==((slen)(nil) + (1))                                                                                                                                                
 solver 
 (declare-sort T2296)
(declare-fun slen (T2296) Int)
(declare-fun nil () T2296)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun _lbv6 () T2296)
(declare-fun _lbv7 () T2296)
(declare-fun _lbv8 () T2296)
(declare-fun _lbv9 () T2296)
(declare-fun v () T2296)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= (slen _lbv6) (+ (slen nil) 1)))
(assert (= (slen _lbv7) (+ (slen nil) 1)))
(assert (= (slen _lbv8) (+ (slen nil) 1)))
(assert (= (slen _lbv9) (+ (slen nil) 1)))
(assert (= (slen v) (+ (slen _lbv6) 1)))
(assert (= var_v6 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= _lbv1 (- int_gen 1)))
(assert (= (slen _lbv6) (+ (slen nil) 1)))
(assert (= (slen v) (+ (slen _lbv6) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv1 ), _lbv6 )
 Finding Already seen tree for apply cons  (, _lbv0 ), nil )
 Found _lbv7
 Finding Already seen tree for apply cons  (, _lbv0 ), _lbv9 )
 Typechecking apply cons  (, apply subs  (, s ) ), apply cons  (, int_gen ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv0 ), _lbv9 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv0 :: {v:Ty_int | (v) ==((s) -- (1))} | (_lbv0) ==((s) -- (1))
 Argument _lbv9 :: {v:Ty_alphalist | (slen)(v) ==((slen)(nil) + (1))} | (slen)(_lbv9) ==((slen)(nil) + (1))                                                                                                                                                
 solver 
 (declare-sort T2337)
(declare-fun slen (T2337) Int)
(declare-fun nil () T2337)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun _lbv6 () T2337)
(declare-fun _lbv7 () T2337)
(declare-fun _lbv8 () T2337)
(declare-fun _lbv9 () T2337)
(declare-fun v () T2337)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= (slen _lbv6) (+ (slen nil) 1)))
(assert (= (slen _lbv7) (+ (slen nil) 1)))
(assert (= (slen _lbv8) (+ (slen nil) 1)))
(assert (= (slen _lbv9) (+ (slen nil) 1)))
(assert (= (slen v) (+ (slen _lbv9) 1)))
(assert (= var_v6 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= _lbv0 (- s 1)))
(assert (= (slen _lbv9) (+ (slen nil) 1)))
(assert (= (slen v) (+ (slen _lbv9) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv0 ), _lbv9 )
 Finding Already seen tree for apply cons  (, _lbv0 ), _lbv8 )
 Typechecking apply cons  (, apply subs  (, s ) ), apply cons  (, s ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv0 ), _lbv8 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv0 :: {v:Ty_int | (v) ==((s) -- (1))} | (_lbv0) ==((s) -- (1))
 Argument _lbv8 :: {v:Ty_alphalist | (slen)(v) ==((slen)(nil) + (1))} | (slen)(_lbv8) ==((slen)(nil) + (1))                                                                                                                                                
 solver 
 (declare-sort T2378)
(declare-fun slen (T2378) Int)
(declare-fun nil () T2378)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun _lbv6 () T2378)
(declare-fun _lbv7 () T2378)
(declare-fun _lbv8 () T2378)
(declare-fun _lbv9 () T2378)
(declare-fun v () T2378)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= (slen _lbv6) (+ (slen nil) 1)))
(assert (= (slen _lbv7) (+ (slen nil) 1)))
(assert (= (slen _lbv8) (+ (slen nil) 1)))
(assert (= (slen _lbv9) (+ (slen nil) 1)))
(assert (= (slen v) (+ (slen _lbv8) 1)))
(assert (= var_v6 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= _lbv0 (- s 1)))
(assert (= (slen _lbv8) (+ (slen nil) 1)))
(assert (= (slen v) (+ (slen _lbv8) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv0 ), _lbv8 )
 Finding Already seen tree for apply cons  (, _lbv0 ), _lbv7 )
 Typechecking apply cons  (, apply subs  (, s ) ), apply cons  (, apply subs  (, s ) ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv0 ), _lbv7 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv0 :: {v:Ty_int | (v) ==((s) -- (1))} | (_lbv0) ==((s) -- (1))
 Argument _lbv7 :: {v:Ty_alphalist | (slen)(v) ==((slen)(nil) + (1))} | (slen)(_lbv7) ==((slen)(nil) + (1))                                                                                                                                                
 solver 
 (declare-sort T2419)
(declare-fun slen (T2419) Int)
(declare-fun nil () T2419)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun _lbv6 () T2419)
(declare-fun _lbv7 () T2419)
(declare-fun _lbv8 () T2419)
(declare-fun _lbv9 () T2419)
(declare-fun v () T2419)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= (slen _lbv6) (+ (slen nil) 1)))
(assert (= (slen _lbv7) (+ (slen nil) 1)))
(assert (= (slen _lbv8) (+ (slen nil) 1)))
(assert (= (slen _lbv9) (+ (slen nil) 1)))
(assert (= (slen v) (+ (slen _lbv7) 1)))
(assert (= var_v6 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= _lbv0 (- s 1)))
(assert (= (slen _lbv7) (+ (slen nil) 1)))
(assert (= (slen v) (+ (slen _lbv7) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv0 ), _lbv7 )
 Finding Already seen tree for apply cons  (, _lbv0 ), _lbv6 )
 Typechecking apply cons  (, apply subs  (, s ) ), apply cons  (, apply subs  (, int_gen ) ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv0 ), _lbv6 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv0 :: {v:Ty_int | (v) ==((s) -- (1))} | (_lbv0) ==((s) -- (1))
 Argument _lbv6 :: {v:Ty_alphalist | (slen)(v) ==((slen)(nil) + (1))} | (slen)(_lbv6) ==((slen)(nil) + (1))                                                                                                                                                
 solver 
 (declare-sort T2460)
(declare-fun slen (T2460) Int)
(declare-fun nil () T2460)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun _lbv6 () T2460)
(declare-fun _lbv7 () T2460)
(declare-fun _lbv8 () T2460)
(declare-fun _lbv9 () T2460)
(declare-fun v () T2460)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= (slen _lbv6) (+ (slen nil) 1)))
(assert (= (slen _lbv7) (+ (slen nil) 1)))
(assert (= (slen _lbv8) (+ (slen nil) 1)))
(assert (= (slen _lbv9) (+ (slen nil) 1)))
(assert (= (slen v) (+ (slen _lbv6) 1)))
(assert (= var_v6 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= _lbv0 (- s 1)))
(assert (= (slen _lbv6) (+ (slen nil) 1)))
(assert (= (slen v) (+ (slen _lbv6) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv0 ), _lbv6 )
 True Branch :: Successfully Synthesisized
 *********************************************
 if apply sizecheck  (, apply subs  (, s ) )
 	 then 
 ***********
 apply cons  (, apply subs  (, s ) ), nil )
 ***********
 apply cons  (, apply subs  (, int_gen ) ), nil )
 ***********
 apply cons  (, int_gen ), nil )
 ***********
 apply cons  (, s ), nil )
 ***********
 apply cons  (, apply subs  (, s ) ), nil )
 ***********
 apply cons  (, apply subs  (, int_gen ) ), nil )
 ************If Else False Branch**************
 *********************************************
 False Branch :: Trying False Branch
 Show :: Synthesizing the false branch
 Show :: False Predicate 
 	 Conj <c var_v6 = false
 	 , DoubleImpl 
 var_v6 = true
  
 	 Conj <c _lbv0 = 0
 	 , DoubleImpl 
 var_v6 = false
  _lbv0 > 0 >c  >c 
 Show ***********Calling Scalar synthesize***************
 esynthesizeScalar for {v:Ty_alphalist | (slen)(v) ==(s)}
  Enumeration for 
 spec 
 {v:Ty_alphalist | (slen)(v) ==(s)}
 
 Enumerating a Scalar Term nil
 
 Type of the Scalar Term {v:Ty_alphalist | (slen)(v) ==(0)}                                                                                                                                                
 solver 
 (declare-sort T2502)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun slen (T2502) Int)
(declare-fun nil () T2502)
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= (slen nil) 0))
(assert (= var_v6 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= (slen nil) 0))
(assert (not (= (slen nil) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
 
 Timeout the subtype check T_vi <: T_goal
 >>>>>>>>>>>>>>>>>> No Scalar found in Environment, Trying esynthesizePureApp <<<<<<<<<<<<<<<<<< 
  Pure Fun Application: esynthesizePureApp 
 Show Potential Functions
  , 
 goal, 
 cons
 ############################################################
  Trying Pure Component goal
  *************** Trying Arrow Component ************goal :  Arrow ( ( s1 : {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c } ) -> {v:Ty_alphalist | (slen)(v) ==(s1)}
  *************** Synthesizing Args ei : ti for ************goal
 ##################################################################################
  Synthesizing the 1th argument for Function goal
  Trying Arguments in Scalars 
 esynthesizeScalar for {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c }
  Enumeration for 
 spec 
 {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c }
 
 Enumerating a Scalar Term int_gen
 
 Type of the Scalar Term {var_v1:Ty_int | true}                                                                                                                                                     
 solver 
 (declare-sort T2542)
(declare-fun slen (T2542) Int)
(declare-fun nil () T2542)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= var_v6 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (not (> s int_gen)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
 
 Timeout the subtype check T_vi <: T_goal
 
 Enumerating a Scalar Term s
 
 Type of the Scalar Term {v:Ty_int | true}                                                                                                                                                     
 solver 
 (declare-sort T2583)
(declare-fun slen (T2583) Int)
(declare-fun nil () T2583)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= var_v6 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (not (> s s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
 
 Timeout the subtype check T_vi <: T_goal
 
 Enumerating a Scalar Term _lbv0
 
 Type of the Scalar Term {v:Ty_int | (v) ==((s) -- (1))}                                                                                                                                                     
 solver 
 (declare-sort T2624)
(declare-fun slen (T2624) Int)
(declare-fun nil () T2624)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun s () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(assert (= (slen nil) 0))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= _lbv0 (- s 1)))
(assert (= var_v6 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= _lbv0 (- s 1)))
(assert (not (> s _lbv0)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
 
 Timedout the subtype check T_vi <: T_goal
 
 Enumerating a Scalar Term _lbv1
 
 Type of the Scalar Term {v:Ty_int | (v) ==((int_gen) -- (1))}                                                                                                                                                     
 solver 
 (declare-sort T2665)
(declare-fun slen (T2665) Int)
(declare-fun nil () T2665)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun int_gen () Int)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= _lbv1 (- int_gen 1)))
(assert (= var_v6 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= _lbv1 (- int_gen 1)))
(assert (not (> s _lbv1)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
 
 Timedout the subtype check T_vi <: T_goal
 >>>>>>>>>>>>>>>>>> No Scalar found in Environment, Trying esynthesizePureApp <<<<<<<<<<<<<<<<<< 
  Pure Fun Application: esynthesizePureApp 
 Show Potential Functions
  , 
 subs
 ############################################################
  Trying Pure Component subs
  *************** Trying Arrow Component ************subs :  Arrow ( ( n1 : {var_v0:Ty_int | true} ) -> {v:Ty_int | (v) ==((n1) -- (1))}
  *************** Synthesizing Args ei : ti for ************subs
 ##################################################################################
  Synthesizing the 1th argument for Function subs
  Trying Arguments in Scalars 
 esynthesizeScalar for {var_v0:Ty_int | true}
  Enumeration for 
 spec 
 {var_v0:Ty_int | true}
 
 Enumerating a Scalar Term int_gen
 
 Type of the Scalar Term {var_v1:Ty_int | true}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 
 Enumerating a Scalar Term s
 
 Type of the Scalar Term {v:Ty_int | true}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 
 Enumerating a Scalar Term _lbv0
 
 Type of the Scalar Term {v:Ty_int | (v) ==((s) -- (1))}
 ################################################
 Skipping Variable _lbv0 As Outer Function Call is subs
 
 Enumerating a Scalar Term _lbv1
 
 Type of the Scalar Term {v:Ty_int | (v) ==((int_gen) -- (1))}
 ################################################
 Skipping Variable _lbv1 As Outer Function Call is subs
 Show :: Found a Few Macthing Scalars 
  Next Trying Arguments of the form f (ei...) 
  Pure Fun Application: esynthesizePureApp 
 ##################################################################################
  *************** Successfully Synthesized Args ei Forall i 
 # of Possible Argument Options for subs 2
 Possible Arg Options 
 EI s
 Possible Arg Options 
 EI int_gen
 Apply Single Argument Case : f (ei) Case subs
  Case : f (ei) Case subs s
 Finding Already seen tree for apply subs  (, s )
 Found _lbv0
  Case : f (ei) Case subs int_gen
 Finding Already seen tree for apply subs  (, int_gen )
 Found _lbv1
  Next Trying Arguments of the form f (ei...) 
  Pure Fun Application: esynthesizePureApp 
 Show Potential Functions
  , 
 subs
 ############################################################
  Trying Pure Component subs
 ##################################################################################
  *************** Successfully Synthesized Args ei Forall i 
 # of Possible Argument Options for goal 2
 Possible Arg Options 
 EI _lbv1
 Possible Arg Options 
 EI _lbv0
 Apply Single Argument Case : f (ei) Case goal
  Case : f (ei) Case goal _lbv1
 Finding Already seen tree for apply goal  (, _lbv1 )
 Typechecking the Term apply goal  (, _lbv1 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv1 :: {v:Ty_int | (v) ==((int_gen) -- (1))} | (_lbv1) ==((int_gen) -- (1))                                                                                                                                                
 solver 
 (declare-sort T2782)
(declare-fun slen (T2782) Int)
(declare-fun nil () T2782)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun v () T2782)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= (slen v) _lbv1))
(assert (= var_v6 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= _lbv1 (- int_gen 1)))
(assert (= (slen v) _lbv1))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply goal  (, _lbv1 )
  Case : f (ei) Case goal _lbv0
 Finding Already seen tree for apply goal  (, _lbv0 )
 Typechecking the Term apply goal  (, _lbv0 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv0 :: {v:Ty_int | (v) ==((s) -- (1))} | (_lbv0) ==((s) -- (1))                                                                                                                                                
 solver 
 (declare-sort T2823)
(declare-fun slen (T2823) Int)
(declare-fun nil () T2823)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun v () T2823)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= (slen v) _lbv0))
(assert (= var_v6 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= _lbv0 (- s 1)))
(assert (= (slen v) _lbv0))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply goal  (, _lbv0 )
  ###################################################
  The Choice of Function goal Was Ill Fated Try Next Choice of function
 ############################################################
  Trying Pure Component cons
  *************** Trying Arrow Component ************cons :  Arrow ( ( x : {var_v3:Ty_int | true} ) ->  Arrow ( ( xs : {var_v4:Ty_alphalist | true} ) -> {v:Ty_alphalist | (slen)(v) ==((slen)(xs) + (1))}
  *************** Synthesizing Args ei : ti for ************cons
 ##################################################################################
  Synthesizing the 1th argument for Function cons
  Trying Arguments in Scalars 
 esynthesizeScalar for {var_v3:Ty_int | true}
  Enumeration for 
 spec 
 {var_v3:Ty_int | true}
 
 Enumerating a Scalar Term int_gen
 
 Type of the Scalar Term {var_v1:Ty_int | true}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 
 Enumerating a Scalar Term s
 
 Type of the Scalar Term {v:Ty_int | true}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 
 Enumerating a Scalar Term _lbv0
 
 Type of the Scalar Term {v:Ty_int | (v) ==((s) -- (1))}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 
 Enumerating a Scalar Term _lbv1
 
 Type of the Scalar Term {v:Ty_int | (v) ==((int_gen) -- (1))}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 Show :: Found a Few Macthing Scalars 
  Next Trying Arguments of the form f (ei...) 
  Pure Fun Application: esynthesizePureApp 
 Show Potential Functions
  , 
 subs
 ############################################################
  Trying Pure Component subs
  *************** Trying Arrow Component ************subs :  Arrow ( ( n1 : {var_v0:Ty_int | true} ) -> {v:Ty_int | (v) ==((n1) -- (1))}
  *************** Synthesizing Args ei : ti for ************subs
 ##################################################################################
  Synthesizing the 1th argument for Function subs
  Trying Arguments in Scalars 
 esynthesizeScalar for {var_v0:Ty_int | true}
  Enumeration for 
 spec 
 {var_v0:Ty_int | true}
 
 Enumerating a Scalar Term int_gen
 
 Type of the Scalar Term {var_v1:Ty_int | true}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 
 Enumerating a Scalar Term s
 
 Type of the Scalar Term {v:Ty_int | true}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 
 Enumerating a Scalar Term _lbv0
 
 Type of the Scalar Term {v:Ty_int | (v) ==((s) -- (1))}
 ################################################
 Skipping Variable _lbv0 As Outer Function Call is subs
 
 Enumerating a Scalar Term _lbv1
 
 Type of the Scalar Term {v:Ty_int | (v) ==((int_gen) -- (1))}
 ################################################
 Skipping Variable _lbv1 As Outer Function Call is subs
 Show :: Found a Few Macthing Scalars 
  Next Trying Arguments of the form f (ei...) 
  Pure Fun Application: esynthesizePureApp 
 ##################################################################################
  *************** Successfully Synthesized Args ei Forall i 
 # of Possible Argument Options for subs 2
 Possible Arg Options 
 EI s
 Possible Arg Options 
 EI int_gen
 Apply Single Argument Case : f (ei) Case subs
  Case : f (ei) Case subs s
 Finding Already seen tree for apply subs  (, s )
 Found _lbv0
  Case : f (ei) Case subs int_gen
 Finding Already seen tree for apply subs  (, int_gen )
 Found _lbv1
 ##################################################################################
  Synthesizing the 2th argument for Function cons
  Trying Arguments in Scalars 
 esynthesizeScalar for {var_v4:Ty_alphalist | true}
  Enumeration for 
 spec 
 {var_v4:Ty_alphalist | true}
 
 Enumerating a Scalar Term nil
 
 Type of the Scalar Term {v:Ty_alphalist | (slen)(v) ==(0)}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 Show :: Found a Few Macthing Scalars 
  Next Trying Arguments of the form f (ei...) 
  Pure Fun Application: esynthesizePureApp 
 Show Potential Functions
  , 
 goal, 
 cons
 ############################################################
  Trying Pure Component goal
  *************** Trying Arrow Component ************goal :  Arrow ( ( s1 : {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c } ) -> {v:Ty_alphalist | (slen)(v) ==(s1)}
  *************** Synthesizing Args ei : ti for ************goal
 ##################################################################################
  Synthesizing the 1th argument for Function goal
  Trying Arguments in Scalars 
 esynthesizeScalar for {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c }
  Enumeration for 
 spec 
 {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c }
 
 Enumerating a Scalar Term int_gen
 
 Type of the Scalar Term {var_v1:Ty_int | true}                                                                                                                                                     
 solver 
 (declare-sort T3130)
(declare-fun slen (T3130) Int)
(declare-fun nil () T3130)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= var_v6 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (not (> s int_gen)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
 
 Timeout the subtype check T_vi <: T_goal
 
 Enumerating a Scalar Term s
 
 Type of the Scalar Term {v:Ty_int | true}                                                                                                                                                     
 solver 
 (declare-sort T3171)
(declare-fun slen (T3171) Int)
(declare-fun nil () T3171)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= var_v6 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (not (> s s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
 
 Timeout the subtype check T_vi <: T_goal
 
 Enumerating a Scalar Term _lbv0
 
 Type of the Scalar Term {v:Ty_int | (v) ==((s) -- (1))}                                                                                                                                                     
 solver 
 (declare-sort T3212)
(declare-fun slen (T3212) Int)
(declare-fun nil () T3212)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun s () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(assert (= (slen nil) 0))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= _lbv0 (- s 1)))
(assert (= var_v6 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= _lbv0 (- s 1)))
(assert (not (> s _lbv0)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
 
 Timedout the subtype check T_vi <: T_goal
 
 Enumerating a Scalar Term _lbv1
 
 Type of the Scalar Term {v:Ty_int | (v) ==((int_gen) -- (1))}                                                                                                                                                     
 solver 
 (declare-sort T3253)
(declare-fun slen (T3253) Int)
(declare-fun nil () T3253)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun int_gen () Int)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= _lbv1 (- int_gen 1)))
(assert (= var_v6 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= _lbv1 (- int_gen 1)))
(assert (not (> s _lbv1)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
 
 Timedout the subtype check T_vi <: T_goal
 >>>>>>>>>>>>>>>>>> No Scalar found in Environment, Trying esynthesizePureApp <<<<<<<<<<<<<<<<<< 
  Pure Fun Application: esynthesizePureApp 
 >>>>>>>>>>>>>>>>>>  No pureApp found, Call esynthesizeConsApp <<<<<<<<<<<<<< 
  Next Trying Arguments of the form f (ei...) 
  Pure Fun Application: esynthesizePureApp 
 ##################################################################################
  *************** Synthesizing Args ei : Failed for some  arg
 ############################################################
  Trying Pure Component cons
  *************** Trying Arrow Component ************cons :  Arrow ( ( x : {var_v3:Ty_int | true} ) ->  Arrow ( ( xs : {var_v4:Ty_alphalist | true} ) -> {v:Ty_alphalist | (slen)(v) ==((slen)(xs) + (1))}
  *************** Synthesizing Args ei : ti for ************cons
 ##################################################################################
  Synthesizing the 1th argument for Function cons
  Trying Arguments in Scalars 
 esynthesizeScalar for {var_v3:Ty_int | true}
  Enumeration for 
 spec 
 {var_v3:Ty_int | true}
 
 Enumerating a Scalar Term int_gen
 
 Type of the Scalar Term {var_v1:Ty_int | true}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 
 Enumerating a Scalar Term s
 
 Type of the Scalar Term {v:Ty_int | true}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 
 Enumerating a Scalar Term _lbv0
 
 Type of the Scalar Term {v:Ty_int | (v) ==((s) -- (1))}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 
 Enumerating a Scalar Term _lbv1
 
 Type of the Scalar Term {v:Ty_int | (v) ==((int_gen) -- (1))}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 Show :: Found a Few Macthing Scalars 
  Next Trying Arguments of the form f (ei...) 
  Pure Fun Application: esynthesizePureApp 
 ##################################################################################
  Synthesizing the 2th argument for Function cons
  Trying Arguments in Scalars 
 esynthesizeScalar for {var_v4:Ty_alphalist | true}
  Enumeration for 
 spec 
 {var_v4:Ty_alphalist | true}
 
 Enumerating a Scalar Term nil
 
 Type of the Scalar Term {v:Ty_alphalist | (slen)(v) ==(0)}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 Show :: Found a Few Macthing Scalars 
  Next Trying Arguments of the form f (ei...) 
  Pure Fun Application: esynthesizePureApp 
 ##################################################################################
  *************** Successfully Synthesized Args ei Forall i 
 # of Possible Argument Options for cons 4
 Possible Arg Options 
 EI _lbv1
 EI nil
 Possible Arg Options 
 EI _lbv0
 EI nil
 Possible Arg Options 
 EI s
 EI nil
 Possible Arg Options 
 EI int_gen
 EI nil
 Show f (ei, e2, ....en) Case
 Finding Already seen tree for apply cons  (, _lbv1 ), nil )
 Found _lbv6
 Finding Already seen tree for apply cons  (, _lbv0 ), nil )
 Found _lbv7
 Finding Already seen tree for apply cons  (, s ), nil )
 Found _lbv8
 Finding Already seen tree for apply cons  (, int_gen ), nil )
 Found _lbv9
 ##################################################################################
  *************** Successfully Synthesized Args ei Forall i 
 # of Possible Argument Options for cons 30
 Possible Arg Options 
 EI _lbv1
 EI nil
 Possible Arg Options 
 EI _lbv1
 EI _lbv9
 Possible Arg Options 
 EI _lbv1
 EI _lbv8
 Possible Arg Options 
 EI _lbv1
 EI _lbv7
 Possible Arg Options 
 EI _lbv1
 EI _lbv6
 Possible Arg Options 
 EI _lbv0
 EI nil
 Possible Arg Options 
 EI _lbv0
 EI _lbv9
 Possible Arg Options 
 EI _lbv0
 EI _lbv8
 Possible Arg Options 
 EI _lbv0
 EI _lbv7
 Possible Arg Options 
 EI _lbv0
 EI _lbv6
 Possible Arg Options 
 EI s
 EI nil
 Possible Arg Options 
 EI s
 EI _lbv9
 Possible Arg Options 
 EI s
 EI _lbv8
 Possible Arg Options 
 EI s
 EI _lbv7
 Possible Arg Options 
 EI s
 EI _lbv6
 Possible Arg Options 
 EI int_gen
 EI nil
 Possible Arg Options 
 EI int_gen
 EI _lbv9
 Possible Arg Options 
 EI int_gen
 EI _lbv8
 Possible Arg Options 
 EI int_gen
 EI _lbv7
 Possible Arg Options 
 EI int_gen
 EI _lbv6
 Possible Arg Options 
 EI _lbv1
 EI nil
 Possible Arg Options 
 EI _lbv1
 EI _lbv9
 Possible Arg Options 
 EI _lbv1
 EI _lbv8
 Possible Arg Options 
 EI _lbv1
 EI _lbv7
 Possible Arg Options 
 EI _lbv1
 EI _lbv6
 Possible Arg Options 
 EI _lbv0
 EI nil
 Possible Arg Options 
 EI _lbv0
 EI _lbv9
 Possible Arg Options 
 EI _lbv0
 EI _lbv8
 Possible Arg Options 
 EI _lbv0
 EI _lbv7
 Possible Arg Options 
 EI _lbv0
 EI _lbv6
 Show f (ei, e2, ....en) Case
 Finding Already seen tree for apply cons  (, _lbv1 ), nil )
 Found _lbv6
 Finding Already seen tree for apply cons  (, _lbv1 ), _lbv9 )
 Typechecking apply cons  (, apply subs  (, int_gen ) ), apply cons  (, int_gen ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv1 ), _lbv9 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv1 :: {v:Ty_int | (v) ==((int_gen) -- (1))} | (_lbv1) ==((int_gen) -- (1))
 Argument _lbv9 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                
 solver 
 (declare-sort T3484)
(declare-fun slen (T3484) Int)
(declare-fun nil () T3484)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun _lbv9 () T3484)
(declare-fun v () T3484)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= (slen v) (+ (slen _lbv9) 1)))
(assert (= var_v6 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= _lbv1 (- int_gen 1)))
(assert (= (slen v) (+ (slen _lbv9) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv1 ), _lbv9 )
 Finding Already seen tree for apply cons  (, _lbv1 ), _lbv8 )
 Typechecking apply cons  (, apply subs  (, int_gen ) ), apply cons  (, s ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv1 ), _lbv8 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv1 :: {v:Ty_int | (v) ==((int_gen) -- (1))} | (_lbv1) ==((int_gen) -- (1))
 Argument _lbv8 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                
 solver 
 (declare-sort T3525)
(declare-fun slen (T3525) Int)
(declare-fun nil () T3525)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun _lbv8 () T3525)
(declare-fun v () T3525)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= (slen v) (+ (slen _lbv8) 1)))
(assert (= var_v6 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= _lbv1 (- int_gen 1)))
(assert (= (slen v) (+ (slen _lbv8) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv1 ), _lbv8 )
 Finding Already seen tree for apply cons  (, _lbv1 ), _lbv7 )
 Typechecking apply cons  (, apply subs  (, int_gen ) ), apply cons  (, apply subs  (, s ) ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv1 ), _lbv7 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv1 :: {v:Ty_int | (v) ==((int_gen) -- (1))} | (_lbv1) ==((int_gen) -- (1))
 Argument _lbv7 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                
 solver 
 (declare-sort T3566)
(declare-fun slen (T3566) Int)
(declare-fun nil () T3566)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun _lbv7 () T3566)
(declare-fun v () T3566)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= (slen v) (+ (slen _lbv7) 1)))
(assert (= var_v6 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= _lbv1 (- int_gen 1)))
(assert (= (slen v) (+ (slen _lbv7) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv1 ), _lbv7 )
 Finding Already seen tree for apply cons  (, _lbv1 ), _lbv6 )
 Typechecking apply cons  (, apply subs  (, int_gen ) ), apply cons  (, apply subs  (, int_gen ) ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv1 ), _lbv6 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv1 :: {v:Ty_int | (v) ==((int_gen) -- (1))} | (_lbv1) ==((int_gen) -- (1))
 Argument _lbv6 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                
 solver 
 (declare-sort T3607)
(declare-fun slen (T3607) Int)
(declare-fun nil () T3607)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun _lbv6 () T3607)
(declare-fun v () T3607)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= (slen v) (+ (slen _lbv6) 1)))
(assert (= var_v6 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= _lbv1 (- int_gen 1)))
(assert (= (slen v) (+ (slen _lbv6) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv1 ), _lbv6 )
 Finding Already seen tree for apply cons  (, _lbv0 ), nil )
 Found _lbv7
 Finding Already seen tree for apply cons  (, _lbv0 ), _lbv9 )
 Typechecking apply cons  (, apply subs  (, s ) ), apply cons  (, int_gen ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv0 ), _lbv9 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv0 :: {v:Ty_int | (v) ==((s) -- (1))} | (_lbv0) ==((s) -- (1))
 Argument _lbv9 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                
 solver 
 (declare-sort T3648)
(declare-fun slen (T3648) Int)
(declare-fun nil () T3648)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun _lbv9 () T3648)
(declare-fun v () T3648)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= (slen v) (+ (slen _lbv9) 1)))
(assert (= var_v6 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= _lbv0 (- s 1)))
(assert (= (slen v) (+ (slen _lbv9) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv0 ), _lbv9 )
 Finding Already seen tree for apply cons  (, _lbv0 ), _lbv8 )
 Typechecking apply cons  (, apply subs  (, s ) ), apply cons  (, s ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv0 ), _lbv8 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv0 :: {v:Ty_int | (v) ==((s) -- (1))} | (_lbv0) ==((s) -- (1))
 Argument _lbv8 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                
 solver 
 (declare-sort T3689)
(declare-fun slen (T3689) Int)
(declare-fun nil () T3689)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun _lbv8 () T3689)
(declare-fun v () T3689)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= (slen v) (+ (slen _lbv8) 1)))
(assert (= var_v6 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= _lbv0 (- s 1)))
(assert (= (slen v) (+ (slen _lbv8) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv0 ), _lbv8 )
 Finding Already seen tree for apply cons  (, _lbv0 ), _lbv7 )
 Typechecking apply cons  (, apply subs  (, s ) ), apply cons  (, apply subs  (, s ) ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv0 ), _lbv7 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv0 :: {v:Ty_int | (v) ==((s) -- (1))} | (_lbv0) ==((s) -- (1))
 Argument _lbv7 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                
 solver 
 (declare-sort T3730)
(declare-fun slen (T3730) Int)
(declare-fun nil () T3730)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun _lbv7 () T3730)
(declare-fun v () T3730)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= (slen v) (+ (slen _lbv7) 1)))
(assert (= var_v6 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= _lbv0 (- s 1)))
(assert (= (slen v) (+ (slen _lbv7) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv0 ), _lbv7 )
 Finding Already seen tree for apply cons  (, _lbv0 ), _lbv6 )
 Typechecking apply cons  (, apply subs  (, s ) ), apply cons  (, apply subs  (, int_gen ) ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv0 ), _lbv6 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv0 :: {v:Ty_int | (v) ==((s) -- (1))} | (_lbv0) ==((s) -- (1))
 Argument _lbv6 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                
 solver 
 (declare-sort T3771)
(declare-fun slen (T3771) Int)
(declare-fun nil () T3771)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun _lbv6 () T3771)
(declare-fun v () T3771)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= (slen v) (+ (slen _lbv6) 1)))
(assert (= var_v6 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= _lbv0 (- s 1)))
(assert (= (slen v) (+ (slen _lbv6) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv0 ), _lbv6 )
 Finding Already seen tree for apply cons  (, s ), nil )
 Found _lbv8
 Finding Already seen tree for apply cons  (, s ), _lbv9 )
 Typechecking apply cons  (, s ), apply cons  (, int_gen ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, s ), _lbv9 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument s :: {v:Ty_int | true} | true
 Argument _lbv9 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                
 solver 
 (declare-sort T3812)
(declare-fun slen (T3812) Int)
(declare-fun nil () T3812)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun _lbv9 () T3812)
(declare-fun v () T3812)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= (slen v) (+ (slen _lbv9) 1)))
(assert (= var_v6 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= (slen v) (+ (slen _lbv9) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, s ), _lbv9 )
 Finding Already seen tree for apply cons  (, s ), _lbv8 )
 Typechecking apply cons  (, s ), apply cons  (, s ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, s ), _lbv8 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument s :: {v:Ty_int | true} | true
 Argument _lbv8 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                
 solver 
 (declare-sort T3853)
(declare-fun slen (T3853) Int)
(declare-fun nil () T3853)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun _lbv8 () T3853)
(declare-fun v () T3853)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= (slen v) (+ (slen _lbv8) 1)))
(assert (= var_v6 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= (slen v) (+ (slen _lbv8) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, s ), _lbv8 )
 Finding Already seen tree for apply cons  (, s ), _lbv7 )
 Typechecking apply cons  (, s ), apply cons  (, apply subs  (, s ) ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, s ), _lbv7 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument s :: {v:Ty_int | true} | true
 Argument _lbv7 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                
 solver 
 (declare-sort T3894)
(declare-fun slen (T3894) Int)
(declare-fun nil () T3894)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun _lbv7 () T3894)
(declare-fun v () T3894)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= (slen v) (+ (slen _lbv7) 1)))
(assert (= var_v6 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= (slen v) (+ (slen _lbv7) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, s ), _lbv7 )
 Finding Already seen tree for apply cons  (, s ), _lbv6 )
 Typechecking apply cons  (, s ), apply cons  (, apply subs  (, int_gen ) ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, s ), _lbv6 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument s :: {v:Ty_int | true} | true
 Argument _lbv6 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                
 solver 
 (declare-sort T3935)
(declare-fun slen (T3935) Int)
(declare-fun nil () T3935)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun _lbv6 () T3935)
(declare-fun v () T3935)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= (slen v) (+ (slen _lbv6) 1)))
(assert (= var_v6 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= (slen v) (+ (slen _lbv6) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, s ), _lbv6 )
 Finding Already seen tree for apply cons  (, int_gen ), nil )
 Found _lbv9
 Finding Already seen tree for apply cons  (, int_gen ), _lbv9 )
 Typechecking apply cons  (, int_gen ), apply cons  (, int_gen ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, int_gen ), _lbv9 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument int_gen :: {var_v1:Ty_int | true} | true
 Argument _lbv9 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                
 solver 
 (declare-sort T3976)
(declare-fun slen (T3976) Int)
(declare-fun nil () T3976)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun _lbv9 () T3976)
(declare-fun v () T3976)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= (slen v) (+ (slen _lbv9) 1)))
(assert (= var_v6 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= (slen v) (+ (slen _lbv9) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, int_gen ), _lbv9 )
 Finding Already seen tree for apply cons  (, int_gen ), _lbv8 )
 Typechecking apply cons  (, int_gen ), apply cons  (, s ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, int_gen ), _lbv8 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument int_gen :: {var_v1:Ty_int | true} | true
 Argument _lbv8 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                
 solver 
 (declare-sort T4017)
(declare-fun slen (T4017) Int)
(declare-fun nil () T4017)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun _lbv8 () T4017)
(declare-fun v () T4017)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= (slen v) (+ (slen _lbv8) 1)))
(assert (= var_v6 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= (slen v) (+ (slen _lbv8) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, int_gen ), _lbv8 )
 Finding Already seen tree for apply cons  (, int_gen ), _lbv7 )
 Typechecking apply cons  (, int_gen ), apply cons  (, apply subs  (, s ) ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, int_gen ), _lbv7 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument int_gen :: {var_v1:Ty_int | true} | true
 Argument _lbv7 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                
 solver 
 (declare-sort T4058)
(declare-fun slen (T4058) Int)
(declare-fun nil () T4058)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun _lbv7 () T4058)
(declare-fun v () T4058)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= (slen v) (+ (slen _lbv7) 1)))
(assert (= var_v6 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= (slen v) (+ (slen _lbv7) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, int_gen ), _lbv7 )
 Finding Already seen tree for apply cons  (, int_gen ), _lbv6 )
 Typechecking apply cons  (, int_gen ), apply cons  (, apply subs  (, int_gen ) ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, int_gen ), _lbv6 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument int_gen :: {var_v1:Ty_int | true} | true
 Argument _lbv6 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                
 solver 
 (declare-sort T4099)
(declare-fun slen (T4099) Int)
(declare-fun nil () T4099)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun _lbv6 () T4099)
(declare-fun v () T4099)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= (slen v) (+ (slen _lbv6) 1)))
(assert (= var_v6 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= (slen v) (+ (slen _lbv6) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, int_gen ), _lbv6 )
 Finding Already seen tree for apply cons  (, _lbv1 ), nil )
 Found _lbv6
 Finding Already seen tree for apply cons  (, _lbv1 ), _lbv9 )
 Typechecking apply cons  (, apply subs  (, int_gen ) ), apply cons  (, int_gen ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv1 ), _lbv9 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv1 :: {v:Ty_int | (v) ==((int_gen) -- (1))} | (_lbv1) ==((int_gen) -- (1))
 Argument _lbv9 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                
 solver 
 (declare-sort T4140)
(declare-fun slen (T4140) Int)
(declare-fun nil () T4140)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun _lbv9 () T4140)
(declare-fun v () T4140)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= (slen v) (+ (slen _lbv9) 1)))
(assert (= var_v6 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= _lbv1 (- int_gen 1)))
(assert (= (slen v) (+ (slen _lbv9) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv1 ), _lbv9 )
 Finding Already seen tree for apply cons  (, _lbv1 ), _lbv8 )
 Typechecking apply cons  (, apply subs  (, int_gen ) ), apply cons  (, s ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv1 ), _lbv8 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv1 :: {v:Ty_int | (v) ==((int_gen) -- (1))} | (_lbv1) ==((int_gen) -- (1))
 Argument _lbv8 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                
 solver 
 (declare-sort T4181)
(declare-fun slen (T4181) Int)
(declare-fun nil () T4181)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun _lbv8 () T4181)
(declare-fun v () T4181)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= (slen v) (+ (slen _lbv8) 1)))
(assert (= var_v6 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= _lbv1 (- int_gen 1)))
(assert (= (slen v) (+ (slen _lbv8) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv1 ), _lbv8 )
 Finding Already seen tree for apply cons  (, _lbv1 ), _lbv7 )
 Typechecking apply cons  (, apply subs  (, int_gen ) ), apply cons  (, apply subs  (, s ) ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv1 ), _lbv7 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv1 :: {v:Ty_int | (v) ==((int_gen) -- (1))} | (_lbv1) ==((int_gen) -- (1))
 Argument _lbv7 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                
 solver 
 (declare-sort T4222)
(declare-fun slen (T4222) Int)
(declare-fun nil () T4222)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun _lbv7 () T4222)
(declare-fun v () T4222)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= (slen v) (+ (slen _lbv7) 1)))
(assert (= var_v6 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= _lbv1 (- int_gen 1)))
(assert (= (slen v) (+ (slen _lbv7) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv1 ), _lbv7 )
 Finding Already seen tree for apply cons  (, _lbv1 ), _lbv6 )
 Typechecking apply cons  (, apply subs  (, int_gen ) ), apply cons  (, apply subs  (, int_gen ) ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv1 ), _lbv6 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv1 :: {v:Ty_int | (v) ==((int_gen) -- (1))} | (_lbv1) ==((int_gen) -- (1))
 Argument _lbv6 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                
 solver 
 (declare-sort T4263)
(declare-fun slen (T4263) Int)
(declare-fun nil () T4263)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun _lbv6 () T4263)
(declare-fun v () T4263)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= (slen v) (+ (slen _lbv6) 1)))
(assert (= var_v6 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= _lbv1 (- int_gen 1)))
(assert (= (slen v) (+ (slen _lbv6) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv1 ), _lbv6 )
 Finding Already seen tree for apply cons  (, _lbv0 ), nil )
 Found _lbv7
 Finding Already seen tree for apply cons  (, _lbv0 ), _lbv9 )
 Typechecking apply cons  (, apply subs  (, s ) ), apply cons  (, int_gen ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv0 ), _lbv9 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv0 :: {v:Ty_int | (v) ==((s) -- (1))} | (_lbv0) ==((s) -- (1))
 Argument _lbv9 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                
 solver 
 (declare-sort T4304)
(declare-fun slen (T4304) Int)
(declare-fun nil () T4304)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun _lbv9 () T4304)
(declare-fun v () T4304)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= (slen v) (+ (slen _lbv9) 1)))
(assert (= var_v6 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= _lbv0 (- s 1)))
(assert (= (slen v) (+ (slen _lbv9) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv0 ), _lbv9 )
 Finding Already seen tree for apply cons  (, _lbv0 ), _lbv8 )
 Typechecking apply cons  (, apply subs  (, s ) ), apply cons  (, s ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv0 ), _lbv8 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv0 :: {v:Ty_int | (v) ==((s) -- (1))} | (_lbv0) ==((s) -- (1))
 Argument _lbv8 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                
 solver 
 (declare-sort T4345)
(declare-fun slen (T4345) Int)
(declare-fun nil () T4345)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun _lbv8 () T4345)
(declare-fun v () T4345)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= (slen v) (+ (slen _lbv8) 1)))
(assert (= var_v6 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= _lbv0 (- s 1)))
(assert (= (slen v) (+ (slen _lbv8) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv0 ), _lbv8 )
 Finding Already seen tree for apply cons  (, _lbv0 ), _lbv7 )
 Typechecking apply cons  (, apply subs  (, s ) ), apply cons  (, apply subs  (, s ) ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv0 ), _lbv7 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv0 :: {v:Ty_int | (v) ==((s) -- (1))} | (_lbv0) ==((s) -- (1))
 Argument _lbv7 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                
 solver 
 (declare-sort T4386)
(declare-fun slen (T4386) Int)
(declare-fun nil () T4386)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun _lbv7 () T4386)
(declare-fun v () T4386)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= (slen v) (+ (slen _lbv7) 1)))
(assert (= var_v6 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= _lbv0 (- s 1)))
(assert (= (slen v) (+ (slen _lbv7) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv0 ), _lbv7 )
 Finding Already seen tree for apply cons  (, _lbv0 ), _lbv6 )
 Typechecking apply cons  (, apply subs  (, s ) ), apply cons  (, apply subs  (, int_gen ) ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv0 ), _lbv6 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv0 :: {v:Ty_int | (v) ==((s) -- (1))} | (_lbv0) ==((s) -- (1))
 Argument _lbv6 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                
 solver 
 (declare-sort T4427)
(declare-fun slen (T4427) Int)
(declare-fun nil () T4427)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun _lbv6 () T4427)
(declare-fun v () T4427)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= (slen v) (+ (slen _lbv6) 1)))
(assert (= var_v6 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= _lbv0 (- s 1)))
(assert (= (slen v) (+ (slen _lbv6) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv0 ), _lbv6 )
 Show :: Successfully Synthesisized False Branch 
 Show :: iSynthesize Boolean Successful _lbv4
 Show :: iSynthesize Boolean Successful {v:Ty_bool | DoubleImpl 
 v = true
  
 	 Conj <c _lbv1 = 0
 	 , DoubleImpl 
 v = false
  _lbv1 > 0 >c }
  *********************Synthesizing the True branch*******************
 Show :: True Predicate 
 	 Conj <c var_v7 = true
 	 , DoubleImpl 
 var_v7 = true
  
 	 Conj <c _lbv1 = 0
 	 , DoubleImpl 
 var_v7 = false
  _lbv1 > 0 >c  >c 
 Show ***********Calling Scalar synthesize***************
 esynthesizeScalar for {v:Ty_alphalist | (slen)(v) ==(s)}
  Enumeration for 
 spec 
 {v:Ty_alphalist | (slen)(v) ==(s)}
 
 Enumerating a Scalar Term nil
 
 Type of the Scalar Term {v:Ty_alphalist | (slen)(v) ==(0)}                                                                                                                                                                       
 solver 
 (declare-sort T4469)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun slen (T4469) Int)
(declare-fun nil () T4469)
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= (slen nil) 0))
(assert (= var_v7 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= (slen nil) 0))
(assert (not (= (slen nil) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
 
 Timeout the subtype check T_vi <: T_goal
 >>>>>>>>>>>>>>>>>> No Scalar found in Environment, Trying esynthesizePureApp <<<<<<<<<<<<<<<<<< 
  Pure Fun Application: esynthesizePureApp 
 Show Potential Functions
  , 
 goal, 
 cons
 ############################################################
  Trying Pure Component goal
  *************** Trying Arrow Component ************goal :  Arrow ( ( s1 : {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c } ) -> {v:Ty_alphalist | (slen)(v) ==(s1)}
  *************** Synthesizing Args ei : ti for ************goal
 ##################################################################################
  Synthesizing the 1th argument for Function goal
  Trying Arguments in Scalars 
 esynthesizeScalar for {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c }
  Enumeration for 
 spec 
 {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c }
 
 Enumerating a Scalar Term int_gen
 
 Type of the Scalar Term {var_v1:Ty_int | true}                                                                                                                                                                            
 solver 
 (declare-sort T4509)
(declare-fun slen (T4509) Int)
(declare-fun nil () T4509)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= var_v7 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (not (> s int_gen)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
 
 Timeout the subtype check T_vi <: T_goal
 
 Enumerating a Scalar Term s
 
 Type of the Scalar Term {v:Ty_int | true}                                                                                                                                                                            
 solver 
 (declare-sort T4550)
(declare-fun slen (T4550) Int)
(declare-fun nil () T4550)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= var_v7 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (not (> s s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
 
 Timeout the subtype check T_vi <: T_goal
 
 Enumerating a Scalar Term _lbv0
 
 Type of the Scalar Term {v:Ty_int | (v) ==((s) -- (1))}                                                                                                                                                                            
 solver 
 (declare-sort T4591)
(declare-fun slen (T4591) Int)
(declare-fun nil () T4591)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun s () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(assert (= (slen nil) 0))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= _lbv0 (- s 1)))
(assert (= var_v7 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= _lbv0 (- s 1)))
(assert (not (> s _lbv0)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
 
 Timedout the subtype check T_vi <: T_goal
 
 Enumerating a Scalar Term _lbv1
 
 Type of the Scalar Term {v:Ty_int | (v) ==((int_gen) -- (1))}                                                                                                                                                                            
 solver 
 (declare-sort T4632)
(declare-fun slen (T4632) Int)
(declare-fun nil () T4632)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun int_gen () Int)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= _lbv1 (- int_gen 1)))
(assert (= var_v7 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= _lbv1 (- int_gen 1)))
(assert (not (> s _lbv1)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
 
 Timedout the subtype check T_vi <: T_goal
 >>>>>>>>>>>>>>>>>> No Scalar found in Environment, Trying esynthesizePureApp <<<<<<<<<<<<<<<<<< 
  Pure Fun Application: esynthesizePureApp 
 Show Potential Functions
  , 
 subs
 ############################################################
  Trying Pure Component subs
  *************** Trying Arrow Component ************subs :  Arrow ( ( n1 : {var_v0:Ty_int | true} ) -> {v:Ty_int | (v) ==((n1) -- (1))}
  *************** Synthesizing Args ei : ti for ************subs
 ##################################################################################
  Synthesizing the 1th argument for Function subs
  Trying Arguments in Scalars 
 esynthesizeScalar for {var_v0:Ty_int | true}
  Enumeration for 
 spec 
 {var_v0:Ty_int | true}
 
 Enumerating a Scalar Term int_gen
 
 Type of the Scalar Term {var_v1:Ty_int | true}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 
 Enumerating a Scalar Term s
 
 Type of the Scalar Term {v:Ty_int | true}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 
 Enumerating a Scalar Term _lbv0
 
 Type of the Scalar Term {v:Ty_int | (v) ==((s) -- (1))}
 ################################################
 Skipping Variable _lbv0 As Outer Function Call is subs
 
 Enumerating a Scalar Term _lbv1
 
 Type of the Scalar Term {v:Ty_int | (v) ==((int_gen) -- (1))}
 ################################################
 Skipping Variable _lbv1 As Outer Function Call is subs
 Show :: Found a Few Macthing Scalars 
  Next Trying Arguments of the form f (ei...) 
  Pure Fun Application: esynthesizePureApp 
 ##################################################################################
  *************** Successfully Synthesized Args ei Forall i 
 # of Possible Argument Options for subs 2
 Possible Arg Options 
 EI s
 Possible Arg Options 
 EI int_gen
 Apply Single Argument Case : f (ei) Case subs
  Case : f (ei) Case subs s
 Finding Already seen tree for apply subs  (, s )
 Found _lbv0
  Case : f (ei) Case subs int_gen
 Finding Already seen tree for apply subs  (, int_gen )
 Found _lbv1
  Next Trying Arguments of the form f (ei...) 
  Pure Fun Application: esynthesizePureApp 
 Show Potential Functions
  , 
 subs
 ############################################################
  Trying Pure Component subs
 ##################################################################################
  *************** Successfully Synthesized Args ei Forall i 
 # of Possible Argument Options for goal 2
 Possible Arg Options 
 EI _lbv1
 Possible Arg Options 
 EI _lbv0
 Apply Single Argument Case : f (ei) Case goal
  Case : f (ei) Case goal _lbv1
 Finding Already seen tree for apply goal  (, _lbv1 )
 Typechecking the Term apply goal  (, _lbv1 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv1 :: {v:Ty_int | (v) ==((int_gen) -- (1))} | (_lbv1) ==((int_gen) -- (1))                                                                                                                                                                       
 solver 
 (declare-sort T4749)
(declare-fun slen (T4749) Int)
(declare-fun nil () T4749)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun v () T4749)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= (slen v) _lbv1))
(assert (= var_v7 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= _lbv1 (- int_gen 1)))
(assert (= (slen v) _lbv1))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply goal  (, _lbv1 )
  Case : f (ei) Case goal _lbv0
 Finding Already seen tree for apply goal  (, _lbv0 )
 Typechecking the Term apply goal  (, _lbv0 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv0 :: {v:Ty_int | (v) ==((s) -- (1))} | (_lbv0) ==((s) -- (1))                                                                                                                                                                       
 solver 
 (declare-sort T4790)
(declare-fun slen (T4790) Int)
(declare-fun nil () T4790)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun v () T4790)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= (slen v) _lbv0))
(assert (= var_v7 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= _lbv0 (- s 1)))
(assert (= (slen v) _lbv0))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply goal  (, _lbv0 )
  ###################################################
  The Choice of Function goal Was Ill Fated Try Next Choice of function
 ############################################################
  Trying Pure Component cons
  *************** Trying Arrow Component ************cons :  Arrow ( ( x : {var_v3:Ty_int | true} ) ->  Arrow ( ( xs : {var_v4:Ty_alphalist | true} ) -> {v:Ty_alphalist | (slen)(v) ==((slen)(xs) + (1))}
  *************** Synthesizing Args ei : ti for ************cons
 ##################################################################################
  Synthesizing the 1th argument for Function cons
  Trying Arguments in Scalars 
 esynthesizeScalar for {var_v3:Ty_int | true}
  Enumeration for 
 spec 
 {var_v3:Ty_int | true}
 
 Enumerating a Scalar Term int_gen
 
 Type of the Scalar Term {var_v1:Ty_int | true}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 
 Enumerating a Scalar Term s
 
 Type of the Scalar Term {v:Ty_int | true}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 
 Enumerating a Scalar Term _lbv0
 
 Type of the Scalar Term {v:Ty_int | (v) ==((s) -- (1))}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 
 Enumerating a Scalar Term _lbv1
 
 Type of the Scalar Term {v:Ty_int | (v) ==((int_gen) -- (1))}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 Show :: Found a Few Macthing Scalars 
  Next Trying Arguments of the form f (ei...) 
  Pure Fun Application: esynthesizePureApp 
 Show Potential Functions
  , 
 subs
 ############################################################
  Trying Pure Component subs
  *************** Trying Arrow Component ************subs :  Arrow ( ( n1 : {var_v0:Ty_int | true} ) -> {v:Ty_int | (v) ==((n1) -- (1))}
  *************** Synthesizing Args ei : ti for ************subs
 ##################################################################################
  Synthesizing the 1th argument for Function subs
  Trying Arguments in Scalars 
 esynthesizeScalar for {var_v0:Ty_int | true}
  Enumeration for 
 spec 
 {var_v0:Ty_int | true}
 
 Enumerating a Scalar Term int_gen
 
 Type of the Scalar Term {var_v1:Ty_int | true}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 
 Enumerating a Scalar Term s
 
 Type of the Scalar Term {v:Ty_int | true}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 
 Enumerating a Scalar Term _lbv0
 
 Type of the Scalar Term {v:Ty_int | (v) ==((s) -- (1))}
 ################################################
 Skipping Variable _lbv0 As Outer Function Call is subs
 
 Enumerating a Scalar Term _lbv1
 
 Type of the Scalar Term {v:Ty_int | (v) ==((int_gen) -- (1))}
 ################################################
 Skipping Variable _lbv1 As Outer Function Call is subs
 Show :: Found a Few Macthing Scalars 
  Next Trying Arguments of the form f (ei...) 
  Pure Fun Application: esynthesizePureApp 
 ##################################################################################
  *************** Successfully Synthesized Args ei Forall i 
 # of Possible Argument Options for subs 2
 Possible Arg Options 
 EI s
 Possible Arg Options 
 EI int_gen
 Apply Single Argument Case : f (ei) Case subs
  Case : f (ei) Case subs s
 Finding Already seen tree for apply subs  (, s )
 Found _lbv0
  Case : f (ei) Case subs int_gen
 Finding Already seen tree for apply subs  (, int_gen )
 Found _lbv1
 ##################################################################################
  Synthesizing the 2th argument for Function cons
  Trying Arguments in Scalars 
 esynthesizeScalar for {var_v4:Ty_alphalist | true}
  Enumeration for 
 spec 
 {var_v4:Ty_alphalist | true}
 
 Enumerating a Scalar Term nil
 
 Type of the Scalar Term {v:Ty_alphalist | (slen)(v) ==(0)}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 Show :: Found a Few Macthing Scalars 
  Next Trying Arguments of the form f (ei...) 
  Pure Fun Application: esynthesizePureApp 
 Show Potential Functions
  , 
 goal, 
 cons
 ############################################################
  Trying Pure Component goal
  *************** Trying Arrow Component ************goal :  Arrow ( ( s1 : {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c } ) -> {v:Ty_alphalist | (slen)(v) ==(s1)}
  *************** Synthesizing Args ei : ti for ************goal
 ##################################################################################
  Synthesizing the 1th argument for Function goal
  Trying Arguments in Scalars 
 esynthesizeScalar for {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c }
  Enumeration for 
 spec 
 {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c }
 
 Enumerating a Scalar Term int_gen
 
 Type of the Scalar Term {var_v1:Ty_int | true}                                                                                                                                                                            
 solver 
 (declare-sort T5097)
(declare-fun slen (T5097) Int)
(declare-fun nil () T5097)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= var_v7 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (not (> s int_gen)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
 
 Timeout the subtype check T_vi <: T_goal
 
 Enumerating a Scalar Term s
 
 Type of the Scalar Term {v:Ty_int | true}                                                                                                                                                                            
 solver 
 (declare-sort T5138)
(declare-fun slen (T5138) Int)
(declare-fun nil () T5138)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= var_v7 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (not (> s s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
 
 Timeout the subtype check T_vi <: T_goal
 
 Enumerating a Scalar Term _lbv0
 
 Type of the Scalar Term {v:Ty_int | (v) ==((s) -- (1))}                                                                                                                                                                            
 solver 
 (declare-sort T5179)
(declare-fun slen (T5179) Int)
(declare-fun nil () T5179)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun s () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(assert (= (slen nil) 0))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= _lbv0 (- s 1)))
(assert (= var_v7 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= _lbv0 (- s 1)))
(assert (not (> s _lbv0)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
 
 Timedout the subtype check T_vi <: T_goal
 
 Enumerating a Scalar Term _lbv1
 
 Type of the Scalar Term {v:Ty_int | (v) ==((int_gen) -- (1))}                                                                                                                                                                            
 solver 
 (declare-sort T5220)
(declare-fun slen (T5220) Int)
(declare-fun nil () T5220)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun int_gen () Int)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= _lbv1 (- int_gen 1)))
(assert (= var_v7 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= _lbv1 (- int_gen 1)))
(assert (not (> s _lbv1)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
 
 Timedout the subtype check T_vi <: T_goal
 >>>>>>>>>>>>>>>>>> No Scalar found in Environment, Trying esynthesizePureApp <<<<<<<<<<<<<<<<<< 
  Pure Fun Application: esynthesizePureApp 
 >>>>>>>>>>>>>>>>>>  No pureApp found, Call esynthesizeConsApp <<<<<<<<<<<<<< 
  Next Trying Arguments of the form f (ei...) 
  Pure Fun Application: esynthesizePureApp 
 ##################################################################################
  *************** Synthesizing Args ei : Failed for some  arg
 ############################################################
  Trying Pure Component cons
  *************** Trying Arrow Component ************cons :  Arrow ( ( x : {var_v3:Ty_int | true} ) ->  Arrow ( ( xs : {var_v4:Ty_alphalist | true} ) -> {v:Ty_alphalist | (slen)(v) ==((slen)(xs) + (1))}
  *************** Synthesizing Args ei : ti for ************cons
 ##################################################################################
  Synthesizing the 1th argument for Function cons
  Trying Arguments in Scalars 
 esynthesizeScalar for {var_v3:Ty_int | true}
  Enumeration for 
 spec 
 {var_v3:Ty_int | true}
 
 Enumerating a Scalar Term int_gen
 
 Type of the Scalar Term {var_v1:Ty_int | true}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 
 Enumerating a Scalar Term s
 
 Type of the Scalar Term {v:Ty_int | true}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 
 Enumerating a Scalar Term _lbv0
 
 Type of the Scalar Term {v:Ty_int | (v) ==((s) -- (1))}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 
 Enumerating a Scalar Term _lbv1
 
 Type of the Scalar Term {v:Ty_int | (v) ==((int_gen) -- (1))}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 Show :: Found a Few Macthing Scalars 
  Next Trying Arguments of the form f (ei...) 
  Pure Fun Application: esynthesizePureApp 
 ##################################################################################
  Synthesizing the 2th argument for Function cons
  Trying Arguments in Scalars 
 esynthesizeScalar for {var_v4:Ty_alphalist | true}
  Enumeration for 
 spec 
 {var_v4:Ty_alphalist | true}
 
 Enumerating a Scalar Term nil
 
 Type of the Scalar Term {v:Ty_alphalist | (slen)(v) ==(0)}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 Show :: Found a Few Macthing Scalars 
  Next Trying Arguments of the form f (ei...) 
  Pure Fun Application: esynthesizePureApp 
 ##################################################################################
  *************** Successfully Synthesized Args ei Forall i 
 # of Possible Argument Options for cons 4
 Possible Arg Options 
 EI _lbv1
 EI nil
 Possible Arg Options 
 EI _lbv0
 EI nil
 Possible Arg Options 
 EI s
 EI nil
 Possible Arg Options 
 EI int_gen
 EI nil
 Show f (ei, e2, ....en) Case
 Finding Already seen tree for apply cons  (, _lbv1 ), nil )
 Found _lbv6
 Finding Already seen tree for apply cons  (, _lbv0 ), nil )
 Found _lbv7
 Finding Already seen tree for apply cons  (, s ), nil )
 Found _lbv8
 Finding Already seen tree for apply cons  (, int_gen ), nil )
 Found _lbv9
 ##################################################################################
  *************** Successfully Synthesized Args ei Forall i 
 # of Possible Argument Options for cons 30
 Possible Arg Options 
 EI _lbv1
 EI nil
 Possible Arg Options 
 EI _lbv1
 EI _lbv9
 Possible Arg Options 
 EI _lbv1
 EI _lbv8
 Possible Arg Options 
 EI _lbv1
 EI _lbv7
 Possible Arg Options 
 EI _lbv1
 EI _lbv6
 Possible Arg Options 
 EI _lbv0
 EI nil
 Possible Arg Options 
 EI _lbv0
 EI _lbv9
 Possible Arg Options 
 EI _lbv0
 EI _lbv8
 Possible Arg Options 
 EI _lbv0
 EI _lbv7
 Possible Arg Options 
 EI _lbv0
 EI _lbv6
 Possible Arg Options 
 EI s
 EI nil
 Possible Arg Options 
 EI s
 EI _lbv9
 Possible Arg Options 
 EI s
 EI _lbv8
 Possible Arg Options 
 EI s
 EI _lbv7
 Possible Arg Options 
 EI s
 EI _lbv6
 Possible Arg Options 
 EI int_gen
 EI nil
 Possible Arg Options 
 EI int_gen
 EI _lbv9
 Possible Arg Options 
 EI int_gen
 EI _lbv8
 Possible Arg Options 
 EI int_gen
 EI _lbv7
 Possible Arg Options 
 EI int_gen
 EI _lbv6
 Possible Arg Options 
 EI _lbv1
 EI nil
 Possible Arg Options 
 EI _lbv1
 EI _lbv9
 Possible Arg Options 
 EI _lbv1
 EI _lbv8
 Possible Arg Options 
 EI _lbv1
 EI _lbv7
 Possible Arg Options 
 EI _lbv1
 EI _lbv6
 Possible Arg Options 
 EI _lbv0
 EI nil
 Possible Arg Options 
 EI _lbv0
 EI _lbv9
 Possible Arg Options 
 EI _lbv0
 EI _lbv8
 Possible Arg Options 
 EI _lbv0
 EI _lbv7
 Possible Arg Options 
 EI _lbv0
 EI _lbv6
 Show f (ei, e2, ....en) Case
 Finding Already seen tree for apply cons  (, _lbv1 ), nil )
 Found _lbv6
 Finding Already seen tree for apply cons  (, _lbv1 ), _lbv9 )
 Typechecking apply cons  (, apply subs  (, int_gen ) ), apply cons  (, int_gen ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv1 ), _lbv9 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv1 :: {v:Ty_int | (v) ==((int_gen) -- (1))} | (_lbv1) ==((int_gen) -- (1))
 Argument _lbv9 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                       
 solver 
 (declare-sort T5451)
(declare-fun slen (T5451) Int)
(declare-fun nil () T5451)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun _lbv9 () T5451)
(declare-fun v () T5451)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= (slen v) (+ (slen _lbv9) 1)))
(assert (= var_v7 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= _lbv1 (- int_gen 1)))
(assert (= (slen v) (+ (slen _lbv9) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv1 ), _lbv9 )
 Finding Already seen tree for apply cons  (, _lbv1 ), _lbv8 )
 Typechecking apply cons  (, apply subs  (, int_gen ) ), apply cons  (, s ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv1 ), _lbv8 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv1 :: {v:Ty_int | (v) ==((int_gen) -- (1))} | (_lbv1) ==((int_gen) -- (1))
 Argument _lbv8 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                       
 solver 
 (declare-sort T5492)
(declare-fun slen (T5492) Int)
(declare-fun nil () T5492)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun _lbv8 () T5492)
(declare-fun v () T5492)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= (slen v) (+ (slen _lbv8) 1)))
(assert (= var_v7 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= _lbv1 (- int_gen 1)))
(assert (= (slen v) (+ (slen _lbv8) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv1 ), _lbv8 )
 Finding Already seen tree for apply cons  (, _lbv1 ), _lbv7 )
 Typechecking apply cons  (, apply subs  (, int_gen ) ), apply cons  (, apply subs  (, s ) ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv1 ), _lbv7 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv1 :: {v:Ty_int | (v) ==((int_gen) -- (1))} | (_lbv1) ==((int_gen) -- (1))
 Argument _lbv7 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                       
 solver 
 (declare-sort T5533)
(declare-fun slen (T5533) Int)
(declare-fun nil () T5533)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun _lbv7 () T5533)
(declare-fun v () T5533)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= (slen v) (+ (slen _lbv7) 1)))
(assert (= var_v7 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= _lbv1 (- int_gen 1)))
(assert (= (slen v) (+ (slen _lbv7) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv1 ), _lbv7 )
 Finding Already seen tree for apply cons  (, _lbv1 ), _lbv6 )
 Typechecking apply cons  (, apply subs  (, int_gen ) ), apply cons  (, apply subs  (, int_gen ) ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv1 ), _lbv6 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv1 :: {v:Ty_int | (v) ==((int_gen) -- (1))} | (_lbv1) ==((int_gen) -- (1))
 Argument _lbv6 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                       
 solver 
 (declare-sort T5574)
(declare-fun slen (T5574) Int)
(declare-fun nil () T5574)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun _lbv6 () T5574)
(declare-fun v () T5574)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= (slen v) (+ (slen _lbv6) 1)))
(assert (= var_v7 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= _lbv1 (- int_gen 1)))
(assert (= (slen v) (+ (slen _lbv6) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv1 ), _lbv6 )
 Finding Already seen tree for apply cons  (, _lbv0 ), nil )
 Found _lbv7
 Finding Already seen tree for apply cons  (, _lbv0 ), _lbv9 )
 Typechecking apply cons  (, apply subs  (, s ) ), apply cons  (, int_gen ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv0 ), _lbv9 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv0 :: {v:Ty_int | (v) ==((s) -- (1))} | (_lbv0) ==((s) -- (1))
 Argument _lbv9 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                       
 solver 
 (declare-sort T5615)
(declare-fun slen (T5615) Int)
(declare-fun nil () T5615)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun _lbv9 () T5615)
(declare-fun v () T5615)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= (slen v) (+ (slen _lbv9) 1)))
(assert (= var_v7 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= _lbv0 (- s 1)))
(assert (= (slen v) (+ (slen _lbv9) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv0 ), _lbv9 )
 Finding Already seen tree for apply cons  (, _lbv0 ), _lbv8 )
 Typechecking apply cons  (, apply subs  (, s ) ), apply cons  (, s ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv0 ), _lbv8 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv0 :: {v:Ty_int | (v) ==((s) -- (1))} | (_lbv0) ==((s) -- (1))
 Argument _lbv8 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                       
 solver 
 (declare-sort T5656)
(declare-fun slen (T5656) Int)
(declare-fun nil () T5656)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun _lbv8 () T5656)
(declare-fun v () T5656)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= (slen v) (+ (slen _lbv8) 1)))
(assert (= var_v7 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= _lbv0 (- s 1)))
(assert (= (slen v) (+ (slen _lbv8) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv0 ), _lbv8 )
 Finding Already seen tree for apply cons  (, _lbv0 ), _lbv7 )
 Typechecking apply cons  (, apply subs  (, s ) ), apply cons  (, apply subs  (, s ) ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv0 ), _lbv7 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv0 :: {v:Ty_int | (v) ==((s) -- (1))} | (_lbv0) ==((s) -- (1))
 Argument _lbv7 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                       
 solver 
 (declare-sort T5697)
(declare-fun slen (T5697) Int)
(declare-fun nil () T5697)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun _lbv7 () T5697)
(declare-fun v () T5697)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= (slen v) (+ (slen _lbv7) 1)))
(assert (= var_v7 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= _lbv0 (- s 1)))
(assert (= (slen v) (+ (slen _lbv7) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv0 ), _lbv7 )
 Finding Already seen tree for apply cons  (, _lbv0 ), _lbv6 )
 Typechecking apply cons  (, apply subs  (, s ) ), apply cons  (, apply subs  (, int_gen ) ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv0 ), _lbv6 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv0 :: {v:Ty_int | (v) ==((s) -- (1))} | (_lbv0) ==((s) -- (1))
 Argument _lbv6 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                       
 solver 
 (declare-sort T5738)
(declare-fun slen (T5738) Int)
(declare-fun nil () T5738)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun _lbv6 () T5738)
(declare-fun v () T5738)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= (slen v) (+ (slen _lbv6) 1)))
(assert (= var_v7 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= _lbv0 (- s 1)))
(assert (= (slen v) (+ (slen _lbv6) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv0 ), _lbv6 )
 Finding Already seen tree for apply cons  (, s ), nil )
 Found _lbv8
 Finding Already seen tree for apply cons  (, s ), _lbv9 )
 Typechecking apply cons  (, s ), apply cons  (, int_gen ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, s ), _lbv9 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument s :: {v:Ty_int | true} | true
 Argument _lbv9 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                       
 solver 
 (declare-sort T5779)
(declare-fun slen (T5779) Int)
(declare-fun nil () T5779)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun _lbv9 () T5779)
(declare-fun v () T5779)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= (slen v) (+ (slen _lbv9) 1)))
(assert (= var_v7 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= (slen v) (+ (slen _lbv9) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, s ), _lbv9 )
 Finding Already seen tree for apply cons  (, s ), _lbv8 )
 Typechecking apply cons  (, s ), apply cons  (, s ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, s ), _lbv8 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument s :: {v:Ty_int | true} | true
 Argument _lbv8 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                       
 solver 
 (declare-sort T5820)
(declare-fun slen (T5820) Int)
(declare-fun nil () T5820)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun _lbv8 () T5820)
(declare-fun v () T5820)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= (slen v) (+ (slen _lbv8) 1)))
(assert (= var_v7 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= (slen v) (+ (slen _lbv8) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, s ), _lbv8 )
 Finding Already seen tree for apply cons  (, s ), _lbv7 )
 Typechecking apply cons  (, s ), apply cons  (, apply subs  (, s ) ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, s ), _lbv7 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument s :: {v:Ty_int | true} | true
 Argument _lbv7 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                       
 solver 
 (declare-sort T5861)
(declare-fun slen (T5861) Int)
(declare-fun nil () T5861)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun _lbv7 () T5861)
(declare-fun v () T5861)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= (slen v) (+ (slen _lbv7) 1)))
(assert (= var_v7 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= (slen v) (+ (slen _lbv7) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, s ), _lbv7 )
 Finding Already seen tree for apply cons  (, s ), _lbv6 )
 Typechecking apply cons  (, s ), apply cons  (, apply subs  (, int_gen ) ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, s ), _lbv6 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument s :: {v:Ty_int | true} | true
 Argument _lbv6 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                       
 solver 
 (declare-sort T5902)
(declare-fun slen (T5902) Int)
(declare-fun nil () T5902)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun _lbv6 () T5902)
(declare-fun v () T5902)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= (slen v) (+ (slen _lbv6) 1)))
(assert (= var_v7 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= (slen v) (+ (slen _lbv6) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, s ), _lbv6 )
 Finding Already seen tree for apply cons  (, int_gen ), nil )
 Found _lbv9
 Finding Already seen tree for apply cons  (, int_gen ), _lbv9 )
 Typechecking apply cons  (, int_gen ), apply cons  (, int_gen ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, int_gen ), _lbv9 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument int_gen :: {var_v1:Ty_int | true} | true
 Argument _lbv9 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                       
 solver 
 (declare-sort T5943)
(declare-fun slen (T5943) Int)
(declare-fun nil () T5943)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun _lbv9 () T5943)
(declare-fun v () T5943)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= (slen v) (+ (slen _lbv9) 1)))
(assert (= var_v7 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= (slen v) (+ (slen _lbv9) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, int_gen ), _lbv9 )
 Finding Already seen tree for apply cons  (, int_gen ), _lbv8 )
 Typechecking apply cons  (, int_gen ), apply cons  (, s ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, int_gen ), _lbv8 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument int_gen :: {var_v1:Ty_int | true} | true
 Argument _lbv8 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                       
 solver 
 (declare-sort T5984)
(declare-fun slen (T5984) Int)
(declare-fun nil () T5984)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun _lbv8 () T5984)
(declare-fun v () T5984)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= (slen v) (+ (slen _lbv8) 1)))
(assert (= var_v7 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= (slen v) (+ (slen _lbv8) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, int_gen ), _lbv8 )
 Finding Already seen tree for apply cons  (, int_gen ), _lbv7 )
 Typechecking apply cons  (, int_gen ), apply cons  (, apply subs  (, s ) ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, int_gen ), _lbv7 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument int_gen :: {var_v1:Ty_int | true} | true
 Argument _lbv7 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                       
 solver 
 (declare-sort T6025)
(declare-fun slen (T6025) Int)
(declare-fun nil () T6025)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun _lbv7 () T6025)
(declare-fun v () T6025)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= (slen v) (+ (slen _lbv7) 1)))
(assert (= var_v7 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= (slen v) (+ (slen _lbv7) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, int_gen ), _lbv7 )
 Finding Already seen tree for apply cons  (, int_gen ), _lbv6 )
 Typechecking apply cons  (, int_gen ), apply cons  (, apply subs  (, int_gen ) ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, int_gen ), _lbv6 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument int_gen :: {var_v1:Ty_int | true} | true
 Argument _lbv6 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                       
 solver 
 (declare-sort T6066)
(declare-fun slen (T6066) Int)
(declare-fun nil () T6066)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun _lbv6 () T6066)
(declare-fun v () T6066)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= (slen v) (+ (slen _lbv6) 1)))
(assert (= var_v7 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= (slen v) (+ (slen _lbv6) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, int_gen ), _lbv6 )
 Finding Already seen tree for apply cons  (, _lbv1 ), nil )
 Found _lbv6
 Finding Already seen tree for apply cons  (, _lbv1 ), _lbv9 )
 Typechecking apply cons  (, apply subs  (, int_gen ) ), apply cons  (, int_gen ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv1 ), _lbv9 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv1 :: {v:Ty_int | (v) ==((int_gen) -- (1))} | (_lbv1) ==((int_gen) -- (1))
 Argument _lbv9 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                       
 solver 
 (declare-sort T6107)
(declare-fun slen (T6107) Int)
(declare-fun nil () T6107)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun _lbv9 () T6107)
(declare-fun v () T6107)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= (slen v) (+ (slen _lbv9) 1)))
(assert (= var_v7 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= _lbv1 (- int_gen 1)))
(assert (= (slen v) (+ (slen _lbv9) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv1 ), _lbv9 )
 Finding Already seen tree for apply cons  (, _lbv1 ), _lbv8 )
 Typechecking apply cons  (, apply subs  (, int_gen ) ), apply cons  (, s ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv1 ), _lbv8 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv1 :: {v:Ty_int | (v) ==((int_gen) -- (1))} | (_lbv1) ==((int_gen) -- (1))
 Argument _lbv8 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                       
 solver 
 (declare-sort T6148)
(declare-fun slen (T6148) Int)
(declare-fun nil () T6148)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun _lbv8 () T6148)
(declare-fun v () T6148)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= (slen v) (+ (slen _lbv8) 1)))
(assert (= var_v7 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= _lbv1 (- int_gen 1)))
(assert (= (slen v) (+ (slen _lbv8) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv1 ), _lbv8 )
 Finding Already seen tree for apply cons  (, _lbv1 ), _lbv7 )
 Typechecking apply cons  (, apply subs  (, int_gen ) ), apply cons  (, apply subs  (, s ) ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv1 ), _lbv7 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv1 :: {v:Ty_int | (v) ==((int_gen) -- (1))} | (_lbv1) ==((int_gen) -- (1))
 Argument _lbv7 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                       
 solver 
 (declare-sort T6189)
(declare-fun slen (T6189) Int)
(declare-fun nil () T6189)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun _lbv7 () T6189)
(declare-fun v () T6189)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= (slen v) (+ (slen _lbv7) 1)))
(assert (= var_v7 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= _lbv1 (- int_gen 1)))
(assert (= (slen v) (+ (slen _lbv7) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv1 ), _lbv7 )
 Finding Already seen tree for apply cons  (, _lbv1 ), _lbv6 )
 Typechecking apply cons  (, apply subs  (, int_gen ) ), apply cons  (, apply subs  (, int_gen ) ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv1 ), _lbv6 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv1 :: {v:Ty_int | (v) ==((int_gen) -- (1))} | (_lbv1) ==((int_gen) -- (1))
 Argument _lbv6 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                       
 solver 
 (declare-sort T6230)
(declare-fun slen (T6230) Int)
(declare-fun nil () T6230)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun _lbv6 () T6230)
(declare-fun v () T6230)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= (slen v) (+ (slen _lbv6) 1)))
(assert (= var_v7 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= _lbv1 (- int_gen 1)))
(assert (= (slen v) (+ (slen _lbv6) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv1 ), _lbv6 )
 Finding Already seen tree for apply cons  (, _lbv0 ), nil )
 Found _lbv7
 Finding Already seen tree for apply cons  (, _lbv0 ), _lbv9 )
 Typechecking apply cons  (, apply subs  (, s ) ), apply cons  (, int_gen ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv0 ), _lbv9 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv0 :: {v:Ty_int | (v) ==((s) -- (1))} | (_lbv0) ==((s) -- (1))
 Argument _lbv9 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                       
 solver 
 (declare-sort T6271)
(declare-fun slen (T6271) Int)
(declare-fun nil () T6271)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun _lbv9 () T6271)
(declare-fun v () T6271)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= (slen v) (+ (slen _lbv9) 1)))
(assert (= var_v7 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= _lbv0 (- s 1)))
(assert (= (slen v) (+ (slen _lbv9) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv0 ), _lbv9 )
 Finding Already seen tree for apply cons  (, _lbv0 ), _lbv8 )
 Typechecking apply cons  (, apply subs  (, s ) ), apply cons  (, s ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv0 ), _lbv8 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv0 :: {v:Ty_int | (v) ==((s) -- (1))} | (_lbv0) ==((s) -- (1))
 Argument _lbv8 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                       
 solver 
 (declare-sort T6312)
(declare-fun slen (T6312) Int)
(declare-fun nil () T6312)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun _lbv8 () T6312)
(declare-fun v () T6312)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= (slen v) (+ (slen _lbv8) 1)))
(assert (= var_v7 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= _lbv0 (- s 1)))
(assert (= (slen v) (+ (slen _lbv8) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv0 ), _lbv8 )
 Finding Already seen tree for apply cons  (, _lbv0 ), _lbv7 )
 Typechecking apply cons  (, apply subs  (, s ) ), apply cons  (, apply subs  (, s ) ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv0 ), _lbv7 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv0 :: {v:Ty_int | (v) ==((s) -- (1))} | (_lbv0) ==((s) -- (1))
 Argument _lbv7 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                       
 solver 
 (declare-sort T6353)
(declare-fun slen (T6353) Int)
(declare-fun nil () T6353)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun _lbv7 () T6353)
(declare-fun v () T6353)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= (slen v) (+ (slen _lbv7) 1)))
(assert (= var_v7 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= _lbv0 (- s 1)))
(assert (= (slen v) (+ (slen _lbv7) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv0 ), _lbv7 )
 Finding Already seen tree for apply cons  (, _lbv0 ), _lbv6 )
 Typechecking apply cons  (, apply subs  (, s ) ), apply cons  (, apply subs  (, int_gen ) ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv0 ), _lbv6 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv0 :: {v:Ty_int | (v) ==((s) -- (1))} | (_lbv0) ==((s) -- (1))
 Argument _lbv6 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                       
 solver 
 (declare-sort T6394)
(declare-fun slen (T6394) Int)
(declare-fun nil () T6394)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun _lbv6 () T6394)
(declare-fun v () T6394)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= (slen v) (+ (slen _lbv6) 1)))
(assert (= var_v7 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= _lbv0 (- s 1)))
(assert (= (slen v) (+ (slen _lbv6) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv0 ), _lbv6 )
 True Branch :: Successfully Synthesisized
 *********************************************
 if apply sizecheck  (, apply subs  (, int_gen ) )
 	 then 
 ***********
 apply cons  (, apply subs  (, s ) ), nil )
 ***********
 apply cons  (, apply subs  (, int_gen ) ), nil )
 ***********
 apply cons  (, int_gen ), nil )
 ***********
 apply cons  (, s ), nil )
 ***********
 apply cons  (, apply subs  (, s ) ), nil )
 ***********
 apply cons  (, apply subs  (, int_gen ) ), nil )
 ************If Else False Branch**************
 *********************************************
 False Branch :: Trying False Branch
 Show :: Synthesizing the false branch
 Show :: False Predicate 
 	 Conj <c var_v7 = false
 	 , DoubleImpl 
 var_v7 = true
  
 	 Conj <c _lbv1 = 0
 	 , DoubleImpl 
 var_v7 = false
  _lbv1 > 0 >c  >c 
 Show ***********Calling Scalar synthesize***************
 esynthesizeScalar for {v:Ty_alphalist | (slen)(v) ==(s)}
  Enumeration for 
 spec 
 {v:Ty_alphalist | (slen)(v) ==(s)}
 
 Enumerating a Scalar Term nil
 
 Type of the Scalar Term {v:Ty_alphalist | (slen)(v) ==(0)}                                                                                                                                                                       
 solver 
 (declare-sort T6436)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun slen (T6436) Int)
(declare-fun nil () T6436)
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= (slen nil) 0))
(assert (= var_v7 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= (slen nil) 0))
(assert (not (= (slen nil) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
 
 Timeout the subtype check T_vi <: T_goal
 >>>>>>>>>>>>>>>>>> No Scalar found in Environment, Trying esynthesizePureApp <<<<<<<<<<<<<<<<<< 
  Pure Fun Application: esynthesizePureApp 
 Show Potential Functions
  , 
 goal, 
 cons
 ############################################################
  Trying Pure Component goal
  *************** Trying Arrow Component ************goal :  Arrow ( ( s1 : {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c } ) -> {v:Ty_alphalist | (slen)(v) ==(s1)}
  *************** Synthesizing Args ei : ti for ************goal
 ##################################################################################
  Synthesizing the 1th argument for Function goal
  Trying Arguments in Scalars 
 esynthesizeScalar for {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c }
  Enumeration for 
 spec 
 {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c }
 
 Enumerating a Scalar Term int_gen
 
 Type of the Scalar Term {var_v1:Ty_int | true}                                                                                                                                                                            
 solver 
 (declare-sort T6476)
(declare-fun slen (T6476) Int)
(declare-fun nil () T6476)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= var_v7 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (not (> s int_gen)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
 
 Timeout the subtype check T_vi <: T_goal
 
 Enumerating a Scalar Term s
 
 Type of the Scalar Term {v:Ty_int | true}                                                                                                                                                                            
 solver 
 (declare-sort T6517)
(declare-fun slen (T6517) Int)
(declare-fun nil () T6517)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= var_v7 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (not (> s s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
 
 Timeout the subtype check T_vi <: T_goal
 
 Enumerating a Scalar Term _lbv0
 
 Type of the Scalar Term {v:Ty_int | (v) ==((s) -- (1))}                                                                                                                                                                            
 solver 
 (declare-sort T6558)
(declare-fun slen (T6558) Int)
(declare-fun nil () T6558)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun s () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(assert (= (slen nil) 0))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= _lbv0 (- s 1)))
(assert (= var_v7 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= _lbv0 (- s 1)))
(assert (not (> s _lbv0)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
 
 Timedout the subtype check T_vi <: T_goal
 
 Enumerating a Scalar Term _lbv1
 
 Type of the Scalar Term {v:Ty_int | (v) ==((int_gen) -- (1))}                                                                                                                                                                            
 solver 
 (declare-sort T6599)
(declare-fun slen (T6599) Int)
(declare-fun nil () T6599)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun int_gen () Int)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= _lbv1 (- int_gen 1)))
(assert (= var_v7 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= _lbv1 (- int_gen 1)))
(assert (not (> s _lbv1)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
 
 Timedout the subtype check T_vi <: T_goal
 >>>>>>>>>>>>>>>>>> No Scalar found in Environment, Trying esynthesizePureApp <<<<<<<<<<<<<<<<<< 
  Pure Fun Application: esynthesizePureApp 
 Show Potential Functions
  , 
 subs
 ############################################################
  Trying Pure Component subs
  *************** Trying Arrow Component ************subs :  Arrow ( ( n1 : {var_v0:Ty_int | true} ) -> {v:Ty_int | (v) ==((n1) -- (1))}
  *************** Synthesizing Args ei : ti for ************subs
 ##################################################################################
  Synthesizing the 1th argument for Function subs
  Trying Arguments in Scalars 
 esynthesizeScalar for {var_v0:Ty_int | true}
  Enumeration for 
 spec 
 {var_v0:Ty_int | true}
 
 Enumerating a Scalar Term int_gen
 
 Type of the Scalar Term {var_v1:Ty_int | true}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 
 Enumerating a Scalar Term s
 
 Type of the Scalar Term {v:Ty_int | true}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 
 Enumerating a Scalar Term _lbv0
 
 Type of the Scalar Term {v:Ty_int | (v) ==((s) -- (1))}
 ################################################
 Skipping Variable _lbv0 As Outer Function Call is subs
 
 Enumerating a Scalar Term _lbv1
 
 Type of the Scalar Term {v:Ty_int | (v) ==((int_gen) -- (1))}
 ################################################
 Skipping Variable _lbv1 As Outer Function Call is subs
 Show :: Found a Few Macthing Scalars 
  Next Trying Arguments of the form f (ei...) 
  Pure Fun Application: esynthesizePureApp 
 ##################################################################################
  *************** Successfully Synthesized Args ei Forall i 
 # of Possible Argument Options for subs 2
 Possible Arg Options 
 EI s
 Possible Arg Options 
 EI int_gen
 Apply Single Argument Case : f (ei) Case subs
  Case : f (ei) Case subs s
 Finding Already seen tree for apply subs  (, s )
 Found _lbv0
  Case : f (ei) Case subs int_gen
 Finding Already seen tree for apply subs  (, int_gen )
 Found _lbv1
  Next Trying Arguments of the form f (ei...) 
  Pure Fun Application: esynthesizePureApp 
 Show Potential Functions
  , 
 subs
 ############################################################
  Trying Pure Component subs
 ##################################################################################
  *************** Successfully Synthesized Args ei Forall i 
 # of Possible Argument Options for goal 2
 Possible Arg Options 
 EI _lbv1
 Possible Arg Options 
 EI _lbv0
 Apply Single Argument Case : f (ei) Case goal
  Case : f (ei) Case goal _lbv1
 Finding Already seen tree for apply goal  (, _lbv1 )
 Typechecking the Term apply goal  (, _lbv1 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv1 :: {v:Ty_int | (v) ==((int_gen) -- (1))} | (_lbv1) ==((int_gen) -- (1))                                                                                                                                                                       
 solver 
 (declare-sort T6716)
(declare-fun slen (T6716) Int)
(declare-fun nil () T6716)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun v () T6716)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= (slen v) _lbv1))
(assert (= var_v7 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= _lbv1 (- int_gen 1)))
(assert (= (slen v) _lbv1))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply goal  (, _lbv1 )
  Case : f (ei) Case goal _lbv0
 Finding Already seen tree for apply goal  (, _lbv0 )
 Typechecking the Term apply goal  (, _lbv0 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv0 :: {v:Ty_int | (v) ==((s) -- (1))} | (_lbv0) ==((s) -- (1))                                                                                                                                                                       
 solver 
 (declare-sort T6757)
(declare-fun slen (T6757) Int)
(declare-fun nil () T6757)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun v () T6757)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= (slen v) _lbv0))
(assert (= var_v7 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= _lbv0 (- s 1)))
(assert (= (slen v) _lbv0))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply goal  (, _lbv0 )
  ###################################################
  The Choice of Function goal Was Ill Fated Try Next Choice of function
 ############################################################
  Trying Pure Component cons
  *************** Trying Arrow Component ************cons :  Arrow ( ( x : {var_v3:Ty_int | true} ) ->  Arrow ( ( xs : {var_v4:Ty_alphalist | true} ) -> {v:Ty_alphalist | (slen)(v) ==((slen)(xs) + (1))}
  *************** Synthesizing Args ei : ti for ************cons
 ##################################################################################
  Synthesizing the 1th argument for Function cons
  Trying Arguments in Scalars 
 esynthesizeScalar for {var_v3:Ty_int | true}
  Enumeration for 
 spec 
 {var_v3:Ty_int | true}
 
 Enumerating a Scalar Term int_gen
 
 Type of the Scalar Term {var_v1:Ty_int | true}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 
 Enumerating a Scalar Term s
 
 Type of the Scalar Term {v:Ty_int | true}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 
 Enumerating a Scalar Term _lbv0
 
 Type of the Scalar Term {v:Ty_int | (v) ==((s) -- (1))}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 
 Enumerating a Scalar Term _lbv1
 
 Type of the Scalar Term {v:Ty_int | (v) ==((int_gen) -- (1))}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 Show :: Found a Few Macthing Scalars 
  Next Trying Arguments of the form f (ei...) 
  Pure Fun Application: esynthesizePureApp 
 Show Potential Functions
  , 
 subs
 ############################################################
  Trying Pure Component subs
  *************** Trying Arrow Component ************subs :  Arrow ( ( n1 : {var_v0:Ty_int | true} ) -> {v:Ty_int | (v) ==((n1) -- (1))}
  *************** Synthesizing Args ei : ti for ************subs
 ##################################################################################
  Synthesizing the 1th argument for Function subs
  Trying Arguments in Scalars 
 esynthesizeScalar for {var_v0:Ty_int | true}
  Enumeration for 
 spec 
 {var_v0:Ty_int | true}
 
 Enumerating a Scalar Term int_gen
 
 Type of the Scalar Term {var_v1:Ty_int | true}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 
 Enumerating a Scalar Term s
 
 Type of the Scalar Term {v:Ty_int | true}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 
 Enumerating a Scalar Term _lbv0
 
 Type of the Scalar Term {v:Ty_int | (v) ==((s) -- (1))}
 ################################################
 Skipping Variable _lbv0 As Outer Function Call is subs
 
 Enumerating a Scalar Term _lbv1
 
 Type of the Scalar Term {v:Ty_int | (v) ==((int_gen) -- (1))}
 ################################################
 Skipping Variable _lbv1 As Outer Function Call is subs
 Show :: Found a Few Macthing Scalars 
  Next Trying Arguments of the form f (ei...) 
  Pure Fun Application: esynthesizePureApp 
 ##################################################################################
  *************** Successfully Synthesized Args ei Forall i 
 # of Possible Argument Options for subs 2
 Possible Arg Options 
 EI s
 Possible Arg Options 
 EI int_gen
 Apply Single Argument Case : f (ei) Case subs
  Case : f (ei) Case subs s
 Finding Already seen tree for apply subs  (, s )
 Found _lbv0
  Case : f (ei) Case subs int_gen
 Finding Already seen tree for apply subs  (, int_gen )
 Found _lbv1
 ##################################################################################
  Synthesizing the 2th argument for Function cons
  Trying Arguments in Scalars 
 esynthesizeScalar for {var_v4:Ty_alphalist | true}
  Enumeration for 
 spec 
 {var_v4:Ty_alphalist | true}
 
 Enumerating a Scalar Term nil
 
 Type of the Scalar Term {v:Ty_alphalist | (slen)(v) ==(0)}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 Show :: Found a Few Macthing Scalars 
  Next Trying Arguments of the form f (ei...) 
  Pure Fun Application: esynthesizePureApp 
 Show Potential Functions
  , 
 goal, 
 cons
 ############################################################
  Trying Pure Component goal
  *************** Trying Arrow Component ************goal :  Arrow ( ( s1 : {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c } ) -> {v:Ty_alphalist | (slen)(v) ==(s1)}
  *************** Synthesizing Args ei : ti for ************goal
 ##################################################################################
  Synthesizing the 1th argument for Function goal
  Trying Arguments in Scalars 
 esynthesizeScalar for {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c }
  Enumeration for 
 spec 
 {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c }
 
 Enumerating a Scalar Term int_gen
 
 Type of the Scalar Term {var_v1:Ty_int | true}                                                                                                                                                                            
 solver 
 (declare-sort T7064)
(declare-fun slen (T7064) Int)
(declare-fun nil () T7064)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= var_v7 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (not (> s int_gen)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
 
 Timeout the subtype check T_vi <: T_goal
 
 Enumerating a Scalar Term s
 
 Type of the Scalar Term {v:Ty_int | true}                                                                                                                                                                            
 solver 
 (declare-sort T7105)
(declare-fun slen (T7105) Int)
(declare-fun nil () T7105)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= var_v7 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (not (> s s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
 
 Timeout the subtype check T_vi <: T_goal
 
 Enumerating a Scalar Term _lbv0
 
 Type of the Scalar Term {v:Ty_int | (v) ==((s) -- (1))}                                                                                                                                                                            
 solver 
 (declare-sort T7146)
(declare-fun slen (T7146) Int)
(declare-fun nil () T7146)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun s () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(assert (= (slen nil) 0))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= _lbv0 (- s 1)))
(assert (= var_v7 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= _lbv0 (- s 1)))
(assert (not (> s _lbv0)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
 
 Timedout the subtype check T_vi <: T_goal
 
 Enumerating a Scalar Term _lbv1
 
 Type of the Scalar Term {v:Ty_int | (v) ==((int_gen) -- (1))}                                                                                                                                                                            
 solver 
 (declare-sort T7187)
(declare-fun slen (T7187) Int)
(declare-fun nil () T7187)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun int_gen () Int)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= _lbv1 (- int_gen 1)))
(assert (= var_v7 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= _lbv1 (- int_gen 1)))
(assert (not (> s _lbv1)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
 
 Timedout the subtype check T_vi <: T_goal
 >>>>>>>>>>>>>>>>>> No Scalar found in Environment, Trying esynthesizePureApp <<<<<<<<<<<<<<<<<< 
  Pure Fun Application: esynthesizePureApp 
 >>>>>>>>>>>>>>>>>>  No pureApp found, Call esynthesizeConsApp <<<<<<<<<<<<<< 
  Next Trying Arguments of the form f (ei...) 
  Pure Fun Application: esynthesizePureApp 
 ##################################################################################
  *************** Synthesizing Args ei : Failed for some  arg
 ############################################################
  Trying Pure Component cons
  *************** Trying Arrow Component ************cons :  Arrow ( ( x : {var_v3:Ty_int | true} ) ->  Arrow ( ( xs : {var_v4:Ty_alphalist | true} ) -> {v:Ty_alphalist | (slen)(v) ==((slen)(xs) + (1))}
  *************** Synthesizing Args ei : ti for ************cons
 ##################################################################################
  Synthesizing the 1th argument for Function cons
  Trying Arguments in Scalars 
 esynthesizeScalar for {var_v3:Ty_int | true}
  Enumeration for 
 spec 
 {var_v3:Ty_int | true}
 
 Enumerating a Scalar Term int_gen
 
 Type of the Scalar Term {var_v1:Ty_int | true}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 
 Enumerating a Scalar Term s
 
 Type of the Scalar Term {v:Ty_int | true}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 
 Enumerating a Scalar Term _lbv0
 
 Type of the Scalar Term {v:Ty_int | (v) ==((s) -- (1))}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 
 Enumerating a Scalar Term _lbv1
 
 Type of the Scalar Term {v:Ty_int | (v) ==((int_gen) -- (1))}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 Show :: Found a Few Macthing Scalars 
  Next Trying Arguments of the form f (ei...) 
  Pure Fun Application: esynthesizePureApp 
 ##################################################################################
  Synthesizing the 2th argument for Function cons
  Trying Arguments in Scalars 
 esynthesizeScalar for {var_v4:Ty_alphalist | true}
  Enumeration for 
 spec 
 {var_v4:Ty_alphalist | true}
 
 Enumerating a Scalar Term nil
 
 Type of the Scalar Term {v:Ty_alphalist | (slen)(v) ==(0)}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 Show :: Found a Few Macthing Scalars 
  Next Trying Arguments of the form f (ei...) 
  Pure Fun Application: esynthesizePureApp 
 ##################################################################################
  *************** Successfully Synthesized Args ei Forall i 
 # of Possible Argument Options for cons 4
 Possible Arg Options 
 EI _lbv1
 EI nil
 Possible Arg Options 
 EI _lbv0
 EI nil
 Possible Arg Options 
 EI s
 EI nil
 Possible Arg Options 
 EI int_gen
 EI nil
 Show f (ei, e2, ....en) Case
 Finding Already seen tree for apply cons  (, _lbv1 ), nil )
 Found _lbv6
 Finding Already seen tree for apply cons  (, _lbv0 ), nil )
 Found _lbv7
 Finding Already seen tree for apply cons  (, s ), nil )
 Found _lbv8
 Finding Already seen tree for apply cons  (, int_gen ), nil )
 Found _lbv9
 ##################################################################################
  *************** Successfully Synthesized Args ei Forall i 
 # of Possible Argument Options for cons 30
 Possible Arg Options 
 EI _lbv1
 EI nil
 Possible Arg Options 
 EI _lbv1
 EI _lbv9
 Possible Arg Options 
 EI _lbv1
 EI _lbv8
 Possible Arg Options 
 EI _lbv1
 EI _lbv7
 Possible Arg Options 
 EI _lbv1
 EI _lbv6
 Possible Arg Options 
 EI _lbv0
 EI nil
 Possible Arg Options 
 EI _lbv0
 EI _lbv9
 Possible Arg Options 
 EI _lbv0
 EI _lbv8
 Possible Arg Options 
 EI _lbv0
 EI _lbv7
 Possible Arg Options 
 EI _lbv0
 EI _lbv6
 Possible Arg Options 
 EI s
 EI nil
 Possible Arg Options 
 EI s
 EI _lbv9
 Possible Arg Options 
 EI s
 EI _lbv8
 Possible Arg Options 
 EI s
 EI _lbv7
 Possible Arg Options 
 EI s
 EI _lbv6
 Possible Arg Options 
 EI int_gen
 EI nil
 Possible Arg Options 
 EI int_gen
 EI _lbv9
 Possible Arg Options 
 EI int_gen
 EI _lbv8
 Possible Arg Options 
 EI int_gen
 EI _lbv7
 Possible Arg Options 
 EI int_gen
 EI _lbv6
 Possible Arg Options 
 EI _lbv1
 EI nil
 Possible Arg Options 
 EI _lbv1
 EI _lbv9
 Possible Arg Options 
 EI _lbv1
 EI _lbv8
 Possible Arg Options 
 EI _lbv1
 EI _lbv7
 Possible Arg Options 
 EI _lbv1
 EI _lbv6
 Possible Arg Options 
 EI _lbv0
 EI nil
 Possible Arg Options 
 EI _lbv0
 EI _lbv9
 Possible Arg Options 
 EI _lbv0
 EI _lbv8
 Possible Arg Options 
 EI _lbv0
 EI _lbv7
 Possible Arg Options 
 EI _lbv0
 EI _lbv6
 Show f (ei, e2, ....en) Case
 Finding Already seen tree for apply cons  (, _lbv1 ), nil )
 Found _lbv6
 Finding Already seen tree for apply cons  (, _lbv1 ), _lbv9 )
 Typechecking apply cons  (, apply subs  (, int_gen ) ), apply cons  (, int_gen ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv1 ), _lbv9 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv1 :: {v:Ty_int | (v) ==((int_gen) -- (1))} | (_lbv1) ==((int_gen) -- (1))
 Argument _lbv9 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                       
 solver 
 (declare-sort T7418)
(declare-fun slen (T7418) Int)
(declare-fun nil () T7418)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun _lbv9 () T7418)
(declare-fun v () T7418)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= (slen v) (+ (slen _lbv9) 1)))
(assert (= var_v7 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= _lbv1 (- int_gen 1)))
(assert (= (slen v) (+ (slen _lbv9) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv1 ), _lbv9 )
 Finding Already seen tree for apply cons  (, _lbv1 ), _lbv8 )
 Typechecking apply cons  (, apply subs  (, int_gen ) ), apply cons  (, s ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv1 ), _lbv8 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv1 :: {v:Ty_int | (v) ==((int_gen) -- (1))} | (_lbv1) ==((int_gen) -- (1))
 Argument _lbv8 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                       
 solver 
 (declare-sort T7459)
(declare-fun slen (T7459) Int)
(declare-fun nil () T7459)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun _lbv8 () T7459)
(declare-fun v () T7459)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= (slen v) (+ (slen _lbv8) 1)))
(assert (= var_v7 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= _lbv1 (- int_gen 1)))
(assert (= (slen v) (+ (slen _lbv8) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv1 ), _lbv8 )
 Finding Already seen tree for apply cons  (, _lbv1 ), _lbv7 )
 Typechecking apply cons  (, apply subs  (, int_gen ) ), apply cons  (, apply subs  (, s ) ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv1 ), _lbv7 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv1 :: {v:Ty_int | (v) ==((int_gen) -- (1))} | (_lbv1) ==((int_gen) -- (1))
 Argument _lbv7 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                       
 solver 
 (declare-sort T7500)
(declare-fun slen (T7500) Int)
(declare-fun nil () T7500)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun _lbv7 () T7500)
(declare-fun v () T7500)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= (slen v) (+ (slen _lbv7) 1)))
(assert (= var_v7 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= _lbv1 (- int_gen 1)))
(assert (= (slen v) (+ (slen _lbv7) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv1 ), _lbv7 )
 Finding Already seen tree for apply cons  (, _lbv1 ), _lbv6 )
 Typechecking apply cons  (, apply subs  (, int_gen ) ), apply cons  (, apply subs  (, int_gen ) ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv1 ), _lbv6 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv1 :: {v:Ty_int | (v) ==((int_gen) -- (1))} | (_lbv1) ==((int_gen) -- (1))
 Argument _lbv6 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                       
 solver 
 (declare-sort T7541)
(declare-fun slen (T7541) Int)
(declare-fun nil () T7541)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun _lbv6 () T7541)
(declare-fun v () T7541)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= (slen v) (+ (slen _lbv6) 1)))
(assert (= var_v7 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= _lbv1 (- int_gen 1)))
(assert (= (slen v) (+ (slen _lbv6) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv1 ), _lbv6 )
 Finding Already seen tree for apply cons  (, _lbv0 ), nil )
 Found _lbv7
 Finding Already seen tree for apply cons  (, _lbv0 ), _lbv9 )
 Typechecking apply cons  (, apply subs  (, s ) ), apply cons  (, int_gen ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv0 ), _lbv9 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv0 :: {v:Ty_int | (v) ==((s) -- (1))} | (_lbv0) ==((s) -- (1))
 Argument _lbv9 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                       
 solver 
 (declare-sort T7582)
(declare-fun slen (T7582) Int)
(declare-fun nil () T7582)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun _lbv9 () T7582)
(declare-fun v () T7582)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= (slen v) (+ (slen _lbv9) 1)))
(assert (= var_v7 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= _lbv0 (- s 1)))
(assert (= (slen v) (+ (slen _lbv9) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv0 ), _lbv9 )
 Finding Already seen tree for apply cons  (, _lbv0 ), _lbv8 )
 Typechecking apply cons  (, apply subs  (, s ) ), apply cons  (, s ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv0 ), _lbv8 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv0 :: {v:Ty_int | (v) ==((s) -- (1))} | (_lbv0) ==((s) -- (1))
 Argument _lbv8 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                       
 solver 
 (declare-sort T7623)
(declare-fun slen (T7623) Int)
(declare-fun nil () T7623)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun _lbv8 () T7623)
(declare-fun v () T7623)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= (slen v) (+ (slen _lbv8) 1)))
(assert (= var_v7 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= _lbv0 (- s 1)))
(assert (= (slen v) (+ (slen _lbv8) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv0 ), _lbv8 )
 Finding Already seen tree for apply cons  (, _lbv0 ), _lbv7 )
 Typechecking apply cons  (, apply subs  (, s ) ), apply cons  (, apply subs  (, s ) ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv0 ), _lbv7 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv0 :: {v:Ty_int | (v) ==((s) -- (1))} | (_lbv0) ==((s) -- (1))
 Argument _lbv7 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                       
 solver 
 (declare-sort T7664)
(declare-fun slen (T7664) Int)
(declare-fun nil () T7664)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun _lbv7 () T7664)
(declare-fun v () T7664)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= (slen v) (+ (slen _lbv7) 1)))
(assert (= var_v7 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= _lbv0 (- s 1)))
(assert (= (slen v) (+ (slen _lbv7) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv0 ), _lbv7 )
 Finding Already seen tree for apply cons  (, _lbv0 ), _lbv6 )
 Typechecking apply cons  (, apply subs  (, s ) ), apply cons  (, apply subs  (, int_gen ) ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv0 ), _lbv6 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv0 :: {v:Ty_int | (v) ==((s) -- (1))} | (_lbv0) ==((s) -- (1))
 Argument _lbv6 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                       
 solver 
 (declare-sort T7705)
(declare-fun slen (T7705) Int)
(declare-fun nil () T7705)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun _lbv6 () T7705)
(declare-fun v () T7705)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= (slen v) (+ (slen _lbv6) 1)))
(assert (= var_v7 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= _lbv0 (- s 1)))
(assert (= (slen v) (+ (slen _lbv6) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv0 ), _lbv6 )
 Finding Already seen tree for apply cons  (, s ), nil )
 Found _lbv8
 Finding Already seen tree for apply cons  (, s ), _lbv9 )
 Typechecking apply cons  (, s ), apply cons  (, int_gen ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, s ), _lbv9 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument s :: {v:Ty_int | true} | true
 Argument _lbv9 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                       
 solver 
 (declare-sort T7746)
(declare-fun slen (T7746) Int)
(declare-fun nil () T7746)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun _lbv9 () T7746)
(declare-fun v () T7746)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= (slen v) (+ (slen _lbv9) 1)))
(assert (= var_v7 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= (slen v) (+ (slen _lbv9) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, s ), _lbv9 )
 Finding Already seen tree for apply cons  (, s ), _lbv8 )
 Typechecking apply cons  (, s ), apply cons  (, s ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, s ), _lbv8 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument s :: {v:Ty_int | true} | true
 Argument _lbv8 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                       
 solver 
 (declare-sort T7787)
(declare-fun slen (T7787) Int)
(declare-fun nil () T7787)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun _lbv8 () T7787)
(declare-fun v () T7787)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= (slen v) (+ (slen _lbv8) 1)))
(assert (= var_v7 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= (slen v) (+ (slen _lbv8) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, s ), _lbv8 )
 Finding Already seen tree for apply cons  (, s ), _lbv7 )
 Typechecking apply cons  (, s ), apply cons  (, apply subs  (, s ) ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, s ), _lbv7 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument s :: {v:Ty_int | true} | true
 Argument _lbv7 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                       
 solver 
 (declare-sort T7828)
(declare-fun slen (T7828) Int)
(declare-fun nil () T7828)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun _lbv7 () T7828)
(declare-fun v () T7828)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= (slen v) (+ (slen _lbv7) 1)))
(assert (= var_v7 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= (slen v) (+ (slen _lbv7) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, s ), _lbv7 )
 Finding Already seen tree for apply cons  (, s ), _lbv6 )
 Typechecking apply cons  (, s ), apply cons  (, apply subs  (, int_gen ) ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, s ), _lbv6 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument s :: {v:Ty_int | true} | true
 Argument _lbv6 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                       
 solver 
 (declare-sort T7869)
(declare-fun slen (T7869) Int)
(declare-fun nil () T7869)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun _lbv6 () T7869)
(declare-fun v () T7869)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= (slen v) (+ (slen _lbv6) 1)))
(assert (= var_v7 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= (slen v) (+ (slen _lbv6) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, s ), _lbv6 )
 Finding Already seen tree for apply cons  (, int_gen ), nil )
 Found _lbv9
 Finding Already seen tree for apply cons  (, int_gen ), _lbv9 )
 Typechecking apply cons  (, int_gen ), apply cons  (, int_gen ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, int_gen ), _lbv9 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument int_gen :: {var_v1:Ty_int | true} | true
 Argument _lbv9 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                       
 solver 
 (declare-sort T7910)
(declare-fun slen (T7910) Int)
(declare-fun nil () T7910)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun _lbv9 () T7910)
(declare-fun v () T7910)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= (slen v) (+ (slen _lbv9) 1)))
(assert (= var_v7 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= (slen v) (+ (slen _lbv9) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, int_gen ), _lbv9 )
 Finding Already seen tree for apply cons  (, int_gen ), _lbv8 )
 Typechecking apply cons  (, int_gen ), apply cons  (, s ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, int_gen ), _lbv8 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument int_gen :: {var_v1:Ty_int | true} | true
 Argument _lbv8 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                       
 solver 
 (declare-sort T7951)
(declare-fun slen (T7951) Int)
(declare-fun nil () T7951)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun _lbv8 () T7951)
(declare-fun v () T7951)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= (slen v) (+ (slen _lbv8) 1)))
(assert (= var_v7 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= (slen v) (+ (slen _lbv8) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, int_gen ), _lbv8 )
 Finding Already seen tree for apply cons  (, int_gen ), _lbv7 )
 Typechecking apply cons  (, int_gen ), apply cons  (, apply subs  (, s ) ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, int_gen ), _lbv7 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument int_gen :: {var_v1:Ty_int | true} | true
 Argument _lbv7 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                       
 solver 
 (declare-sort T7992)
(declare-fun slen (T7992) Int)
(declare-fun nil () T7992)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun _lbv7 () T7992)
(declare-fun v () T7992)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= (slen v) (+ (slen _lbv7) 1)))
(assert (= var_v7 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= (slen v) (+ (slen _lbv7) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, int_gen ), _lbv7 )
 Finding Already seen tree for apply cons  (, int_gen ), _lbv6 )
 Typechecking apply cons  (, int_gen ), apply cons  (, apply subs  (, int_gen ) ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, int_gen ), _lbv6 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument int_gen :: {var_v1:Ty_int | true} | true
 Argument _lbv6 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                       
 solver 
 (declare-sort T8033)
(declare-fun slen (T8033) Int)
(declare-fun nil () T8033)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun _lbv6 () T8033)
(declare-fun v () T8033)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= (slen v) (+ (slen _lbv6) 1)))
(assert (= var_v7 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= (slen v) (+ (slen _lbv6) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, int_gen ), _lbv6 )
 Finding Already seen tree for apply cons  (, _lbv1 ), nil )
 Found _lbv6
 Finding Already seen tree for apply cons  (, _lbv1 ), _lbv9 )
 Typechecking apply cons  (, apply subs  (, int_gen ) ), apply cons  (, int_gen ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv1 ), _lbv9 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv1 :: {v:Ty_int | (v) ==((int_gen) -- (1))} | (_lbv1) ==((int_gen) -- (1))
 Argument _lbv9 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                       
 solver 
 (declare-sort T8074)
(declare-fun slen (T8074) Int)
(declare-fun nil () T8074)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun _lbv9 () T8074)
(declare-fun v () T8074)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= (slen v) (+ (slen _lbv9) 1)))
(assert (= var_v7 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= _lbv1 (- int_gen 1)))
(assert (= (slen v) (+ (slen _lbv9) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv1 ), _lbv9 )
 Finding Already seen tree for apply cons  (, _lbv1 ), _lbv8 )
 Typechecking apply cons  (, apply subs  (, int_gen ) ), apply cons  (, s ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv1 ), _lbv8 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv1 :: {v:Ty_int | (v) ==((int_gen) -- (1))} | (_lbv1) ==((int_gen) -- (1))
 Argument _lbv8 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                       
 solver 
 (declare-sort T8115)
(declare-fun slen (T8115) Int)
(declare-fun nil () T8115)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun _lbv8 () T8115)
(declare-fun v () T8115)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= (slen v) (+ (slen _lbv8) 1)))
(assert (= var_v7 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= _lbv1 (- int_gen 1)))
(assert (= (slen v) (+ (slen _lbv8) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv1 ), _lbv8 )
 Finding Already seen tree for apply cons  (, _lbv1 ), _lbv7 )
 Typechecking apply cons  (, apply subs  (, int_gen ) ), apply cons  (, apply subs  (, s ) ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv1 ), _lbv7 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv1 :: {v:Ty_int | (v) ==((int_gen) -- (1))} | (_lbv1) ==((int_gen) -- (1))
 Argument _lbv7 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                       
 solver 
 (declare-sort T8156)
(declare-fun slen (T8156) Int)
(declare-fun nil () T8156)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun _lbv7 () T8156)
(declare-fun v () T8156)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= (slen v) (+ (slen _lbv7) 1)))
(assert (= var_v7 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= _lbv1 (- int_gen 1)))
(assert (= (slen v) (+ (slen _lbv7) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv1 ), _lbv7 )
 Finding Already seen tree for apply cons  (, _lbv1 ), _lbv6 )
 Typechecking apply cons  (, apply subs  (, int_gen ) ), apply cons  (, apply subs  (, int_gen ) ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv1 ), _lbv6 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv1 :: {v:Ty_int | (v) ==((int_gen) -- (1))} | (_lbv1) ==((int_gen) -- (1))
 Argument _lbv6 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                       
 solver 
 (declare-sort T8197)
(declare-fun slen (T8197) Int)
(declare-fun nil () T8197)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun _lbv6 () T8197)
(declare-fun v () T8197)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= (slen v) (+ (slen _lbv6) 1)))
(assert (= var_v7 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= _lbv1 (- int_gen 1)))
(assert (= (slen v) (+ (slen _lbv6) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv1 ), _lbv6 )
 Finding Already seen tree for apply cons  (, _lbv0 ), nil )
 Found _lbv7
 Finding Already seen tree for apply cons  (, _lbv0 ), _lbv9 )
 Typechecking apply cons  (, apply subs  (, s ) ), apply cons  (, int_gen ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv0 ), _lbv9 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv0 :: {v:Ty_int | (v) ==((s) -- (1))} | (_lbv0) ==((s) -- (1))
 Argument _lbv9 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                       
 solver 
 (declare-sort T8238)
(declare-fun slen (T8238) Int)
(declare-fun nil () T8238)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun _lbv9 () T8238)
(declare-fun v () T8238)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= (slen v) (+ (slen _lbv9) 1)))
(assert (= var_v7 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= _lbv0 (- s 1)))
(assert (= (slen v) (+ (slen _lbv9) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv0 ), _lbv9 )
 Finding Already seen tree for apply cons  (, _lbv0 ), _lbv8 )
 Typechecking apply cons  (, apply subs  (, s ) ), apply cons  (, s ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv0 ), _lbv8 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv0 :: {v:Ty_int | (v) ==((s) -- (1))} | (_lbv0) ==((s) -- (1))
 Argument _lbv8 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                       
 solver 
 (declare-sort T8279)
(declare-fun slen (T8279) Int)
(declare-fun nil () T8279)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun _lbv8 () T8279)
(declare-fun v () T8279)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= (slen v) (+ (slen _lbv8) 1)))
(assert (= var_v7 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= _lbv0 (- s 1)))
(assert (= (slen v) (+ (slen _lbv8) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv0 ), _lbv8 )
 Finding Already seen tree for apply cons  (, _lbv0 ), _lbv7 )
 Typechecking apply cons  (, apply subs  (, s ) ), apply cons  (, apply subs  (, s ) ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv0 ), _lbv7 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv0 :: {v:Ty_int | (v) ==((s) -- (1))} | (_lbv0) ==((s) -- (1))
 Argument _lbv7 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                       
 solver 
 (declare-sort T8320)
(declare-fun slen (T8320) Int)
(declare-fun nil () T8320)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun _lbv7 () T8320)
(declare-fun v () T8320)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= (slen v) (+ (slen _lbv7) 1)))
(assert (= var_v7 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= _lbv0 (- s 1)))
(assert (= (slen v) (+ (slen _lbv7) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv0 ), _lbv7 )
 Finding Already seen tree for apply cons  (, _lbv0 ), _lbv6 )
 Typechecking apply cons  (, apply subs  (, s ) ), apply cons  (, apply subs  (, int_gen ) ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv0 ), _lbv6 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv0 :: {v:Ty_int | (v) ==((s) -- (1))} | (_lbv0) ==((s) -- (1))
 Argument _lbv6 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                       
 solver 
 (declare-sort T8361)
(declare-fun slen (T8361) Int)
(declare-fun nil () T8361)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun _lbv6 () T8361)
(declare-fun v () T8361)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= (slen v) (+ (slen _lbv6) 1)))
(assert (= var_v7 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= _lbv0 (- s 1)))
(assert (= (slen v) (+ (slen _lbv6) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv0 ), _lbv6 )
 Show :: Successfully Synthesisized False Branch 
 Show :: iSynthesize Boolean Successful _lbv3
 Show :: iSynthesize Boolean Successful {v:Ty_bool | DoubleImpl 
 v = true
  
 	 Conj <c int_gen = 0
 	 , DoubleImpl 
 v = false
  int_gen > 0 >c }
  *********************Synthesizing the True branch*******************
 Show :: True Predicate 
 	 Conj <c var_v8 = true
 	 , DoubleImpl 
 var_v8 = true
  
 	 Conj <c int_gen = 0
 	 , DoubleImpl 
 var_v8 = false
  int_gen > 0 >c  >c 
 Show ***********Calling Scalar synthesize***************
 esynthesizeScalar for {v:Ty_alphalist | (slen)(v) ==(s)}
  Enumeration for 
 spec 
 {v:Ty_alphalist | (slen)(v) ==(s)}
 
 Enumerating a Scalar Term nil
 
 Type of the Scalar Term {v:Ty_alphalist | (slen)(v) ==(0)}                                                                                                                                                                                              
 solver 
 (declare-sort T8403)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun slen (T8403) Int)
(declare-fun nil () T8403)
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= (slen nil) 0))
(assert (= var_v8 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= (slen nil) 0))
(assert (not (= (slen nil) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
 
 Timeout the subtype check T_vi <: T_goal
 >>>>>>>>>>>>>>>>>> No Scalar found in Environment, Trying esynthesizePureApp <<<<<<<<<<<<<<<<<< 
  Pure Fun Application: esynthesizePureApp 
 Show Potential Functions
  , 
 goal, 
 cons
 ############################################################
  Trying Pure Component goal
  *************** Trying Arrow Component ************goal :  Arrow ( ( s1 : {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c } ) -> {v:Ty_alphalist | (slen)(v) ==(s1)}
  *************** Synthesizing Args ei : ti for ************goal
 ##################################################################################
  Synthesizing the 1th argument for Function goal
  Trying Arguments in Scalars 
 esynthesizeScalar for {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c }
  Enumeration for 
 spec 
 {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c }
 
 Enumerating a Scalar Term int_gen
 
 Type of the Scalar Term {var_v1:Ty_int | true}                                                                                                                                                                                                   
 solver 
 (declare-sort T8443)
(declare-fun slen (T8443) Int)
(declare-fun nil () T8443)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= var_v8 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (not (> s int_gen)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
 
 Timeout the subtype check T_vi <: T_goal
 
 Enumerating a Scalar Term s
 
 Type of the Scalar Term {v:Ty_int | true}                                                                                                                                                                                                   
 solver 
 (declare-sort T8484)
(declare-fun slen (T8484) Int)
(declare-fun nil () T8484)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= var_v8 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (not (> s s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
 
 Timeout the subtype check T_vi <: T_goal
 
 Enumerating a Scalar Term _lbv0
 
 Type of the Scalar Term {v:Ty_int | (v) ==((s) -- (1))}                                                                                                                                                                                                   
 solver 
 (declare-sort T8525)
(declare-fun slen (T8525) Int)
(declare-fun nil () T8525)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun s () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(assert (= (slen nil) 0))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= _lbv0 (- s 1)))
(assert (= var_v8 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= _lbv0 (- s 1)))
(assert (not (> s _lbv0)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
 
 Timedout the subtype check T_vi <: T_goal
 
 Enumerating a Scalar Term _lbv1
 
 Type of the Scalar Term {v:Ty_int | (v) ==((int_gen) -- (1))}                                                                                                                                                                                                   
 solver 
 (declare-sort T8566)
(declare-fun slen (T8566) Int)
(declare-fun nil () T8566)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun int_gen () Int)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= _lbv1 (- int_gen 1)))
(assert (= var_v8 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= _lbv1 (- int_gen 1)))
(assert (not (> s _lbv1)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
 
 Timedout the subtype check T_vi <: T_goal
 >>>>>>>>>>>>>>>>>> No Scalar found in Environment, Trying esynthesizePureApp <<<<<<<<<<<<<<<<<< 
  Pure Fun Application: esynthesizePureApp 
 Show Potential Functions
  , 
 subs
 ############################################################
  Trying Pure Component subs
  *************** Trying Arrow Component ************subs :  Arrow ( ( n1 : {var_v0:Ty_int | true} ) -> {v:Ty_int | (v) ==((n1) -- (1))}
  *************** Synthesizing Args ei : ti for ************subs
 ##################################################################################
  Synthesizing the 1th argument for Function subs
  Trying Arguments in Scalars 
 esynthesizeScalar for {var_v0:Ty_int | true}
  Enumeration for 
 spec 
 {var_v0:Ty_int | true}
 
 Enumerating a Scalar Term int_gen
 
 Type of the Scalar Term {var_v1:Ty_int | true}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 
 Enumerating a Scalar Term s
 
 Type of the Scalar Term {v:Ty_int | true}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 
 Enumerating a Scalar Term _lbv0
 
 Type of the Scalar Term {v:Ty_int | (v) ==((s) -- (1))}
 ################################################
 Skipping Variable _lbv0 As Outer Function Call is subs
 
 Enumerating a Scalar Term _lbv1
 
 Type of the Scalar Term {v:Ty_int | (v) ==((int_gen) -- (1))}
 ################################################
 Skipping Variable _lbv1 As Outer Function Call is subs
 Show :: Found a Few Macthing Scalars 
  Next Trying Arguments of the form f (ei...) 
  Pure Fun Application: esynthesizePureApp 
 ##################################################################################
  *************** Successfully Synthesized Args ei Forall i 
 # of Possible Argument Options for subs 2
 Possible Arg Options 
 EI s
 Possible Arg Options 
 EI int_gen
 Apply Single Argument Case : f (ei) Case subs
  Case : f (ei) Case subs s
 Finding Already seen tree for apply subs  (, s )
 Found _lbv0
  Case : f (ei) Case subs int_gen
 Finding Already seen tree for apply subs  (, int_gen )
 Found _lbv1
  Next Trying Arguments of the form f (ei...) 
  Pure Fun Application: esynthesizePureApp 
 Show Potential Functions
  , 
 subs
 ############################################################
  Trying Pure Component subs
 ##################################################################################
  *************** Successfully Synthesized Args ei Forall i 
 # of Possible Argument Options for goal 2
 Possible Arg Options 
 EI _lbv1
 Possible Arg Options 
 EI _lbv0
 Apply Single Argument Case : f (ei) Case goal
  Case : f (ei) Case goal _lbv1
 Finding Already seen tree for apply goal  (, _lbv1 )
 Typechecking the Term apply goal  (, _lbv1 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv1 :: {v:Ty_int | (v) ==((int_gen) -- (1))} | (_lbv1) ==((int_gen) -- (1))                                                                                                                                                                                              
 solver 
 (declare-sort T8683)
(declare-fun slen (T8683) Int)
(declare-fun nil () T8683)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun v () T8683)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= (slen v) _lbv1))
(assert (= var_v8 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= _lbv1 (- int_gen 1)))
(assert (= (slen v) _lbv1))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply goal  (, _lbv1 )
  Case : f (ei) Case goal _lbv0
 Finding Already seen tree for apply goal  (, _lbv0 )
 Typechecking the Term apply goal  (, _lbv0 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv0 :: {v:Ty_int | (v) ==((s) -- (1))} | (_lbv0) ==((s) -- (1))                                                                                                                                                                                              
 solver 
 (declare-sort T8724)
(declare-fun slen (T8724) Int)
(declare-fun nil () T8724)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun v () T8724)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= (slen v) _lbv0))
(assert (= var_v8 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= _lbv0 (- s 1)))
(assert (= (slen v) _lbv0))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply goal  (, _lbv0 )
  ###################################################
  The Choice of Function goal Was Ill Fated Try Next Choice of function
 ############################################################
  Trying Pure Component cons
  *************** Trying Arrow Component ************cons :  Arrow ( ( x : {var_v3:Ty_int | true} ) ->  Arrow ( ( xs : {var_v4:Ty_alphalist | true} ) -> {v:Ty_alphalist | (slen)(v) ==((slen)(xs) + (1))}
  *************** Synthesizing Args ei : ti for ************cons
 ##################################################################################
  Synthesizing the 1th argument for Function cons
  Trying Arguments in Scalars 
 esynthesizeScalar for {var_v3:Ty_int | true}
  Enumeration for 
 spec 
 {var_v3:Ty_int | true}
 
 Enumerating a Scalar Term int_gen
 
 Type of the Scalar Term {var_v1:Ty_int | true}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 
 Enumerating a Scalar Term s
 
 Type of the Scalar Term {v:Ty_int | true}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 
 Enumerating a Scalar Term _lbv0
 
 Type of the Scalar Term {v:Ty_int | (v) ==((s) -- (1))}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 
 Enumerating a Scalar Term _lbv1
 
 Type of the Scalar Term {v:Ty_int | (v) ==((int_gen) -- (1))}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 Show :: Found a Few Macthing Scalars 
  Next Trying Arguments of the form f (ei...) 
  Pure Fun Application: esynthesizePureApp 
 Show Potential Functions
  , 
 subs
 ############################################################
  Trying Pure Component subs
  *************** Trying Arrow Component ************subs :  Arrow ( ( n1 : {var_v0:Ty_int | true} ) -> {v:Ty_int | (v) ==((n1) -- (1))}
  *************** Synthesizing Args ei : ti for ************subs
 ##################################################################################
  Synthesizing the 1th argument for Function subs
  Trying Arguments in Scalars 
 esynthesizeScalar for {var_v0:Ty_int | true}
  Enumeration for 
 spec 
 {var_v0:Ty_int | true}
 
 Enumerating a Scalar Term int_gen
 
 Type of the Scalar Term {var_v1:Ty_int | true}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 
 Enumerating a Scalar Term s
 
 Type of the Scalar Term {v:Ty_int | true}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 
 Enumerating a Scalar Term _lbv0
 
 Type of the Scalar Term {v:Ty_int | (v) ==((s) -- (1))}
 ################################################
 Skipping Variable _lbv0 As Outer Function Call is subs
 
 Enumerating a Scalar Term _lbv1
 
 Type of the Scalar Term {v:Ty_int | (v) ==((int_gen) -- (1))}
 ################################################
 Skipping Variable _lbv1 As Outer Function Call is subs
 Show :: Found a Few Macthing Scalars 
  Next Trying Arguments of the form f (ei...) 
  Pure Fun Application: esynthesizePureApp 
 ##################################################################################
  *************** Successfully Synthesized Args ei Forall i 
 # of Possible Argument Options for subs 2
 Possible Arg Options 
 EI s
 Possible Arg Options 
 EI int_gen
 Apply Single Argument Case : f (ei) Case subs
  Case : f (ei) Case subs s
 Finding Already seen tree for apply subs  (, s )
 Found _lbv0
  Case : f (ei) Case subs int_gen
 Finding Already seen tree for apply subs  (, int_gen )
 Found _lbv1
 ##################################################################################
  Synthesizing the 2th argument for Function cons
  Trying Arguments in Scalars 
 esynthesizeScalar for {var_v4:Ty_alphalist | true}
  Enumeration for 
 spec 
 {var_v4:Ty_alphalist | true}
 
 Enumerating a Scalar Term nil
 
 Type of the Scalar Term {v:Ty_alphalist | (slen)(v) ==(0)}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 Show :: Found a Few Macthing Scalars 
  Next Trying Arguments of the form f (ei...) 
  Pure Fun Application: esynthesizePureApp 
 Show Potential Functions
  , 
 goal, 
 cons
 ############################################################
  Trying Pure Component goal
  *************** Trying Arrow Component ************goal :  Arrow ( ( s1 : {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c } ) -> {v:Ty_alphalist | (slen)(v) ==(s1)}
  *************** Synthesizing Args ei : ti for ************goal
 ##################################################################################
  Synthesizing the 1th argument for Function goal
  Trying Arguments in Scalars 
 esynthesizeScalar for {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c }
  Enumeration for 
 spec 
 {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c }
 
 Enumerating a Scalar Term int_gen
 
 Type of the Scalar Term {var_v1:Ty_int | true}                                                                                                                                                                                                   
 solver 
 (declare-sort T9031)
(declare-fun slen (T9031) Int)
(declare-fun nil () T9031)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= var_v8 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (not (> s int_gen)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
 
 Timeout the subtype check T_vi <: T_goal
 
 Enumerating a Scalar Term s
 
 Type of the Scalar Term {v:Ty_int | true}                                                                                                                                                                                                   
 solver 
 (declare-sort T9072)
(declare-fun slen (T9072) Int)
(declare-fun nil () T9072)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= var_v8 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (not (> s s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
 
 Timeout the subtype check T_vi <: T_goal
 
 Enumerating a Scalar Term _lbv0
 
 Type of the Scalar Term {v:Ty_int | (v) ==((s) -- (1))}                                                                                                                                                                                                   
 solver 
 (declare-sort T9113)
(declare-fun slen (T9113) Int)
(declare-fun nil () T9113)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun s () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(assert (= (slen nil) 0))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= _lbv0 (- s 1)))
(assert (= var_v8 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= _lbv0 (- s 1)))
(assert (not (> s _lbv0)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
 
 Timedout the subtype check T_vi <: T_goal
 
 Enumerating a Scalar Term _lbv1
 
 Type of the Scalar Term {v:Ty_int | (v) ==((int_gen) -- (1))}                                                                                                                                                                                                   
 solver 
 (declare-sort T9154)
(declare-fun slen (T9154) Int)
(declare-fun nil () T9154)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun int_gen () Int)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= _lbv1 (- int_gen 1)))
(assert (= var_v8 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= _lbv1 (- int_gen 1)))
(assert (not (> s _lbv1)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
 
 Timedout the subtype check T_vi <: T_goal
 >>>>>>>>>>>>>>>>>> No Scalar found in Environment, Trying esynthesizePureApp <<<<<<<<<<<<<<<<<< 
  Pure Fun Application: esynthesizePureApp 
 >>>>>>>>>>>>>>>>>>  No pureApp found, Call esynthesizeConsApp <<<<<<<<<<<<<< 
  Next Trying Arguments of the form f (ei...) 
  Pure Fun Application: esynthesizePureApp 
 ##################################################################################
  *************** Synthesizing Args ei : Failed for some  arg
 ############################################################
  Trying Pure Component cons
  *************** Trying Arrow Component ************cons :  Arrow ( ( x : {var_v3:Ty_int | true} ) ->  Arrow ( ( xs : {var_v4:Ty_alphalist | true} ) -> {v:Ty_alphalist | (slen)(v) ==((slen)(xs) + (1))}
  *************** Synthesizing Args ei : ti for ************cons
 ##################################################################################
  Synthesizing the 1th argument for Function cons
  Trying Arguments in Scalars 
 esynthesizeScalar for {var_v3:Ty_int | true}
  Enumeration for 
 spec 
 {var_v3:Ty_int | true}
 
 Enumerating a Scalar Term int_gen
 
 Type of the Scalar Term {var_v1:Ty_int | true}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 
 Enumerating a Scalar Term s
 
 Type of the Scalar Term {v:Ty_int | true}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 
 Enumerating a Scalar Term _lbv0
 
 Type of the Scalar Term {v:Ty_int | (v) ==((s) -- (1))}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 
 Enumerating a Scalar Term _lbv1
 
 Type of the Scalar Term {v:Ty_int | (v) ==((int_gen) -- (1))}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 Show :: Found a Few Macthing Scalars 
  Next Trying Arguments of the form f (ei...) 
  Pure Fun Application: esynthesizePureApp 
 ##################################################################################
  Synthesizing the 2th argument for Function cons
  Trying Arguments in Scalars 
 esynthesizeScalar for {var_v4:Ty_alphalist | true}
  Enumeration for 
 spec 
 {var_v4:Ty_alphalist | true}
 
 Enumerating a Scalar Term nil
 
 Type of the Scalar Term {v:Ty_alphalist | (slen)(v) ==(0)}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 Show :: Found a Few Macthing Scalars 
  Next Trying Arguments of the form f (ei...) 
  Pure Fun Application: esynthesizePureApp 
 ##################################################################################
  *************** Successfully Synthesized Args ei Forall i 
 # of Possible Argument Options for cons 4
 Possible Arg Options 
 EI _lbv1
 EI nil
 Possible Arg Options 
 EI _lbv0
 EI nil
 Possible Arg Options 
 EI s
 EI nil
 Possible Arg Options 
 EI int_gen
 EI nil
 Show f (ei, e2, ....en) Case
 Finding Already seen tree for apply cons  (, _lbv1 ), nil )
 Found _lbv6
 Finding Already seen tree for apply cons  (, _lbv0 ), nil )
 Found _lbv7
 Finding Already seen tree for apply cons  (, s ), nil )
 Found _lbv8
 Finding Already seen tree for apply cons  (, int_gen ), nil )
 Found _lbv9
 ##################################################################################
  *************** Successfully Synthesized Args ei Forall i 
 # of Possible Argument Options for cons 30
 Possible Arg Options 
 EI _lbv1
 EI nil
 Possible Arg Options 
 EI _lbv1
 EI _lbv9
 Possible Arg Options 
 EI _lbv1
 EI _lbv8
 Possible Arg Options 
 EI _lbv1
 EI _lbv7
 Possible Arg Options 
 EI _lbv1
 EI _lbv6
 Possible Arg Options 
 EI _lbv0
 EI nil
 Possible Arg Options 
 EI _lbv0
 EI _lbv9
 Possible Arg Options 
 EI _lbv0
 EI _lbv8
 Possible Arg Options 
 EI _lbv0
 EI _lbv7
 Possible Arg Options 
 EI _lbv0
 EI _lbv6
 Possible Arg Options 
 EI s
 EI nil
 Possible Arg Options 
 EI s
 EI _lbv9
 Possible Arg Options 
 EI s
 EI _lbv8
 Possible Arg Options 
 EI s
 EI _lbv7
 Possible Arg Options 
 EI s
 EI _lbv6
 Possible Arg Options 
 EI int_gen
 EI nil
 Possible Arg Options 
 EI int_gen
 EI _lbv9
 Possible Arg Options 
 EI int_gen
 EI _lbv8
 Possible Arg Options 
 EI int_gen
 EI _lbv7
 Possible Arg Options 
 EI int_gen
 EI _lbv6
 Possible Arg Options 
 EI _lbv1
 EI nil
 Possible Arg Options 
 EI _lbv1
 EI _lbv9
 Possible Arg Options 
 EI _lbv1
 EI _lbv8
 Possible Arg Options 
 EI _lbv1
 EI _lbv7
 Possible Arg Options 
 EI _lbv1
 EI _lbv6
 Possible Arg Options 
 EI _lbv0
 EI nil
 Possible Arg Options 
 EI _lbv0
 EI _lbv9
 Possible Arg Options 
 EI _lbv0
 EI _lbv8
 Possible Arg Options 
 EI _lbv0
 EI _lbv7
 Possible Arg Options 
 EI _lbv0
 EI _lbv6
 Show f (ei, e2, ....en) Case
 Finding Already seen tree for apply cons  (, _lbv1 ), nil )
 Found _lbv6
 Finding Already seen tree for apply cons  (, _lbv1 ), _lbv9 )
 Typechecking apply cons  (, apply subs  (, int_gen ) ), apply cons  (, int_gen ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv1 ), _lbv9 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv1 :: {v:Ty_int | (v) ==((int_gen) -- (1))} | (_lbv1) ==((int_gen) -- (1))
 Argument _lbv9 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                                              
 solver 
 (declare-sort T9385)
(declare-fun slen (T9385) Int)
(declare-fun nil () T9385)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun _lbv9 () T9385)
(declare-fun v () T9385)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= (slen v) (+ (slen _lbv9) 1)))
(assert (= var_v8 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= _lbv1 (- int_gen 1)))
(assert (= (slen v) (+ (slen _lbv9) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv1 ), _lbv9 )
 Finding Already seen tree for apply cons  (, _lbv1 ), _lbv8 )
 Typechecking apply cons  (, apply subs  (, int_gen ) ), apply cons  (, s ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv1 ), _lbv8 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv1 :: {v:Ty_int | (v) ==((int_gen) -- (1))} | (_lbv1) ==((int_gen) -- (1))
 Argument _lbv8 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                                              
 solver 
 (declare-sort T9426)
(declare-fun slen (T9426) Int)
(declare-fun nil () T9426)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun _lbv8 () T9426)
(declare-fun v () T9426)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= (slen v) (+ (slen _lbv8) 1)))
(assert (= var_v8 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= _lbv1 (- int_gen 1)))
(assert (= (slen v) (+ (slen _lbv8) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv1 ), _lbv8 )
 Finding Already seen tree for apply cons  (, _lbv1 ), _lbv7 )
 Typechecking apply cons  (, apply subs  (, int_gen ) ), apply cons  (, apply subs  (, s ) ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv1 ), _lbv7 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv1 :: {v:Ty_int | (v) ==((int_gen) -- (1))} | (_lbv1) ==((int_gen) -- (1))
 Argument _lbv7 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                                              
 solver 
 (declare-sort T9467)
(declare-fun slen (T9467) Int)
(declare-fun nil () T9467)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun _lbv7 () T9467)
(declare-fun v () T9467)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= (slen v) (+ (slen _lbv7) 1)))
(assert (= var_v8 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= _lbv1 (- int_gen 1)))
(assert (= (slen v) (+ (slen _lbv7) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv1 ), _lbv7 )
 Finding Already seen tree for apply cons  (, _lbv1 ), _lbv6 )
 Typechecking apply cons  (, apply subs  (, int_gen ) ), apply cons  (, apply subs  (, int_gen ) ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv1 ), _lbv6 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv1 :: {v:Ty_int | (v) ==((int_gen) -- (1))} | (_lbv1) ==((int_gen) -- (1))
 Argument _lbv6 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                                              
 solver 
 (declare-sort T9508)
(declare-fun slen (T9508) Int)
(declare-fun nil () T9508)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun _lbv6 () T9508)
(declare-fun v () T9508)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= (slen v) (+ (slen _lbv6) 1)))
(assert (= var_v8 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= _lbv1 (- int_gen 1)))
(assert (= (slen v) (+ (slen _lbv6) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv1 ), _lbv6 )
 Finding Already seen tree for apply cons  (, _lbv0 ), nil )
 Found _lbv7
 Finding Already seen tree for apply cons  (, _lbv0 ), _lbv9 )
 Typechecking apply cons  (, apply subs  (, s ) ), apply cons  (, int_gen ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv0 ), _lbv9 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv0 :: {v:Ty_int | (v) ==((s) -- (1))} | (_lbv0) ==((s) -- (1))
 Argument _lbv9 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                                              
 solver 
 (declare-sort T9549)
(declare-fun slen (T9549) Int)
(declare-fun nil () T9549)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun _lbv9 () T9549)
(declare-fun v () T9549)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= (slen v) (+ (slen _lbv9) 1)))
(assert (= var_v8 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= _lbv0 (- s 1)))
(assert (= (slen v) (+ (slen _lbv9) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv0 ), _lbv9 )
 Finding Already seen tree for apply cons  (, _lbv0 ), _lbv8 )
 Typechecking apply cons  (, apply subs  (, s ) ), apply cons  (, s ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv0 ), _lbv8 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv0 :: {v:Ty_int | (v) ==((s) -- (1))} | (_lbv0) ==((s) -- (1))
 Argument _lbv8 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                                              
 solver 
 (declare-sort T9590)
(declare-fun slen (T9590) Int)
(declare-fun nil () T9590)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun _lbv8 () T9590)
(declare-fun v () T9590)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= (slen v) (+ (slen _lbv8) 1)))
(assert (= var_v8 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= _lbv0 (- s 1)))
(assert (= (slen v) (+ (slen _lbv8) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv0 ), _lbv8 )
 Finding Already seen tree for apply cons  (, _lbv0 ), _lbv7 )
 Typechecking apply cons  (, apply subs  (, s ) ), apply cons  (, apply subs  (, s ) ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv0 ), _lbv7 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv0 :: {v:Ty_int | (v) ==((s) -- (1))} | (_lbv0) ==((s) -- (1))
 Argument _lbv7 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                                              
 solver 
 (declare-sort T9631)
(declare-fun slen (T9631) Int)
(declare-fun nil () T9631)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun _lbv7 () T9631)
(declare-fun v () T9631)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= (slen v) (+ (slen _lbv7) 1)))
(assert (= var_v8 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= _lbv0 (- s 1)))
(assert (= (slen v) (+ (slen _lbv7) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv0 ), _lbv7 )
 Finding Already seen tree for apply cons  (, _lbv0 ), _lbv6 )
 Typechecking apply cons  (, apply subs  (, s ) ), apply cons  (, apply subs  (, int_gen ) ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv0 ), _lbv6 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv0 :: {v:Ty_int | (v) ==((s) -- (1))} | (_lbv0) ==((s) -- (1))
 Argument _lbv6 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                                              
 solver 
 (declare-sort T9672)
(declare-fun slen (T9672) Int)
(declare-fun nil () T9672)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun _lbv6 () T9672)
(declare-fun v () T9672)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= (slen v) (+ (slen _lbv6) 1)))
(assert (= var_v8 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= _lbv0 (- s 1)))
(assert (= (slen v) (+ (slen _lbv6) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv0 ), _lbv6 )
 Finding Already seen tree for apply cons  (, s ), nil )
 Found _lbv8
 Finding Already seen tree for apply cons  (, s ), _lbv9 )
 Typechecking apply cons  (, s ), apply cons  (, int_gen ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, s ), _lbv9 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument s :: {v:Ty_int | true} | true
 Argument _lbv9 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                                              
 solver 
 (declare-sort T9713)
(declare-fun slen (T9713) Int)
(declare-fun nil () T9713)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun _lbv9 () T9713)
(declare-fun v () T9713)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= (slen v) (+ (slen _lbv9) 1)))
(assert (= var_v8 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= (slen v) (+ (slen _lbv9) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, s ), _lbv9 )
 Finding Already seen tree for apply cons  (, s ), _lbv8 )
 Typechecking apply cons  (, s ), apply cons  (, s ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, s ), _lbv8 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument s :: {v:Ty_int | true} | true
 Argument _lbv8 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                                              
 solver 
 (declare-sort T9754)
(declare-fun slen (T9754) Int)
(declare-fun nil () T9754)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun _lbv8 () T9754)
(declare-fun v () T9754)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= (slen v) (+ (slen _lbv8) 1)))
(assert (= var_v8 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= (slen v) (+ (slen _lbv8) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, s ), _lbv8 )
 Finding Already seen tree for apply cons  (, s ), _lbv7 )
 Typechecking apply cons  (, s ), apply cons  (, apply subs  (, s ) ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, s ), _lbv7 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument s :: {v:Ty_int | true} | true
 Argument _lbv7 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                                              
 solver 
 (declare-sort T9795)
(declare-fun slen (T9795) Int)
(declare-fun nil () T9795)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun _lbv7 () T9795)
(declare-fun v () T9795)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= (slen v) (+ (slen _lbv7) 1)))
(assert (= var_v8 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= (slen v) (+ (slen _lbv7) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, s ), _lbv7 )
 Finding Already seen tree for apply cons  (, s ), _lbv6 )
 Typechecking apply cons  (, s ), apply cons  (, apply subs  (, int_gen ) ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, s ), _lbv6 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument s :: {v:Ty_int | true} | true
 Argument _lbv6 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                                              
 solver 
 (declare-sort T9836)
(declare-fun slen (T9836) Int)
(declare-fun nil () T9836)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun _lbv6 () T9836)
(declare-fun v () T9836)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= (slen v) (+ (slen _lbv6) 1)))
(assert (= var_v8 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= (slen v) (+ (slen _lbv6) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, s ), _lbv6 )
 Finding Already seen tree for apply cons  (, int_gen ), nil )
 Found _lbv9
 Finding Already seen tree for apply cons  (, int_gen ), _lbv9 )
 Typechecking apply cons  (, int_gen ), apply cons  (, int_gen ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, int_gen ), _lbv9 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument int_gen :: {var_v1:Ty_int | true} | true
 Argument _lbv9 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                                              
 solver 
 (declare-sort T9877)
(declare-fun slen (T9877) Int)
(declare-fun nil () T9877)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun _lbv9 () T9877)
(declare-fun v () T9877)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= (slen v) (+ (slen _lbv9) 1)))
(assert (= var_v8 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= (slen v) (+ (slen _lbv9) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, int_gen ), _lbv9 )
 Finding Already seen tree for apply cons  (, int_gen ), _lbv8 )
 Typechecking apply cons  (, int_gen ), apply cons  (, s ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, int_gen ), _lbv8 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument int_gen :: {var_v1:Ty_int | true} | true
 Argument _lbv8 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                                              
 solver 
 (declare-sort T9918)
(declare-fun slen (T9918) Int)
(declare-fun nil () T9918)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun _lbv8 () T9918)
(declare-fun v () T9918)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= (slen v) (+ (slen _lbv8) 1)))
(assert (= var_v8 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= (slen v) (+ (slen _lbv8) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, int_gen ), _lbv8 )
 Finding Already seen tree for apply cons  (, int_gen ), _lbv7 )
 Typechecking apply cons  (, int_gen ), apply cons  (, apply subs  (, s ) ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, int_gen ), _lbv7 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument int_gen :: {var_v1:Ty_int | true} | true
 Argument _lbv7 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                                              
 solver 
 (declare-sort T9959)
(declare-fun slen (T9959) Int)
(declare-fun nil () T9959)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun _lbv7 () T9959)
(declare-fun v () T9959)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= (slen v) (+ (slen _lbv7) 1)))
(assert (= var_v8 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= (slen v) (+ (slen _lbv7) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, int_gen ), _lbv7 )
 Finding Already seen tree for apply cons  (, int_gen ), _lbv6 )
 Typechecking apply cons  (, int_gen ), apply cons  (, apply subs  (, int_gen ) ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, int_gen ), _lbv6 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument int_gen :: {var_v1:Ty_int | true} | true
 Argument _lbv6 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                                              
 solver 
 (declare-sort T10000)
(declare-fun slen (T10000) Int)
(declare-fun nil () T10000)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun _lbv6 () T10000)
(declare-fun v () T10000)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= (slen v) (+ (slen _lbv6) 1)))
(assert (= var_v8 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= (slen v) (+ (slen _lbv6) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, int_gen ), _lbv6 )
 Finding Already seen tree for apply cons  (, _lbv1 ), nil )
 Found _lbv6
 Finding Already seen tree for apply cons  (, _lbv1 ), _lbv9 )
 Typechecking apply cons  (, apply subs  (, int_gen ) ), apply cons  (, int_gen ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv1 ), _lbv9 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv1 :: {v:Ty_int | (v) ==((int_gen) -- (1))} | (_lbv1) ==((int_gen) -- (1))
 Argument _lbv9 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                                              
 solver 
 (declare-sort T10041)
(declare-fun slen (T10041) Int)
(declare-fun nil () T10041)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun _lbv9 () T10041)
(declare-fun v () T10041)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= (slen v) (+ (slen _lbv9) 1)))
(assert (= var_v8 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= _lbv1 (- int_gen 1)))
(assert (= (slen v) (+ (slen _lbv9) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv1 ), _lbv9 )
 Finding Already seen tree for apply cons  (, _lbv1 ), _lbv8 )
 Typechecking apply cons  (, apply subs  (, int_gen ) ), apply cons  (, s ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv1 ), _lbv8 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv1 :: {v:Ty_int | (v) ==((int_gen) -- (1))} | (_lbv1) ==((int_gen) -- (1))
 Argument _lbv8 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                                              
 solver 
 (declare-sort T10082)
(declare-fun slen (T10082) Int)
(declare-fun nil () T10082)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun _lbv8 () T10082)
(declare-fun v () T10082)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= (slen v) (+ (slen _lbv8) 1)))
(assert (= var_v8 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= _lbv1 (- int_gen 1)))
(assert (= (slen v) (+ (slen _lbv8) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv1 ), _lbv8 )
 Finding Already seen tree for apply cons  (, _lbv1 ), _lbv7 )
 Typechecking apply cons  (, apply subs  (, int_gen ) ), apply cons  (, apply subs  (, s ) ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv1 ), _lbv7 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv1 :: {v:Ty_int | (v) ==((int_gen) -- (1))} | (_lbv1) ==((int_gen) -- (1))
 Argument _lbv7 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                                              
 solver 
 (declare-sort T10123)
(declare-fun slen (T10123) Int)
(declare-fun nil () T10123)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun _lbv7 () T10123)
(declare-fun v () T10123)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= (slen v) (+ (slen _lbv7) 1)))
(assert (= var_v8 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= _lbv1 (- int_gen 1)))
(assert (= (slen v) (+ (slen _lbv7) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv1 ), _lbv7 )
 Finding Already seen tree for apply cons  (, _lbv1 ), _lbv6 )
 Typechecking apply cons  (, apply subs  (, int_gen ) ), apply cons  (, apply subs  (, int_gen ) ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv1 ), _lbv6 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv1 :: {v:Ty_int | (v) ==((int_gen) -- (1))} | (_lbv1) ==((int_gen) -- (1))
 Argument _lbv6 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                                              
 solver 
 (declare-sort T10164)
(declare-fun slen (T10164) Int)
(declare-fun nil () T10164)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun _lbv6 () T10164)
(declare-fun v () T10164)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= (slen v) (+ (slen _lbv6) 1)))
(assert (= var_v8 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= _lbv1 (- int_gen 1)))
(assert (= (slen v) (+ (slen _lbv6) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv1 ), _lbv6 )
 Finding Already seen tree for apply cons  (, _lbv0 ), nil )
 Found _lbv7
 Finding Already seen tree for apply cons  (, _lbv0 ), _lbv9 )
 Typechecking apply cons  (, apply subs  (, s ) ), apply cons  (, int_gen ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv0 ), _lbv9 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv0 :: {v:Ty_int | (v) ==((s) -- (1))} | (_lbv0) ==((s) -- (1))
 Argument _lbv9 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                                              
 solver 
 (declare-sort T10205)
(declare-fun slen (T10205) Int)
(declare-fun nil () T10205)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun _lbv9 () T10205)
(declare-fun v () T10205)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= (slen v) (+ (slen _lbv9) 1)))
(assert (= var_v8 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= _lbv0 (- s 1)))
(assert (= (slen v) (+ (slen _lbv9) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv0 ), _lbv9 )
 Finding Already seen tree for apply cons  (, _lbv0 ), _lbv8 )
 Typechecking apply cons  (, apply subs  (, s ) ), apply cons  (, s ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv0 ), _lbv8 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv0 :: {v:Ty_int | (v) ==((s) -- (1))} | (_lbv0) ==((s) -- (1))
 Argument _lbv8 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                                              
 solver 
 (declare-sort T10246)
(declare-fun slen (T10246) Int)
(declare-fun nil () T10246)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun _lbv8 () T10246)
(declare-fun v () T10246)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= (slen v) (+ (slen _lbv8) 1)))
(assert (= var_v8 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= _lbv0 (- s 1)))
(assert (= (slen v) (+ (slen _lbv8) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv0 ), _lbv8 )
 Finding Already seen tree for apply cons  (, _lbv0 ), _lbv7 )
 Typechecking apply cons  (, apply subs  (, s ) ), apply cons  (, apply subs  (, s ) ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv0 ), _lbv7 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv0 :: {v:Ty_int | (v) ==((s) -- (1))} | (_lbv0) ==((s) -- (1))
 Argument _lbv7 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                                              
 solver 
 (declare-sort T10287)
(declare-fun slen (T10287) Int)
(declare-fun nil () T10287)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun _lbv7 () T10287)
(declare-fun v () T10287)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= (slen v) (+ (slen _lbv7) 1)))
(assert (= var_v8 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= _lbv0 (- s 1)))
(assert (= (slen v) (+ (slen _lbv7) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv0 ), _lbv7 )
 Finding Already seen tree for apply cons  (, _lbv0 ), _lbv6 )
 Typechecking apply cons  (, apply subs  (, s ) ), apply cons  (, apply subs  (, int_gen ) ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv0 ), _lbv6 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv0 :: {v:Ty_int | (v) ==((s) -- (1))} | (_lbv0) ==((s) -- (1))
 Argument _lbv6 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                                              
 solver 
 (declare-sort T10328)
(declare-fun slen (T10328) Int)
(declare-fun nil () T10328)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun _lbv6 () T10328)
(declare-fun v () T10328)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= (slen v) (+ (slen _lbv6) 1)))
(assert (= var_v8 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= _lbv0 (- s 1)))
(assert (= (slen v) (+ (slen _lbv6) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv0 ), _lbv6 )
 True Branch :: Successfully Synthesisized
 *********************************************
 if apply sizecheck  (, int_gen )
 	 then 
 ***********
 apply cons  (, apply subs  (, s ) ), nil )
 ***********
 apply cons  (, apply subs  (, int_gen ) ), nil )
 ***********
 apply cons  (, int_gen ), nil )
 ***********
 apply cons  (, s ), nil )
 ***********
 apply cons  (, apply subs  (, s ) ), nil )
 ***********
 apply cons  (, apply subs  (, int_gen ) ), nil )
 ************If Else False Branch**************
 *********************************************
 False Branch :: Trying False Branch
 Show :: Synthesizing the false branch
 Show :: False Predicate 
 	 Conj <c var_v8 = false
 	 , DoubleImpl 
 var_v8 = true
  
 	 Conj <c int_gen = 0
 	 , DoubleImpl 
 var_v8 = false
  int_gen > 0 >c  >c 
 Show ***********Calling Scalar synthesize***************
 esynthesizeScalar for {v:Ty_alphalist | (slen)(v) ==(s)}
  Enumeration for 
 spec 
 {v:Ty_alphalist | (slen)(v) ==(s)}
 
 Enumerating a Scalar Term nil
 
 Type of the Scalar Term {v:Ty_alphalist | (slen)(v) ==(0)}                                                                                                                                                                                              
 solver 
 (declare-sort T10370)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun slen (T10370) Int)
(declare-fun nil () T10370)
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= (slen nil) 0))
(assert (= var_v8 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= (slen nil) 0))
(assert (not (= (slen nil) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
 
 Timeout the subtype check T_vi <: T_goal
 >>>>>>>>>>>>>>>>>> No Scalar found in Environment, Trying esynthesizePureApp <<<<<<<<<<<<<<<<<< 
  Pure Fun Application: esynthesizePureApp 
 Show Potential Functions
  , 
 goal, 
 cons
 ############################################################
  Trying Pure Component goal
  *************** Trying Arrow Component ************goal :  Arrow ( ( s1 : {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c } ) -> {v:Ty_alphalist | (slen)(v) ==(s1)}
  *************** Synthesizing Args ei : ti for ************goal
 ##################################################################################
  Synthesizing the 1th argument for Function goal
  Trying Arguments in Scalars 
 esynthesizeScalar for {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c }
  Enumeration for 
 spec 
 {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c }
 
 Enumerating a Scalar Term int_gen
 
 Type of the Scalar Term {var_v1:Ty_int | true}                                                                                                                                                                                                   
 solver 
 (declare-sort T10410)
(declare-fun slen (T10410) Int)
(declare-fun nil () T10410)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= var_v8 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (not (> s int_gen)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
 
 Timeout the subtype check T_vi <: T_goal
 
 Enumerating a Scalar Term s
 
 Type of the Scalar Term {v:Ty_int | true}                                                                                                                                                                                                   
 solver 
 (declare-sort T10451)
(declare-fun slen (T10451) Int)
(declare-fun nil () T10451)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= var_v8 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (not (> s s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
 
 Timeout the subtype check T_vi <: T_goal
 
 Enumerating a Scalar Term _lbv0
 
 Type of the Scalar Term {v:Ty_int | (v) ==((s) -- (1))}                                                                                                                                                                                                   
 solver 
 (declare-sort T10492)
(declare-fun slen (T10492) Int)
(declare-fun nil () T10492)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun s () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(assert (= (slen nil) 0))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= _lbv0 (- s 1)))
(assert (= var_v8 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= _lbv0 (- s 1)))
(assert (not (> s _lbv0)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
 
 Timedout the subtype check T_vi <: T_goal
 
 Enumerating a Scalar Term _lbv1
 
 Type of the Scalar Term {v:Ty_int | (v) ==((int_gen) -- (1))}                                                                                                                                                                                                   
 solver 
 (declare-sort T10533)
(declare-fun slen (T10533) Int)
(declare-fun nil () T10533)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun int_gen () Int)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= _lbv1 (- int_gen 1)))
(assert (= var_v8 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= _lbv1 (- int_gen 1)))
(assert (not (> s _lbv1)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
 
 Timedout the subtype check T_vi <: T_goal
 >>>>>>>>>>>>>>>>>> No Scalar found in Environment, Trying esynthesizePureApp <<<<<<<<<<<<<<<<<< 
  Pure Fun Application: esynthesizePureApp 
 Show Potential Functions
  , 
 subs
 ############################################################
  Trying Pure Component subs
  *************** Trying Arrow Component ************subs :  Arrow ( ( n1 : {var_v0:Ty_int | true} ) -> {v:Ty_int | (v) ==((n1) -- (1))}
  *************** Synthesizing Args ei : ti for ************subs
 ##################################################################################
  Synthesizing the 1th argument for Function subs
  Trying Arguments in Scalars 
 esynthesizeScalar for {var_v0:Ty_int | true}
  Enumeration for 
 spec 
 {var_v0:Ty_int | true}
 
 Enumerating a Scalar Term int_gen
 
 Type of the Scalar Term {var_v1:Ty_int | true}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 
 Enumerating a Scalar Term s
 
 Type of the Scalar Term {v:Ty_int | true}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 
 Enumerating a Scalar Term _lbv0
 
 Type of the Scalar Term {v:Ty_int | (v) ==((s) -- (1))}
 ################################################
 Skipping Variable _lbv0 As Outer Function Call is subs
 
 Enumerating a Scalar Term _lbv1
 
 Type of the Scalar Term {v:Ty_int | (v) ==((int_gen) -- (1))}
 ################################################
 Skipping Variable _lbv1 As Outer Function Call is subs
 Show :: Found a Few Macthing Scalars 
  Next Trying Arguments of the form f (ei...) 
  Pure Fun Application: esynthesizePureApp 
 ##################################################################################
  *************** Successfully Synthesized Args ei Forall i 
 # of Possible Argument Options for subs 2
 Possible Arg Options 
 EI s
 Possible Arg Options 
 EI int_gen
 Apply Single Argument Case : f (ei) Case subs
  Case : f (ei) Case subs s
 Finding Already seen tree for apply subs  (, s )
 Found _lbv0
  Case : f (ei) Case subs int_gen
 Finding Already seen tree for apply subs  (, int_gen )
 Found _lbv1
  Next Trying Arguments of the form f (ei...) 
  Pure Fun Application: esynthesizePureApp 
 Show Potential Functions
  , 
 subs
 ############################################################
  Trying Pure Component subs
 ##################################################################################
  *************** Successfully Synthesized Args ei Forall i 
 # of Possible Argument Options for goal 2
 Possible Arg Options 
 EI _lbv1
 Possible Arg Options 
 EI _lbv0
 Apply Single Argument Case : f (ei) Case goal
  Case : f (ei) Case goal _lbv1
 Finding Already seen tree for apply goal  (, _lbv1 )
 Typechecking the Term apply goal  (, _lbv1 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv1 :: {v:Ty_int | (v) ==((int_gen) -- (1))} | (_lbv1) ==((int_gen) -- (1))                                                                                                                                                                                              
 solver 
 (declare-sort T10650)
(declare-fun slen (T10650) Int)
(declare-fun nil () T10650)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun v () T10650)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= (slen v) _lbv1))
(assert (= var_v8 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= _lbv1 (- int_gen 1)))
(assert (= (slen v) _lbv1))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply goal  (, _lbv1 )
  Case : f (ei) Case goal _lbv0
 Finding Already seen tree for apply goal  (, _lbv0 )
 Typechecking the Term apply goal  (, _lbv0 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv0 :: {v:Ty_int | (v) ==((s) -- (1))} | (_lbv0) ==((s) -- (1))                                                                                                                                                                                              
 solver 
 (declare-sort T10691)
(declare-fun slen (T10691) Int)
(declare-fun nil () T10691)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun v () T10691)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= (slen v) _lbv0))
(assert (= var_v8 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= _lbv0 (- s 1)))
(assert (= (slen v) _lbv0))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply goal  (, _lbv0 )
  ###################################################
  The Choice of Function goal Was Ill Fated Try Next Choice of function
 ############################################################
  Trying Pure Component cons
  *************** Trying Arrow Component ************cons :  Arrow ( ( x : {var_v3:Ty_int | true} ) ->  Arrow ( ( xs : {var_v4:Ty_alphalist | true} ) -> {v:Ty_alphalist | (slen)(v) ==((slen)(xs) + (1))}
  *************** Synthesizing Args ei : ti for ************cons
 ##################################################################################
  Synthesizing the 1th argument for Function cons
  Trying Arguments in Scalars 
 esynthesizeScalar for {var_v3:Ty_int | true}
  Enumeration for 
 spec 
 {var_v3:Ty_int | true}
 
 Enumerating a Scalar Term int_gen
 
 Type of the Scalar Term {var_v1:Ty_int | true}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 
 Enumerating a Scalar Term s
 
 Type of the Scalar Term {v:Ty_int | true}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 
 Enumerating a Scalar Term _lbv0
 
 Type of the Scalar Term {v:Ty_int | (v) ==((s) -- (1))}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 
 Enumerating a Scalar Term _lbv1
 
 Type of the Scalar Term {v:Ty_int | (v) ==((int_gen) -- (1))}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 Show :: Found a Few Macthing Scalars 
  Next Trying Arguments of the form f (ei...) 
  Pure Fun Application: esynthesizePureApp 
 Show Potential Functions
  , 
 subs
 ############################################################
  Trying Pure Component subs
  *************** Trying Arrow Component ************subs :  Arrow ( ( n1 : {var_v0:Ty_int | true} ) -> {v:Ty_int | (v) ==((n1) -- (1))}
  *************** Synthesizing Args ei : ti for ************subs
 ##################################################################################
  Synthesizing the 1th argument for Function subs
  Trying Arguments in Scalars 
 esynthesizeScalar for {var_v0:Ty_int | true}
  Enumeration for 
 spec 
 {var_v0:Ty_int | true}
 
 Enumerating a Scalar Term int_gen
 
 Type of the Scalar Term {var_v1:Ty_int | true}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 
 Enumerating a Scalar Term s
 
 Type of the Scalar Term {v:Ty_int | true}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 
 Enumerating a Scalar Term _lbv0
 
 Type of the Scalar Term {v:Ty_int | (v) ==((s) -- (1))}
 ################################################
 Skipping Variable _lbv0 As Outer Function Call is subs
 
 Enumerating a Scalar Term _lbv1
 
 Type of the Scalar Term {v:Ty_int | (v) ==((int_gen) -- (1))}
 ################################################
 Skipping Variable _lbv1 As Outer Function Call is subs
 Show :: Found a Few Macthing Scalars 
  Next Trying Arguments of the form f (ei...) 
  Pure Fun Application: esynthesizePureApp 
 ##################################################################################
  *************** Successfully Synthesized Args ei Forall i 
 # of Possible Argument Options for subs 2
 Possible Arg Options 
 EI s
 Possible Arg Options 
 EI int_gen
 Apply Single Argument Case : f (ei) Case subs
  Case : f (ei) Case subs s
 Finding Already seen tree for apply subs  (, s )
 Found _lbv0
  Case : f (ei) Case subs int_gen
 Finding Already seen tree for apply subs  (, int_gen )
 Found _lbv1
 ##################################################################################
  Synthesizing the 2th argument for Function cons
  Trying Arguments in Scalars 
 esynthesizeScalar for {var_v4:Ty_alphalist | true}
  Enumeration for 
 spec 
 {var_v4:Ty_alphalist | true}
 
 Enumerating a Scalar Term nil
 
 Type of the Scalar Term {v:Ty_alphalist | (slen)(v) ==(0)}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 Show :: Found a Few Macthing Scalars 
  Next Trying Arguments of the form f (ei...) 
  Pure Fun Application: esynthesizePureApp 
 Show Potential Functions
  , 
 goal, 
 cons
 ############################################################
  Trying Pure Component goal
  *************** Trying Arrow Component ************goal :  Arrow ( ( s1 : {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c } ) -> {v:Ty_alphalist | (slen)(v) ==(s1)}
  *************** Synthesizing Args ei : ti for ************goal
 ##################################################################################
  Synthesizing the 1th argument for Function goal
  Trying Arguments in Scalars 
 esynthesizeScalar for {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c }
  Enumeration for 
 spec 
 {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c }
 
 Enumerating a Scalar Term int_gen
 
 Type of the Scalar Term {var_v1:Ty_int | true}                                                                                                                                                                                                   
 solver 
 (declare-sort T10998)
(declare-fun slen (T10998) Int)
(declare-fun nil () T10998)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= var_v8 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (not (> s int_gen)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
 
 Timeout the subtype check T_vi <: T_goal
 
 Enumerating a Scalar Term s
 
 Type of the Scalar Term {v:Ty_int | true}                                                                                                                                                                                                   
 solver 
 (declare-sort T11039)
(declare-fun slen (T11039) Int)
(declare-fun nil () T11039)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= var_v8 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (not (> s s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
 
 Timeout the subtype check T_vi <: T_goal
 
 Enumerating a Scalar Term _lbv0
 
 Type of the Scalar Term {v:Ty_int | (v) ==((s) -- (1))}                                                                                                                                                                                                   
 solver 
 (declare-sort T11080)
(declare-fun slen (T11080) Int)
(declare-fun nil () T11080)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun s () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(assert (= (slen nil) 0))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= _lbv0 (- s 1)))
(assert (= var_v8 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= _lbv0 (- s 1)))
(assert (not (> s _lbv0)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
 
 Timedout the subtype check T_vi <: T_goal
 
 Enumerating a Scalar Term _lbv1
 
 Type of the Scalar Term {v:Ty_int | (v) ==((int_gen) -- (1))}                                                                                                                                                                                                   
 solver 
 (declare-sort T11121)
(declare-fun slen (T11121) Int)
(declare-fun nil () T11121)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun int_gen () Int)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= _lbv1 (- int_gen 1)))
(assert (= var_v8 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= _lbv1 (- int_gen 1)))
(assert (not (> s _lbv1)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
 
 Timedout the subtype check T_vi <: T_goal
 >>>>>>>>>>>>>>>>>> No Scalar found in Environment, Trying esynthesizePureApp <<<<<<<<<<<<<<<<<< 
  Pure Fun Application: esynthesizePureApp 
 >>>>>>>>>>>>>>>>>>  No pureApp found, Call esynthesizeConsApp <<<<<<<<<<<<<< 
  Next Trying Arguments of the form f (ei...) 
  Pure Fun Application: esynthesizePureApp 
 ##################################################################################
  *************** Synthesizing Args ei : Failed for some  arg
 ############################################################
  Trying Pure Component cons
  *************** Trying Arrow Component ************cons :  Arrow ( ( x : {var_v3:Ty_int | true} ) ->  Arrow ( ( xs : {var_v4:Ty_alphalist | true} ) -> {v:Ty_alphalist | (slen)(v) ==((slen)(xs) + (1))}
  *************** Synthesizing Args ei : ti for ************cons
 ##################################################################################
  Synthesizing the 1th argument for Function cons
  Trying Arguments in Scalars 
 esynthesizeScalar for {var_v3:Ty_int | true}
  Enumeration for 
 spec 
 {var_v3:Ty_int | true}
 
 Enumerating a Scalar Term int_gen
 
 Type of the Scalar Term {var_v1:Ty_int | true}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 
 Enumerating a Scalar Term s
 
 Type of the Scalar Term {v:Ty_int | true}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 
 Enumerating a Scalar Term _lbv0
 
 Type of the Scalar Term {v:Ty_int | (v) ==((s) -- (1))}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 
 Enumerating a Scalar Term _lbv1
 
 Type of the Scalar Term {v:Ty_int | (v) ==((int_gen) -- (1))}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 Show :: Found a Few Macthing Scalars 
  Next Trying Arguments of the form f (ei...) 
  Pure Fun Application: esynthesizePureApp 
 ##################################################################################
  Synthesizing the 2th argument for Function cons
  Trying Arguments in Scalars 
 esynthesizeScalar for {var_v4:Ty_alphalist | true}
  Enumeration for 
 spec 
 {var_v4:Ty_alphalist | true}
 
 Enumerating a Scalar Term nil
 
 Type of the Scalar Term {v:Ty_alphalist | (slen)(v) ==(0)}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 Show :: Found a Few Macthing Scalars 
  Next Trying Arguments of the form f (ei...) 
  Pure Fun Application: esynthesizePureApp 
 ##################################################################################
  *************** Successfully Synthesized Args ei Forall i 
 # of Possible Argument Options for cons 4
 Possible Arg Options 
 EI _lbv1
 EI nil
 Possible Arg Options 
 EI _lbv0
 EI nil
 Possible Arg Options 
 EI s
 EI nil
 Possible Arg Options 
 EI int_gen
 EI nil
 Show f (ei, e2, ....en) Case
 Finding Already seen tree for apply cons  (, _lbv1 ), nil )
 Found _lbv6
 Finding Already seen tree for apply cons  (, _lbv0 ), nil )
 Found _lbv7
 Finding Already seen tree for apply cons  (, s ), nil )
 Found _lbv8
 Finding Already seen tree for apply cons  (, int_gen ), nil )
 Found _lbv9
 ##################################################################################
  *************** Successfully Synthesized Args ei Forall i 
 # of Possible Argument Options for cons 30
 Possible Arg Options 
 EI _lbv1
 EI nil
 Possible Arg Options 
 EI _lbv1
 EI _lbv9
 Possible Arg Options 
 EI _lbv1
 EI _lbv8
 Possible Arg Options 
 EI _lbv1
 EI _lbv7
 Possible Arg Options 
 EI _lbv1
 EI _lbv6
 Possible Arg Options 
 EI _lbv0
 EI nil
 Possible Arg Options 
 EI _lbv0
 EI _lbv9
 Possible Arg Options 
 EI _lbv0
 EI _lbv8
 Possible Arg Options 
 EI _lbv0
 EI _lbv7
 Possible Arg Options 
 EI _lbv0
 EI _lbv6
 Possible Arg Options 
 EI s
 EI nil
 Possible Arg Options 
 EI s
 EI _lbv9
 Possible Arg Options 
 EI s
 EI _lbv8
 Possible Arg Options 
 EI s
 EI _lbv7
 Possible Arg Options 
 EI s
 EI _lbv6
 Possible Arg Options 
 EI int_gen
 EI nil
 Possible Arg Options 
 EI int_gen
 EI _lbv9
 Possible Arg Options 
 EI int_gen
 EI _lbv8
 Possible Arg Options 
 EI int_gen
 EI _lbv7
 Possible Arg Options 
 EI int_gen
 EI _lbv6
 Possible Arg Options 
 EI _lbv1
 EI nil
 Possible Arg Options 
 EI _lbv1
 EI _lbv9
 Possible Arg Options 
 EI _lbv1
 EI _lbv8
 Possible Arg Options 
 EI _lbv1
 EI _lbv7
 Possible Arg Options 
 EI _lbv1
 EI _lbv6
 Possible Arg Options 
 EI _lbv0
 EI nil
 Possible Arg Options 
 EI _lbv0
 EI _lbv9
 Possible Arg Options 
 EI _lbv0
 EI _lbv8
 Possible Arg Options 
 EI _lbv0
 EI _lbv7
 Possible Arg Options 
 EI _lbv0
 EI _lbv6
 Show f (ei, e2, ....en) Case
 Finding Already seen tree for apply cons  (, _lbv1 ), nil )
 Found _lbv6
 Finding Already seen tree for apply cons  (, _lbv1 ), _lbv9 )
 Typechecking apply cons  (, apply subs  (, int_gen ) ), apply cons  (, int_gen ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv1 ), _lbv9 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv1 :: {v:Ty_int | (v) ==((int_gen) -- (1))} | (_lbv1) ==((int_gen) -- (1))
 Argument _lbv9 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                                              
 solver 
 (declare-sort T11352)
(declare-fun slen (T11352) Int)
(declare-fun nil () T11352)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun _lbv9 () T11352)
(declare-fun v () T11352)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= (slen v) (+ (slen _lbv9) 1)))
(assert (= var_v8 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= _lbv1 (- int_gen 1)))
(assert (= (slen v) (+ (slen _lbv9) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv1 ), _lbv9 )
 Finding Already seen tree for apply cons  (, _lbv1 ), _lbv8 )
 Typechecking apply cons  (, apply subs  (, int_gen ) ), apply cons  (, s ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv1 ), _lbv8 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv1 :: {v:Ty_int | (v) ==((int_gen) -- (1))} | (_lbv1) ==((int_gen) -- (1))
 Argument _lbv8 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                                              
 solver 
 (declare-sort T11393)
(declare-fun slen (T11393) Int)
(declare-fun nil () T11393)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun _lbv8 () T11393)
(declare-fun v () T11393)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= (slen v) (+ (slen _lbv8) 1)))
(assert (= var_v8 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= _lbv1 (- int_gen 1)))
(assert (= (slen v) (+ (slen _lbv8) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv1 ), _lbv8 )
 Finding Already seen tree for apply cons  (, _lbv1 ), _lbv7 )
 Typechecking apply cons  (, apply subs  (, int_gen ) ), apply cons  (, apply subs  (, s ) ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv1 ), _lbv7 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv1 :: {v:Ty_int | (v) ==((int_gen) -- (1))} | (_lbv1) ==((int_gen) -- (1))
 Argument _lbv7 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                                              
 solver 
 (declare-sort T11434)
(declare-fun slen (T11434) Int)
(declare-fun nil () T11434)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun _lbv7 () T11434)
(declare-fun v () T11434)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= (slen v) (+ (slen _lbv7) 1)))
(assert (= var_v8 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= _lbv1 (- int_gen 1)))
(assert (= (slen v) (+ (slen _lbv7) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv1 ), _lbv7 )
 Finding Already seen tree for apply cons  (, _lbv1 ), _lbv6 )
 Typechecking apply cons  (, apply subs  (, int_gen ) ), apply cons  (, apply subs  (, int_gen ) ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv1 ), _lbv6 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv1 :: {v:Ty_int | (v) ==((int_gen) -- (1))} | (_lbv1) ==((int_gen) -- (1))
 Argument _lbv6 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                                              
 solver 
 (declare-sort T11475)
(declare-fun slen (T11475) Int)
(declare-fun nil () T11475)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun _lbv6 () T11475)
(declare-fun v () T11475)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= (slen v) (+ (slen _lbv6) 1)))
(assert (= var_v8 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= _lbv1 (- int_gen 1)))
(assert (= (slen v) (+ (slen _lbv6) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv1 ), _lbv6 )
 Finding Already seen tree for apply cons  (, _lbv0 ), nil )
 Found _lbv7
 Finding Already seen tree for apply cons  (, _lbv0 ), _lbv9 )
 Typechecking apply cons  (, apply subs  (, s ) ), apply cons  (, int_gen ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv0 ), _lbv9 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv0 :: {v:Ty_int | (v) ==((s) -- (1))} | (_lbv0) ==((s) -- (1))
 Argument _lbv9 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                                              
 solver 
 (declare-sort T11516)
(declare-fun slen (T11516) Int)
(declare-fun nil () T11516)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun _lbv9 () T11516)
(declare-fun v () T11516)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= (slen v) (+ (slen _lbv9) 1)))
(assert (= var_v8 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= _lbv0 (- s 1)))
(assert (= (slen v) (+ (slen _lbv9) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv0 ), _lbv9 )
 Finding Already seen tree for apply cons  (, _lbv0 ), _lbv8 )
 Typechecking apply cons  (, apply subs  (, s ) ), apply cons  (, s ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv0 ), _lbv8 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv0 :: {v:Ty_int | (v) ==((s) -- (1))} | (_lbv0) ==((s) -- (1))
 Argument _lbv8 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                                              
 solver 
 (declare-sort T11557)
(declare-fun slen (T11557) Int)
(declare-fun nil () T11557)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun _lbv8 () T11557)
(declare-fun v () T11557)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= (slen v) (+ (slen _lbv8) 1)))
(assert (= var_v8 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= _lbv0 (- s 1)))
(assert (= (slen v) (+ (slen _lbv8) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv0 ), _lbv8 )
 Finding Already seen tree for apply cons  (, _lbv0 ), _lbv7 )
 Typechecking apply cons  (, apply subs  (, s ) ), apply cons  (, apply subs  (, s ) ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv0 ), _lbv7 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv0 :: {v:Ty_int | (v) ==((s) -- (1))} | (_lbv0) ==((s) -- (1))
 Argument _lbv7 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                                              
 solver 
 (declare-sort T11598)
(declare-fun slen (T11598) Int)
(declare-fun nil () T11598)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun _lbv7 () T11598)
(declare-fun v () T11598)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= (slen v) (+ (slen _lbv7) 1)))
(assert (= var_v8 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= _lbv0 (- s 1)))
(assert (= (slen v) (+ (slen _lbv7) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv0 ), _lbv7 )
 Finding Already seen tree for apply cons  (, _lbv0 ), _lbv6 )
 Typechecking apply cons  (, apply subs  (, s ) ), apply cons  (, apply subs  (, int_gen ) ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv0 ), _lbv6 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv0 :: {v:Ty_int | (v) ==((s) -- (1))} | (_lbv0) ==((s) -- (1))
 Argument _lbv6 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                                              
 solver 
 (declare-sort T11639)
(declare-fun slen (T11639) Int)
(declare-fun nil () T11639)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun _lbv6 () T11639)
(declare-fun v () T11639)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= (slen v) (+ (slen _lbv6) 1)))
(assert (= var_v8 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= _lbv0 (- s 1)))
(assert (= (slen v) (+ (slen _lbv6) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv0 ), _lbv6 )
 Finding Already seen tree for apply cons  (, s ), nil )
 Found _lbv8
 Finding Already seen tree for apply cons  (, s ), _lbv9 )
 Typechecking apply cons  (, s ), apply cons  (, int_gen ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, s ), _lbv9 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument s :: {v:Ty_int | true} | true
 Argument _lbv9 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                                              
 solver 
 (declare-sort T11680)
(declare-fun slen (T11680) Int)
(declare-fun nil () T11680)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun _lbv9 () T11680)
(declare-fun v () T11680)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= (slen v) (+ (slen _lbv9) 1)))
(assert (= var_v8 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= (slen v) (+ (slen _lbv9) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, s ), _lbv9 )
 Finding Already seen tree for apply cons  (, s ), _lbv8 )
 Typechecking apply cons  (, s ), apply cons  (, s ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, s ), _lbv8 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument s :: {v:Ty_int | true} | true
 Argument _lbv8 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                                              
 solver 
 (declare-sort T11721)
(declare-fun slen (T11721) Int)
(declare-fun nil () T11721)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun _lbv8 () T11721)
(declare-fun v () T11721)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= (slen v) (+ (slen _lbv8) 1)))
(assert (= var_v8 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= (slen v) (+ (slen _lbv8) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, s ), _lbv8 )
 Finding Already seen tree for apply cons  (, s ), _lbv7 )
 Typechecking apply cons  (, s ), apply cons  (, apply subs  (, s ) ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, s ), _lbv7 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument s :: {v:Ty_int | true} | true
 Argument _lbv7 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                                              
 solver 
 (declare-sort T11762)
(declare-fun slen (T11762) Int)
(declare-fun nil () T11762)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun _lbv7 () T11762)
(declare-fun v () T11762)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= (slen v) (+ (slen _lbv7) 1)))
(assert (= var_v8 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= (slen v) (+ (slen _lbv7) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, s ), _lbv7 )
 Finding Already seen tree for apply cons  (, s ), _lbv6 )
 Typechecking apply cons  (, s ), apply cons  (, apply subs  (, int_gen ) ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, s ), _lbv6 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument s :: {v:Ty_int | true} | true
 Argument _lbv6 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                                              
 solver 
 (declare-sort T11803)
(declare-fun slen (T11803) Int)
(declare-fun nil () T11803)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun _lbv6 () T11803)
(declare-fun v () T11803)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= (slen v) (+ (slen _lbv6) 1)))
(assert (= var_v8 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= (slen v) (+ (slen _lbv6) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, s ), _lbv6 )
 Finding Already seen tree for apply cons  (, int_gen ), nil )
 Found _lbv9
 Finding Already seen tree for apply cons  (, int_gen ), _lbv9 )
 Typechecking apply cons  (, int_gen ), apply cons  (, int_gen ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, int_gen ), _lbv9 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument int_gen :: {var_v1:Ty_int | true} | true
 Argument _lbv9 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                                              
 solver 
 (declare-sort T11844)
(declare-fun slen (T11844) Int)
(declare-fun nil () T11844)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun _lbv9 () T11844)
(declare-fun v () T11844)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= (slen v) (+ (slen _lbv9) 1)))
(assert (= var_v8 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= (slen v) (+ (slen _lbv9) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, int_gen ), _lbv9 )
 Finding Already seen tree for apply cons  (, int_gen ), _lbv8 )
 Typechecking apply cons  (, int_gen ), apply cons  (, s ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, int_gen ), _lbv8 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument int_gen :: {var_v1:Ty_int | true} | true
 Argument _lbv8 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                                              
 solver 
 (declare-sort T11885)
(declare-fun slen (T11885) Int)
(declare-fun nil () T11885)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun _lbv8 () T11885)
(declare-fun v () T11885)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= (slen v) (+ (slen _lbv8) 1)))
(assert (= var_v8 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= (slen v) (+ (slen _lbv8) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, int_gen ), _lbv8 )
 Finding Already seen tree for apply cons  (, int_gen ), _lbv7 )
 Typechecking apply cons  (, int_gen ), apply cons  (, apply subs  (, s ) ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, int_gen ), _lbv7 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument int_gen :: {var_v1:Ty_int | true} | true
 Argument _lbv7 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                                              
 solver 
 (declare-sort T11926)
(declare-fun slen (T11926) Int)
(declare-fun nil () T11926)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun _lbv7 () T11926)
(declare-fun v () T11926)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= (slen v) (+ (slen _lbv7) 1)))
(assert (= var_v8 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= (slen v) (+ (slen _lbv7) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, int_gen ), _lbv7 )
 Finding Already seen tree for apply cons  (, int_gen ), _lbv6 )
 Typechecking apply cons  (, int_gen ), apply cons  (, apply subs  (, int_gen ) ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, int_gen ), _lbv6 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument int_gen :: {var_v1:Ty_int | true} | true
 Argument _lbv6 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                                              
 solver 
 (declare-sort T11967)
(declare-fun slen (T11967) Int)
(declare-fun nil () T11967)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun _lbv6 () T11967)
(declare-fun v () T11967)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= (slen v) (+ (slen _lbv6) 1)))
(assert (= var_v8 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= (slen v) (+ (slen _lbv6) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, int_gen ), _lbv6 )
 Finding Already seen tree for apply cons  (, _lbv1 ), nil )
 Found _lbv6
 Finding Already seen tree for apply cons  (, _lbv1 ), _lbv9 )
 Typechecking apply cons  (, apply subs  (, int_gen ) ), apply cons  (, int_gen ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv1 ), _lbv9 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv1 :: {v:Ty_int | (v) ==((int_gen) -- (1))} | (_lbv1) ==((int_gen) -- (1))
 Argument _lbv9 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                                              
 solver 
 (declare-sort T12008)
(declare-fun slen (T12008) Int)
(declare-fun nil () T12008)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun _lbv9 () T12008)
(declare-fun v () T12008)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= (slen v) (+ (slen _lbv9) 1)))
(assert (= var_v8 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= _lbv1 (- int_gen 1)))
(assert (= (slen v) (+ (slen _lbv9) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv1 ), _lbv9 )
 Finding Already seen tree for apply cons  (, _lbv1 ), _lbv8 )
 Typechecking apply cons  (, apply subs  (, int_gen ) ), apply cons  (, s ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv1 ), _lbv8 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv1 :: {v:Ty_int | (v) ==((int_gen) -- (1))} | (_lbv1) ==((int_gen) -- (1))
 Argument _lbv8 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                                              
 solver 
 (declare-sort T12049)
(declare-fun slen (T12049) Int)
(declare-fun nil () T12049)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun _lbv8 () T12049)
(declare-fun v () T12049)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= (slen v) (+ (slen _lbv8) 1)))
(assert (= var_v8 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= _lbv1 (- int_gen 1)))
(assert (= (slen v) (+ (slen _lbv8) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv1 ), _lbv8 )
 Finding Already seen tree for apply cons  (, _lbv1 ), _lbv7 )
 Typechecking apply cons  (, apply subs  (, int_gen ) ), apply cons  (, apply subs  (, s ) ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv1 ), _lbv7 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv1 :: {v:Ty_int | (v) ==((int_gen) -- (1))} | (_lbv1) ==((int_gen) -- (1))
 Argument _lbv7 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                                              
 solver 
 (declare-sort T12090)
(declare-fun slen (T12090) Int)
(declare-fun nil () T12090)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun _lbv7 () T12090)
(declare-fun v () T12090)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= (slen v) (+ (slen _lbv7) 1)))
(assert (= var_v8 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= _lbv1 (- int_gen 1)))
(assert (= (slen v) (+ (slen _lbv7) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv1 ), _lbv7 )
 Finding Already seen tree for apply cons  (, _lbv1 ), _lbv6 )
 Typechecking apply cons  (, apply subs  (, int_gen ) ), apply cons  (, apply subs  (, int_gen ) ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv1 ), _lbv6 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv1 :: {v:Ty_int | (v) ==((int_gen) -- (1))} | (_lbv1) ==((int_gen) -- (1))
 Argument _lbv6 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                                              
 solver 
 (declare-sort T12131)
(declare-fun slen (T12131) Int)
(declare-fun nil () T12131)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun _lbv6 () T12131)
(declare-fun v () T12131)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= (slen v) (+ (slen _lbv6) 1)))
(assert (= var_v8 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= _lbv1 (- int_gen 1)))
(assert (= (slen v) (+ (slen _lbv6) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv1 ), _lbv6 )
 Finding Already seen tree for apply cons  (, _lbv0 ), nil )
 Found _lbv7
 Finding Already seen tree for apply cons  (, _lbv0 ), _lbv9 )
 Typechecking apply cons  (, apply subs  (, s ) ), apply cons  (, int_gen ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv0 ), _lbv9 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv0 :: {v:Ty_int | (v) ==((s) -- (1))} | (_lbv0) ==((s) -- (1))
 Argument _lbv9 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                                              
 solver 
 (declare-sort T12172)
(declare-fun slen (T12172) Int)
(declare-fun nil () T12172)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun _lbv9 () T12172)
(declare-fun v () T12172)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= (slen v) (+ (slen _lbv9) 1)))
(assert (= var_v8 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= _lbv0 (- s 1)))
(assert (= (slen v) (+ (slen _lbv9) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv0 ), _lbv9 )
 Finding Already seen tree for apply cons  (, _lbv0 ), _lbv8 )
 Typechecking apply cons  (, apply subs  (, s ) ), apply cons  (, s ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv0 ), _lbv8 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv0 :: {v:Ty_int | (v) ==((s) -- (1))} | (_lbv0) ==((s) -- (1))
 Argument _lbv8 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                                              
 solver 
 (declare-sort T12213)
(declare-fun slen (T12213) Int)
(declare-fun nil () T12213)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun _lbv8 () T12213)
(declare-fun v () T12213)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= (slen v) (+ (slen _lbv8) 1)))
(assert (= var_v8 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= _lbv0 (- s 1)))
(assert (= (slen v) (+ (slen _lbv8) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv0 ), _lbv8 )
 Finding Already seen tree for apply cons  (, _lbv0 ), _lbv7 )
 Typechecking apply cons  (, apply subs  (, s ) ), apply cons  (, apply subs  (, s ) ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv0 ), _lbv7 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv0 :: {v:Ty_int | (v) ==((s) -- (1))} | (_lbv0) ==((s) -- (1))
 Argument _lbv7 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                                              
 solver 
 (declare-sort T12254)
(declare-fun slen (T12254) Int)
(declare-fun nil () T12254)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun _lbv7 () T12254)
(declare-fun v () T12254)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= (slen v) (+ (slen _lbv7) 1)))
(assert (= var_v8 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= _lbv0 (- s 1)))
(assert (= (slen v) (+ (slen _lbv7) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv0 ), _lbv7 )
 Finding Already seen tree for apply cons  (, _lbv0 ), _lbv6 )
 Typechecking apply cons  (, apply subs  (, s ) ), apply cons  (, apply subs  (, int_gen ) ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv0 ), _lbv6 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv0 :: {v:Ty_int | (v) ==((s) -- (1))} | (_lbv0) ==((s) -- (1))
 Argument _lbv6 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                                              
 solver 
 (declare-sort T12295)
(declare-fun slen (T12295) Int)
(declare-fun nil () T12295)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun _lbv6 () T12295)
(declare-fun v () T12295)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= (slen v) (+ (slen _lbv6) 1)))
(assert (= var_v8 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= _lbv0 (- s 1)))
(assert (= (slen v) (+ (slen _lbv6) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv0 ), _lbv6 )
 Show :: Successfully Synthesisized False Branch 
 Show :: iSynthesize Boolean Successful _lbv2
 Show :: iSynthesize Boolean Successful {v:Ty_bool | DoubleImpl 
 v = true
  
 	 Conj <c s = 0
 	 , DoubleImpl 
 v = false
  s > 0 >c }
  *********************Synthesizing the True branch*******************
 Show :: True Predicate 
 	 Conj <c var_v9 = true
 	 , DoubleImpl 
 var_v9 = true
  
 	 Conj <c s = 0
 	 , DoubleImpl 
 var_v9 = false
  s > 0 >c  >c 
 Show ***********Calling Scalar synthesize***************
 esynthesizeScalar for {v:Ty_alphalist | (slen)(v) ==(s)}
  Enumeration for 
 spec 
 {v:Ty_alphalist | (slen)(v) ==(s)}
 
 Enumerating a Scalar Term nil
 
 Type of the Scalar Term {v:Ty_alphalist | (slen)(v) ==(0)}                                                                                                                                                                                                                     
 solver 
 (declare-sort T12337)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun var_v9 () Bool)
(declare-fun slen (T12337) Int)
(declare-fun nil () T12337)
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= (slen nil) 0))
(assert (= var_v9 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= (slen nil) 0))
(assert (not (= (slen nil) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
 
 Timeout the subtype check T_vi <: T_goal
 >>>>>>>>>>>>>>>>>> No Scalar found in Environment, Trying esynthesizePureApp <<<<<<<<<<<<<<<<<< 
  Pure Fun Application: esynthesizePureApp 
 Show Potential Functions
  , 
 goal, 
 cons
 ############################################################
  Trying Pure Component goal
  *************** Trying Arrow Component ************goal :  Arrow ( ( s1 : {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c } ) -> {v:Ty_alphalist | (slen)(v) ==(s1)}
  *************** Synthesizing Args ei : ti for ************goal
 ##################################################################################
  Synthesizing the 1th argument for Function goal
  Trying Arguments in Scalars 
 esynthesizeScalar for {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c }
  Enumeration for 
 spec 
 {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c }
 
 Enumerating a Scalar Term int_gen
 
 Type of the Scalar Term {var_v1:Ty_int | true}                                                                                                                                                                                                                          
 solver 
 (declare-sort T12377)
(declare-fun slen (T12377) Int)
(declare-fun nil () T12377)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun var_v9 () Bool)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= var_v9 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (not (> s int_gen)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
 
 Timeout the subtype check T_vi <: T_goal
 
 Enumerating a Scalar Term s
 
 Type of the Scalar Term {v:Ty_int | true}                                                                                                                                                                                                                          
 solver 
 (declare-sort T12418)
(declare-fun slen (T12418) Int)
(declare-fun nil () T12418)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun var_v9 () Bool)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= var_v9 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (not (> s s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
 
 Timeout the subtype check T_vi <: T_goal
 
 Enumerating a Scalar Term _lbv0
 
 Type of the Scalar Term {v:Ty_int | (v) ==((s) -- (1))}                                                                                                                                                                                                                          
 solver 
 (declare-sort T12459)
(declare-fun slen (T12459) Int)
(declare-fun nil () T12459)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun s () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun var_v9 () Bool)
(assert (= (slen nil) 0))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= _lbv0 (- s 1)))
(assert (= var_v9 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= _lbv0 (- s 1)))
(assert (not (> s _lbv0)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
 
 Timedout the subtype check T_vi <: T_goal
 
 Enumerating a Scalar Term _lbv1
 
 Type of the Scalar Term {v:Ty_int | (v) ==((int_gen) -- (1))}                                                                                                                                                                                                                          
 solver 
 (declare-sort T12500)
(declare-fun slen (T12500) Int)
(declare-fun nil () T12500)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun int_gen () Int)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun var_v9 () Bool)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= _lbv1 (- int_gen 1)))
(assert (= var_v9 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= _lbv1 (- int_gen 1)))
(assert (not (> s _lbv1)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
 
 Timedout the subtype check T_vi <: T_goal
 >>>>>>>>>>>>>>>>>> No Scalar found in Environment, Trying esynthesizePureApp <<<<<<<<<<<<<<<<<< 
  Pure Fun Application: esynthesizePureApp 
 Show Potential Functions
  , 
 subs
 ############################################################
  Trying Pure Component subs
  *************** Trying Arrow Component ************subs :  Arrow ( ( n1 : {var_v0:Ty_int | true} ) -> {v:Ty_int | (v) ==((n1) -- (1))}
  *************** Synthesizing Args ei : ti for ************subs
 ##################################################################################
  Synthesizing the 1th argument for Function subs
  Trying Arguments in Scalars 
 esynthesizeScalar for {var_v0:Ty_int | true}
  Enumeration for 
 spec 
 {var_v0:Ty_int | true}
 
 Enumerating a Scalar Term int_gen
 
 Type of the Scalar Term {var_v1:Ty_int | true}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 
 Enumerating a Scalar Term s
 
 Type of the Scalar Term {v:Ty_int | true}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 
 Enumerating a Scalar Term _lbv0
 
 Type of the Scalar Term {v:Ty_int | (v) ==((s) -- (1))}
 ################################################
 Skipping Variable _lbv0 As Outer Function Call is subs
 
 Enumerating a Scalar Term _lbv1
 
 Type of the Scalar Term {v:Ty_int | (v) ==((int_gen) -- (1))}
 ################################################
 Skipping Variable _lbv1 As Outer Function Call is subs
 Show :: Found a Few Macthing Scalars 
  Next Trying Arguments of the form f (ei...) 
  Pure Fun Application: esynthesizePureApp 
 ##################################################################################
  *************** Successfully Synthesized Args ei Forall i 
 # of Possible Argument Options for subs 2
 Possible Arg Options 
 EI s
 Possible Arg Options 
 EI int_gen
 Apply Single Argument Case : f (ei) Case subs
  Case : f (ei) Case subs s
 Finding Already seen tree for apply subs  (, s )
 Found _lbv0
  Case : f (ei) Case subs int_gen
 Finding Already seen tree for apply subs  (, int_gen )
 Found _lbv1
  Next Trying Arguments of the form f (ei...) 
  Pure Fun Application: esynthesizePureApp 
 Show Potential Functions
  , 
 subs
 ############################################################
  Trying Pure Component subs
 ##################################################################################
  *************** Successfully Synthesized Args ei Forall i 
 # of Possible Argument Options for goal 2
 Possible Arg Options 
 EI _lbv1
 Possible Arg Options 
 EI _lbv0
 Apply Single Argument Case : f (ei) Case goal
  Case : f (ei) Case goal _lbv1
 Finding Already seen tree for apply goal  (, _lbv1 )
 Typechecking the Term apply goal  (, _lbv1 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv1 :: {v:Ty_int | (v) ==((int_gen) -- (1))} | (_lbv1) ==((int_gen) -- (1))                                                                                                                                                                                                                     
 solver 
 (declare-sort T12617)
(declare-fun slen (T12617) Int)
(declare-fun nil () T12617)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun var_v9 () Bool)
(declare-fun v () T12617)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= (slen v) _lbv1))
(assert (= var_v9 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= _lbv1 (- int_gen 1)))
(assert (= (slen v) _lbv1))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply goal  (, _lbv1 )
  Case : f (ei) Case goal _lbv0
 Finding Already seen tree for apply goal  (, _lbv0 )
 Typechecking the Term apply goal  (, _lbv0 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv0 :: {v:Ty_int | (v) ==((s) -- (1))} | (_lbv0) ==((s) -- (1))                                                                                                                                                                                                                     
 solver 
 (declare-sort T12658)
(declare-fun slen (T12658) Int)
(declare-fun nil () T12658)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun var_v9 () Bool)
(declare-fun v () T12658)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= (slen v) _lbv0))
(assert (= var_v9 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= _lbv0 (- s 1)))
(assert (= (slen v) _lbv0))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply goal  (, _lbv0 )
  ###################################################
  The Choice of Function goal Was Ill Fated Try Next Choice of function
 ############################################################
  Trying Pure Component cons
  *************** Trying Arrow Component ************cons :  Arrow ( ( x : {var_v3:Ty_int | true} ) ->  Arrow ( ( xs : {var_v4:Ty_alphalist | true} ) -> {v:Ty_alphalist | (slen)(v) ==((slen)(xs) + (1))}
  *************** Synthesizing Args ei : ti for ************cons
 ##################################################################################
  Synthesizing the 1th argument for Function cons
  Trying Arguments in Scalars 
 esynthesizeScalar for {var_v3:Ty_int | true}
  Enumeration for 
 spec 
 {var_v3:Ty_int | true}
 
 Enumerating a Scalar Term int_gen
 
 Type of the Scalar Term {var_v1:Ty_int | true}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 
 Enumerating a Scalar Term s
 
 Type of the Scalar Term {v:Ty_int | true}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 
 Enumerating a Scalar Term _lbv0
 
 Type of the Scalar Term {v:Ty_int | (v) ==((s) -- (1))}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 
 Enumerating a Scalar Term _lbv1
 
 Type of the Scalar Term {v:Ty_int | (v) ==((int_gen) -- (1))}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 Show :: Found a Few Macthing Scalars 
  Next Trying Arguments of the form f (ei...) 
  Pure Fun Application: esynthesizePureApp 
 Show Potential Functions
  , 
 subs
 ############################################################
  Trying Pure Component subs
  *************** Trying Arrow Component ************subs :  Arrow ( ( n1 : {var_v0:Ty_int | true} ) -> {v:Ty_int | (v) ==((n1) -- (1))}
  *************** Synthesizing Args ei : ti for ************subs
 ##################################################################################
  Synthesizing the 1th argument for Function subs
  Trying Arguments in Scalars 
 esynthesizeScalar for {var_v0:Ty_int | true}
  Enumeration for 
 spec 
 {var_v0:Ty_int | true}
 
 Enumerating a Scalar Term int_gen
 
 Type of the Scalar Term {var_v1:Ty_int | true}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 
 Enumerating a Scalar Term s
 
 Type of the Scalar Term {v:Ty_int | true}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 
 Enumerating a Scalar Term _lbv0
 
 Type of the Scalar Term {v:Ty_int | (v) ==((s) -- (1))}
 ################################################
 Skipping Variable _lbv0 As Outer Function Call is subs
 
 Enumerating a Scalar Term _lbv1
 
 Type of the Scalar Term {v:Ty_int | (v) ==((int_gen) -- (1))}
 ################################################
 Skipping Variable _lbv1 As Outer Function Call is subs
 Show :: Found a Few Macthing Scalars 
  Next Trying Arguments of the form f (ei...) 
  Pure Fun Application: esynthesizePureApp 
 ##################################################################################
  *************** Successfully Synthesized Args ei Forall i 
 # of Possible Argument Options for subs 2
 Possible Arg Options 
 EI s
 Possible Arg Options 
 EI int_gen
 Apply Single Argument Case : f (ei) Case subs
  Case : f (ei) Case subs s
 Finding Already seen tree for apply subs  (, s )
 Found _lbv0
  Case : f (ei) Case subs int_gen
 Finding Already seen tree for apply subs  (, int_gen )
 Found _lbv1
 ##################################################################################
  Synthesizing the 2th argument for Function cons
  Trying Arguments in Scalars 
 esynthesizeScalar for {var_v4:Ty_alphalist | true}
  Enumeration for 
 spec 
 {var_v4:Ty_alphalist | true}
 
 Enumerating a Scalar Term nil
 
 Type of the Scalar Term {v:Ty_alphalist | (slen)(v) ==(0)}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 Show :: Found a Few Macthing Scalars 
  Next Trying Arguments of the form f (ei...) 
  Pure Fun Application: esynthesizePureApp 
 Show Potential Functions
  , 
 goal, 
 cons
 ############################################################
  Trying Pure Component goal
  *************** Trying Arrow Component ************goal :  Arrow ( ( s1 : {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c } ) -> {v:Ty_alphalist | (slen)(v) ==(s1)}
  *************** Synthesizing Args ei : ti for ************goal
 ##################################################################################
  Synthesizing the 1th argument for Function goal
  Trying Arguments in Scalars 
 esynthesizeScalar for {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c }
  Enumeration for 
 spec 
 {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c }
 
 Enumerating a Scalar Term int_gen
 
 Type of the Scalar Term {var_v1:Ty_int | true}                                                                                                                                                                                                                          
 solver 
 (declare-sort T12965)
(declare-fun slen (T12965) Int)
(declare-fun nil () T12965)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun var_v9 () Bool)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= var_v9 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (not (> s int_gen)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
 
 Timeout the subtype check T_vi <: T_goal
 
 Enumerating a Scalar Term s
 
 Type of the Scalar Term {v:Ty_int | true}                                                                                                                                                                                                                          
 solver 
 (declare-sort T13006)
(declare-fun slen (T13006) Int)
(declare-fun nil () T13006)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun var_v9 () Bool)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= var_v9 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (not (> s s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
 
 Timeout the subtype check T_vi <: T_goal
 
 Enumerating a Scalar Term _lbv0
 
 Type of the Scalar Term {v:Ty_int | (v) ==((s) -- (1))}                                                                                                                                                                                                                          
 solver 
 (declare-sort T13047)
(declare-fun slen (T13047) Int)
(declare-fun nil () T13047)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun s () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun var_v9 () Bool)
(assert (= (slen nil) 0))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= _lbv0 (- s 1)))
(assert (= var_v9 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= _lbv0 (- s 1)))
(assert (not (> s _lbv0)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
 
 Timedout the subtype check T_vi <: T_goal
 
 Enumerating a Scalar Term _lbv1
 
 Type of the Scalar Term {v:Ty_int | (v) ==((int_gen) -- (1))}                                                                                                                                                                                                                          
 solver 
 (declare-sort T13088)
(declare-fun slen (T13088) Int)
(declare-fun nil () T13088)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun int_gen () Int)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun var_v9 () Bool)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= _lbv1 (- int_gen 1)))
(assert (= var_v9 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= _lbv1 (- int_gen 1)))
(assert (not (> s _lbv1)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
 
 Timedout the subtype check T_vi <: T_goal
 >>>>>>>>>>>>>>>>>> No Scalar found in Environment, Trying esynthesizePureApp <<<<<<<<<<<<<<<<<< 
  Pure Fun Application: esynthesizePureApp 
 >>>>>>>>>>>>>>>>>>  No pureApp found, Call esynthesizeConsApp <<<<<<<<<<<<<< 
  Next Trying Arguments of the form f (ei...) 
  Pure Fun Application: esynthesizePureApp 
 ##################################################################################
  *************** Synthesizing Args ei : Failed for some  arg
 ############################################################
  Trying Pure Component cons
  *************** Trying Arrow Component ************cons :  Arrow ( ( x : {var_v3:Ty_int | true} ) ->  Arrow ( ( xs : {var_v4:Ty_alphalist | true} ) -> {v:Ty_alphalist | (slen)(v) ==((slen)(xs) + (1))}
  *************** Synthesizing Args ei : ti for ************cons
 ##################################################################################
  Synthesizing the 1th argument for Function cons
  Trying Arguments in Scalars 
 esynthesizeScalar for {var_v3:Ty_int | true}
  Enumeration for 
 spec 
 {var_v3:Ty_int | true}
 
 Enumerating a Scalar Term int_gen
 
 Type of the Scalar Term {var_v1:Ty_int | true}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 
 Enumerating a Scalar Term s
 
 Type of the Scalar Term {v:Ty_int | true}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 
 Enumerating a Scalar Term _lbv0
 
 Type of the Scalar Term {v:Ty_int | (v) ==((s) -- (1))}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 
 Enumerating a Scalar Term _lbv1
 
 Type of the Scalar Term {v:Ty_int | (v) ==((int_gen) -- (1))}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 Show :: Found a Few Macthing Scalars 
  Next Trying Arguments of the form f (ei...) 
  Pure Fun Application: esynthesizePureApp 
 ##################################################################################
  Synthesizing the 2th argument for Function cons
  Trying Arguments in Scalars 
 esynthesizeScalar for {var_v4:Ty_alphalist | true}
  Enumeration for 
 spec 
 {var_v4:Ty_alphalist | true}
 
 Enumerating a Scalar Term nil
 
 Type of the Scalar Term {v:Ty_alphalist | (slen)(v) ==(0)}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 Show :: Found a Few Macthing Scalars 
  Next Trying Arguments of the form f (ei...) 
  Pure Fun Application: esynthesizePureApp 
 ##################################################################################
  *************** Successfully Synthesized Args ei Forall i 
 # of Possible Argument Options for cons 4
 Possible Arg Options 
 EI _lbv1
 EI nil
 Possible Arg Options 
 EI _lbv0
 EI nil
 Possible Arg Options 
 EI s
 EI nil
 Possible Arg Options 
 EI int_gen
 EI nil
 Show f (ei, e2, ....en) Case
 Finding Already seen tree for apply cons  (, _lbv1 ), nil )
 Found _lbv6
 Finding Already seen tree for apply cons  (, _lbv0 ), nil )
 Found _lbv7
 Finding Already seen tree for apply cons  (, s ), nil )
 Found _lbv8
 Finding Already seen tree for apply cons  (, int_gen ), nil )
 Found _lbv9
 ##################################################################################
  *************** Successfully Synthesized Args ei Forall i 
 # of Possible Argument Options for cons 30
 Possible Arg Options 
 EI _lbv1
 EI nil
 Possible Arg Options 
 EI _lbv1
 EI _lbv9
 Possible Arg Options 
 EI _lbv1
 EI _lbv8
 Possible Arg Options 
 EI _lbv1
 EI _lbv7
 Possible Arg Options 
 EI _lbv1
 EI _lbv6
 Possible Arg Options 
 EI _lbv0
 EI nil
 Possible Arg Options 
 EI _lbv0
 EI _lbv9
 Possible Arg Options 
 EI _lbv0
 EI _lbv8
 Possible Arg Options 
 EI _lbv0
 EI _lbv7
 Possible Arg Options 
 EI _lbv0
 EI _lbv6
 Possible Arg Options 
 EI s
 EI nil
 Possible Arg Options 
 EI s
 EI _lbv9
 Possible Arg Options 
 EI s
 EI _lbv8
 Possible Arg Options 
 EI s
 EI _lbv7
 Possible Arg Options 
 EI s
 EI _lbv6
 Possible Arg Options 
 EI int_gen
 EI nil
 Possible Arg Options 
 EI int_gen
 EI _lbv9
 Possible Arg Options 
 EI int_gen
 EI _lbv8
 Possible Arg Options 
 EI int_gen
 EI _lbv7
 Possible Arg Options 
 EI int_gen
 EI _lbv6
 Possible Arg Options 
 EI _lbv1
 EI nil
 Possible Arg Options 
 EI _lbv1
 EI _lbv9
 Possible Arg Options 
 EI _lbv1
 EI _lbv8
 Possible Arg Options 
 EI _lbv1
 EI _lbv7
 Possible Arg Options 
 EI _lbv1
 EI _lbv6
 Possible Arg Options 
 EI _lbv0
 EI nil
 Possible Arg Options 
 EI _lbv0
 EI _lbv9
 Possible Arg Options 
 EI _lbv0
 EI _lbv8
 Possible Arg Options 
 EI _lbv0
 EI _lbv7
 Possible Arg Options 
 EI _lbv0
 EI _lbv6
 Show f (ei, e2, ....en) Case
 Finding Already seen tree for apply cons  (, _lbv1 ), nil )
 Found _lbv6
 Finding Already seen tree for apply cons  (, _lbv1 ), _lbv9 )
 Typechecking apply cons  (, apply subs  (, int_gen ) ), apply cons  (, int_gen ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv1 ), _lbv9 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv1 :: {v:Ty_int | (v) ==((int_gen) -- (1))} | (_lbv1) ==((int_gen) -- (1))
 Argument _lbv9 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                                                                     
 solver 
 (declare-sort T13319)
(declare-fun slen (T13319) Int)
(declare-fun nil () T13319)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun var_v9 () Bool)
(declare-fun _lbv9 () T13319)
(declare-fun v () T13319)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= (slen v) (+ (slen _lbv9) 1)))
(assert (= var_v9 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= _lbv1 (- int_gen 1)))
(assert (= (slen v) (+ (slen _lbv9) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv1 ), _lbv9 )
 Finding Already seen tree for apply cons  (, _lbv1 ), _lbv8 )
 Typechecking apply cons  (, apply subs  (, int_gen ) ), apply cons  (, s ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv1 ), _lbv8 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv1 :: {v:Ty_int | (v) ==((int_gen) -- (1))} | (_lbv1) ==((int_gen) -- (1))
 Argument _lbv8 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                                                                     
 solver 
 (declare-sort T13360)
(declare-fun slen (T13360) Int)
(declare-fun nil () T13360)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun var_v9 () Bool)
(declare-fun _lbv8 () T13360)
(declare-fun v () T13360)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= (slen v) (+ (slen _lbv8) 1)))
(assert (= var_v9 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= _lbv1 (- int_gen 1)))
(assert (= (slen v) (+ (slen _lbv8) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv1 ), _lbv8 )
 Finding Already seen tree for apply cons  (, _lbv1 ), _lbv7 )
 Typechecking apply cons  (, apply subs  (, int_gen ) ), apply cons  (, apply subs  (, s ) ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv1 ), _lbv7 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv1 :: {v:Ty_int | (v) ==((int_gen) -- (1))} | (_lbv1) ==((int_gen) -- (1))
 Argument _lbv7 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                                                                     
 solver 
 (declare-sort T13401)
(declare-fun slen (T13401) Int)
(declare-fun nil () T13401)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun var_v9 () Bool)
(declare-fun _lbv7 () T13401)
(declare-fun v () T13401)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= (slen v) (+ (slen _lbv7) 1)))
(assert (= var_v9 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= _lbv1 (- int_gen 1)))
(assert (= (slen v) (+ (slen _lbv7) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv1 ), _lbv7 )
 Finding Already seen tree for apply cons  (, _lbv1 ), _lbv6 )
 Typechecking apply cons  (, apply subs  (, int_gen ) ), apply cons  (, apply subs  (, int_gen ) ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv1 ), _lbv6 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv1 :: {v:Ty_int | (v) ==((int_gen) -- (1))} | (_lbv1) ==((int_gen) -- (1))
 Argument _lbv6 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                                                                     
 solver 
 (declare-sort T13442)
(declare-fun slen (T13442) Int)
(declare-fun nil () T13442)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun var_v9 () Bool)
(declare-fun _lbv6 () T13442)
(declare-fun v () T13442)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= (slen v) (+ (slen _lbv6) 1)))
(assert (= var_v9 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= _lbv1 (- int_gen 1)))
(assert (= (slen v) (+ (slen _lbv6) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv1 ), _lbv6 )
 Finding Already seen tree for apply cons  (, _lbv0 ), nil )
 Found _lbv7
 Finding Already seen tree for apply cons  (, _lbv0 ), _lbv9 )
 Typechecking apply cons  (, apply subs  (, s ) ), apply cons  (, int_gen ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv0 ), _lbv9 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv0 :: {v:Ty_int | (v) ==((s) -- (1))} | (_lbv0) ==((s) -- (1))
 Argument _lbv9 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                                                                     
 solver 
 (declare-sort T13483)
(declare-fun slen (T13483) Int)
(declare-fun nil () T13483)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun var_v9 () Bool)
(declare-fun _lbv9 () T13483)
(declare-fun v () T13483)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= (slen v) (+ (slen _lbv9) 1)))
(assert (= var_v9 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= _lbv0 (- s 1)))
(assert (= (slen v) (+ (slen _lbv9) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv0 ), _lbv9 )
 Finding Already seen tree for apply cons  (, _lbv0 ), _lbv8 )
 Typechecking apply cons  (, apply subs  (, s ) ), apply cons  (, s ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv0 ), _lbv8 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv0 :: {v:Ty_int | (v) ==((s) -- (1))} | (_lbv0) ==((s) -- (1))
 Argument _lbv8 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                                                                     
 solver 
 (declare-sort T13524)
(declare-fun slen (T13524) Int)
(declare-fun nil () T13524)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun var_v9 () Bool)
(declare-fun _lbv8 () T13524)
(declare-fun v () T13524)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= (slen v) (+ (slen _lbv8) 1)))
(assert (= var_v9 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= _lbv0 (- s 1)))
(assert (= (slen v) (+ (slen _lbv8) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv0 ), _lbv8 )
 Finding Already seen tree for apply cons  (, _lbv0 ), _lbv7 )
 Typechecking apply cons  (, apply subs  (, s ) ), apply cons  (, apply subs  (, s ) ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv0 ), _lbv7 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv0 :: {v:Ty_int | (v) ==((s) -- (1))} | (_lbv0) ==((s) -- (1))
 Argument _lbv7 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                                                                     
 solver 
 (declare-sort T13565)
(declare-fun slen (T13565) Int)
(declare-fun nil () T13565)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun var_v9 () Bool)
(declare-fun _lbv7 () T13565)
(declare-fun v () T13565)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= (slen v) (+ (slen _lbv7) 1)))
(assert (= var_v9 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= _lbv0 (- s 1)))
(assert (= (slen v) (+ (slen _lbv7) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv0 ), _lbv7 )
 Finding Already seen tree for apply cons  (, _lbv0 ), _lbv6 )
 Typechecking apply cons  (, apply subs  (, s ) ), apply cons  (, apply subs  (, int_gen ) ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv0 ), _lbv6 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv0 :: {v:Ty_int | (v) ==((s) -- (1))} | (_lbv0) ==((s) -- (1))
 Argument _lbv6 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                                                                     
 solver 
 (declare-sort T13606)
(declare-fun slen (T13606) Int)
(declare-fun nil () T13606)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun var_v9 () Bool)
(declare-fun _lbv6 () T13606)
(declare-fun v () T13606)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= (slen v) (+ (slen _lbv6) 1)))
(assert (= var_v9 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= _lbv0 (- s 1)))
(assert (= (slen v) (+ (slen _lbv6) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv0 ), _lbv6 )
 Finding Already seen tree for apply cons  (, s ), nil )
 Found _lbv8
 Finding Already seen tree for apply cons  (, s ), _lbv9 )
 Typechecking apply cons  (, s ), apply cons  (, int_gen ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, s ), _lbv9 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument s :: {v:Ty_int | true} | true
 Argument _lbv9 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                                                                     
 solver 
 (declare-sort T13647)
(declare-fun slen (T13647) Int)
(declare-fun nil () T13647)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun var_v9 () Bool)
(declare-fun _lbv9 () T13647)
(declare-fun v () T13647)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= (slen v) (+ (slen _lbv9) 1)))
(assert (= var_v9 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= (slen v) (+ (slen _lbv9) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, s ), _lbv9 )
 Finding Already seen tree for apply cons  (, s ), _lbv8 )
 Typechecking apply cons  (, s ), apply cons  (, s ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, s ), _lbv8 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument s :: {v:Ty_int | true} | true
 Argument _lbv8 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                                                                     
 solver 
 (declare-sort T13688)
(declare-fun slen (T13688) Int)
(declare-fun nil () T13688)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun var_v9 () Bool)
(declare-fun _lbv8 () T13688)
(declare-fun v () T13688)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= (slen v) (+ (slen _lbv8) 1)))
(assert (= var_v9 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= (slen v) (+ (slen _lbv8) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, s ), _lbv8 )
 Finding Already seen tree for apply cons  (, s ), _lbv7 )
 Typechecking apply cons  (, s ), apply cons  (, apply subs  (, s ) ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, s ), _lbv7 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument s :: {v:Ty_int | true} | true
 Argument _lbv7 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                                                                     
 solver 
 (declare-sort T13729)
(declare-fun slen (T13729) Int)
(declare-fun nil () T13729)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun var_v9 () Bool)
(declare-fun _lbv7 () T13729)
(declare-fun v () T13729)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= (slen v) (+ (slen _lbv7) 1)))
(assert (= var_v9 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= (slen v) (+ (slen _lbv7) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, s ), _lbv7 )
 Finding Already seen tree for apply cons  (, s ), _lbv6 )
 Typechecking apply cons  (, s ), apply cons  (, apply subs  (, int_gen ) ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, s ), _lbv6 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument s :: {v:Ty_int | true} | true
 Argument _lbv6 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                                                                     
 solver 
 (declare-sort T13770)
(declare-fun slen (T13770) Int)
(declare-fun nil () T13770)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun var_v9 () Bool)
(declare-fun _lbv6 () T13770)
(declare-fun v () T13770)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= (slen v) (+ (slen _lbv6) 1)))
(assert (= var_v9 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= (slen v) (+ (slen _lbv6) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, s ), _lbv6 )
 Finding Already seen tree for apply cons  (, int_gen ), nil )
 Found _lbv9
 Finding Already seen tree for apply cons  (, int_gen ), _lbv9 )
 Typechecking apply cons  (, int_gen ), apply cons  (, int_gen ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, int_gen ), _lbv9 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument int_gen :: {var_v1:Ty_int | true} | true
 Argument _lbv9 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                                                                     
 solver 
 (declare-sort T13811)
(declare-fun slen (T13811) Int)
(declare-fun nil () T13811)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun var_v9 () Bool)
(declare-fun _lbv9 () T13811)
(declare-fun v () T13811)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= (slen v) (+ (slen _lbv9) 1)))
(assert (= var_v9 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= (slen v) (+ (slen _lbv9) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, int_gen ), _lbv9 )
 Finding Already seen tree for apply cons  (, int_gen ), _lbv8 )
 Typechecking apply cons  (, int_gen ), apply cons  (, s ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, int_gen ), _lbv8 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument int_gen :: {var_v1:Ty_int | true} | true
 Argument _lbv8 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                                                                     
 solver 
 (declare-sort T13852)
(declare-fun slen (T13852) Int)
(declare-fun nil () T13852)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun var_v9 () Bool)
(declare-fun _lbv8 () T13852)
(declare-fun v () T13852)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= (slen v) (+ (slen _lbv8) 1)))
(assert (= var_v9 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= (slen v) (+ (slen _lbv8) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, int_gen ), _lbv8 )
 Finding Already seen tree for apply cons  (, int_gen ), _lbv7 )
 Typechecking apply cons  (, int_gen ), apply cons  (, apply subs  (, s ) ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, int_gen ), _lbv7 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument int_gen :: {var_v1:Ty_int | true} | true
 Argument _lbv7 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                                                                     
 solver 
 (declare-sort T13893)
(declare-fun slen (T13893) Int)
(declare-fun nil () T13893)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun var_v9 () Bool)
(declare-fun _lbv7 () T13893)
(declare-fun v () T13893)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= (slen v) (+ (slen _lbv7) 1)))
(assert (= var_v9 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= (slen v) (+ (slen _lbv7) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, int_gen ), _lbv7 )
 Finding Already seen tree for apply cons  (, int_gen ), _lbv6 )
 Typechecking apply cons  (, int_gen ), apply cons  (, apply subs  (, int_gen ) ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, int_gen ), _lbv6 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument int_gen :: {var_v1:Ty_int | true} | true
 Argument _lbv6 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                                                                     
 solver 
 (declare-sort T13934)
(declare-fun slen (T13934) Int)
(declare-fun nil () T13934)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun var_v9 () Bool)
(declare-fun _lbv6 () T13934)
(declare-fun v () T13934)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= (slen v) (+ (slen _lbv6) 1)))
(assert (= var_v9 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= (slen v) (+ (slen _lbv6) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, int_gen ), _lbv6 )
 Finding Already seen tree for apply cons  (, _lbv1 ), nil )
 Found _lbv6
 Finding Already seen tree for apply cons  (, _lbv1 ), _lbv9 )
 Typechecking apply cons  (, apply subs  (, int_gen ) ), apply cons  (, int_gen ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv1 ), _lbv9 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv1 :: {v:Ty_int | (v) ==((int_gen) -- (1))} | (_lbv1) ==((int_gen) -- (1))
 Argument _lbv9 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                                                                     
 solver 
 (declare-sort T13975)
(declare-fun slen (T13975) Int)
(declare-fun nil () T13975)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun var_v9 () Bool)
(declare-fun _lbv9 () T13975)
(declare-fun v () T13975)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= (slen v) (+ (slen _lbv9) 1)))
(assert (= var_v9 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= _lbv1 (- int_gen 1)))
(assert (= (slen v) (+ (slen _lbv9) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv1 ), _lbv9 )
 Finding Already seen tree for apply cons  (, _lbv1 ), _lbv8 )
 Typechecking apply cons  (, apply subs  (, int_gen ) ), apply cons  (, s ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv1 ), _lbv8 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv1 :: {v:Ty_int | (v) ==((int_gen) -- (1))} | (_lbv1) ==((int_gen) -- (1))
 Argument _lbv8 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                                                                     
 solver 
 (declare-sort T14016)
(declare-fun slen (T14016) Int)
(declare-fun nil () T14016)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun var_v9 () Bool)
(declare-fun _lbv8 () T14016)
(declare-fun v () T14016)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= (slen v) (+ (slen _lbv8) 1)))
(assert (= var_v9 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= _lbv1 (- int_gen 1)))
(assert (= (slen v) (+ (slen _lbv8) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv1 ), _lbv8 )
 Finding Already seen tree for apply cons  (, _lbv1 ), _lbv7 )
 Typechecking apply cons  (, apply subs  (, int_gen ) ), apply cons  (, apply subs  (, s ) ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv1 ), _lbv7 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv1 :: {v:Ty_int | (v) ==((int_gen) -- (1))} | (_lbv1) ==((int_gen) -- (1))
 Argument _lbv7 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                                                                     
 solver 
 (declare-sort T14057)
(declare-fun slen (T14057) Int)
(declare-fun nil () T14057)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun var_v9 () Bool)
(declare-fun _lbv7 () T14057)
(declare-fun v () T14057)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= (slen v) (+ (slen _lbv7) 1)))
(assert (= var_v9 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= _lbv1 (- int_gen 1)))
(assert (= (slen v) (+ (slen _lbv7) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv1 ), _lbv7 )
 Finding Already seen tree for apply cons  (, _lbv1 ), _lbv6 )
 Typechecking apply cons  (, apply subs  (, int_gen ) ), apply cons  (, apply subs  (, int_gen ) ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv1 ), _lbv6 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv1 :: {v:Ty_int | (v) ==((int_gen) -- (1))} | (_lbv1) ==((int_gen) -- (1))
 Argument _lbv6 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                                                                     
 solver 
 (declare-sort T14098)
(declare-fun slen (T14098) Int)
(declare-fun nil () T14098)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun var_v9 () Bool)
(declare-fun _lbv6 () T14098)
(declare-fun v () T14098)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= (slen v) (+ (slen _lbv6) 1)))
(assert (= var_v9 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= _lbv1 (- int_gen 1)))
(assert (= (slen v) (+ (slen _lbv6) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv1 ), _lbv6 )
 Finding Already seen tree for apply cons  (, _lbv0 ), nil )
 Found _lbv7
 Finding Already seen tree for apply cons  (, _lbv0 ), _lbv9 )
 Typechecking apply cons  (, apply subs  (, s ) ), apply cons  (, int_gen ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv0 ), _lbv9 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv0 :: {v:Ty_int | (v) ==((s) -- (1))} | (_lbv0) ==((s) -- (1))
 Argument _lbv9 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                                                                     
 solver 
 (declare-sort T14139)
(declare-fun slen (T14139) Int)
(declare-fun nil () T14139)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun var_v9 () Bool)
(declare-fun _lbv9 () T14139)
(declare-fun v () T14139)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= (slen v) (+ (slen _lbv9) 1)))
(assert (= var_v9 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= _lbv0 (- s 1)))
(assert (= (slen v) (+ (slen _lbv9) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv0 ), _lbv9 )
 Finding Already seen tree for apply cons  (, _lbv0 ), _lbv8 )
 Typechecking apply cons  (, apply subs  (, s ) ), apply cons  (, s ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv0 ), _lbv8 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv0 :: {v:Ty_int | (v) ==((s) -- (1))} | (_lbv0) ==((s) -- (1))
 Argument _lbv8 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                                                                     
 solver 
 (declare-sort T14180)
(declare-fun slen (T14180) Int)
(declare-fun nil () T14180)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun var_v9 () Bool)
(declare-fun _lbv8 () T14180)
(declare-fun v () T14180)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= (slen v) (+ (slen _lbv8) 1)))
(assert (= var_v9 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= _lbv0 (- s 1)))
(assert (= (slen v) (+ (slen _lbv8) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv0 ), _lbv8 )
 Finding Already seen tree for apply cons  (, _lbv0 ), _lbv7 )
 Typechecking apply cons  (, apply subs  (, s ) ), apply cons  (, apply subs  (, s ) ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv0 ), _lbv7 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv0 :: {v:Ty_int | (v) ==((s) -- (1))} | (_lbv0) ==((s) -- (1))
 Argument _lbv7 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                                                                     
 solver 
 (declare-sort T14221)
(declare-fun slen (T14221) Int)
(declare-fun nil () T14221)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun var_v9 () Bool)
(declare-fun _lbv7 () T14221)
(declare-fun v () T14221)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= (slen v) (+ (slen _lbv7) 1)))
(assert (= var_v9 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= _lbv0 (- s 1)))
(assert (= (slen v) (+ (slen _lbv7) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv0 ), _lbv7 )
 Finding Already seen tree for apply cons  (, _lbv0 ), _lbv6 )
 Typechecking apply cons  (, apply subs  (, s ) ), apply cons  (, apply subs  (, int_gen ) ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv0 ), _lbv6 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv0 :: {v:Ty_int | (v) ==((s) -- (1))} | (_lbv0) ==((s) -- (1))
 Argument _lbv6 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                                                                     
 solver 
 (declare-sort T14262)
(declare-fun slen (T14262) Int)
(declare-fun nil () T14262)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun var_v9 () Bool)
(declare-fun _lbv6 () T14262)
(declare-fun v () T14262)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= (slen v) (+ (slen _lbv6) 1)))
(assert (= var_v9 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= _lbv0 (- s 1)))
(assert (= (slen v) (+ (slen _lbv6) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv0 ), _lbv6 )
 True Branch :: Successfully Synthesisized
 *********************************************
 if apply sizecheck  (, s )
 	 then 
 ***********
 apply cons  (, apply subs  (, s ) ), nil )
 ***********
 apply cons  (, apply subs  (, int_gen ) ), nil )
 ***********
 apply cons  (, int_gen ), nil )
 ***********
 apply cons  (, s ), nil )
 ***********
 apply cons  (, apply subs  (, s ) ), nil )
 ***********
 apply cons  (, apply subs  (, int_gen ) ), nil )
 ************If Else False Branch**************
 *********************************************
 False Branch :: Trying False Branch
 Show :: Synthesizing the false branch
 Show :: False Predicate 
 	 Conj <c var_v9 = false
 	 , DoubleImpl 
 var_v9 = true
  
 	 Conj <c s = 0
 	 , DoubleImpl 
 var_v9 = false
  s > 0 >c  >c 
 Show ***********Calling Scalar synthesize***************
 esynthesizeScalar for {v:Ty_alphalist | (slen)(v) ==(s)}
  Enumeration for 
 spec 
 {v:Ty_alphalist | (slen)(v) ==(s)}
 
 Enumerating a Scalar Term nil
 
 Type of the Scalar Term {v:Ty_alphalist | (slen)(v) ==(0)}                                                                                                                                                                                                                     
 solver 
 (declare-sort T14304)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun var_v9 () Bool)
(declare-fun slen (T14304) Int)
(declare-fun nil () T14304)
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= (slen nil) 0))
(assert (= var_v9 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= (slen nil) 0))
(assert (not (= (slen nil) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
 
 Timeout the subtype check T_vi <: T_goal
 >>>>>>>>>>>>>>>>>> No Scalar found in Environment, Trying esynthesizePureApp <<<<<<<<<<<<<<<<<< 
  Pure Fun Application: esynthesizePureApp 
 Show Potential Functions
  , 
 goal, 
 cons
 ############################################################
  Trying Pure Component goal
  *************** Trying Arrow Component ************goal :  Arrow ( ( s1 : {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c } ) -> {v:Ty_alphalist | (slen)(v) ==(s1)}
  *************** Synthesizing Args ei : ti for ************goal
 ##################################################################################
  Synthesizing the 1th argument for Function goal
  Trying Arguments in Scalars 
 esynthesizeScalar for {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c }
  Enumeration for 
 spec 
 {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c }
 
 Enumerating a Scalar Term int_gen
 
 Type of the Scalar Term {var_v1:Ty_int | true}                                                                                                                                                                                                                          
 solver 
 (declare-sort T14344)
(declare-fun slen (T14344) Int)
(declare-fun nil () T14344)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun var_v9 () Bool)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= var_v9 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (not (> s int_gen)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
 
 Timeout the subtype check T_vi <: T_goal
 
 Enumerating a Scalar Term s
 
 Type of the Scalar Term {v:Ty_int | true}                                                                                                                                                                                                                          
 solver 
 (declare-sort T14385)
(declare-fun slen (T14385) Int)
(declare-fun nil () T14385)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun var_v9 () Bool)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= var_v9 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (not (> s s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
 
 Timeout the subtype check T_vi <: T_goal
 
 Enumerating a Scalar Term _lbv0
 
 Type of the Scalar Term {v:Ty_int | (v) ==((s) -- (1))}                                                                                                                                                                                                                          
 solver 
 (declare-sort T14426)
(declare-fun slen (T14426) Int)
(declare-fun nil () T14426)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun s () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun var_v9 () Bool)
(assert (= (slen nil) 0))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= _lbv0 (- s 1)))
(assert (= var_v9 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= _lbv0 (- s 1)))
(assert (not (> s _lbv0)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
 
 Timedout the subtype check T_vi <: T_goal
 
 Enumerating a Scalar Term _lbv1
 
 Type of the Scalar Term {v:Ty_int | (v) ==((int_gen) -- (1))}                                                                                                                                                                                                                          
 solver 
 (declare-sort T14467)
(declare-fun slen (T14467) Int)
(declare-fun nil () T14467)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun int_gen () Int)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun var_v9 () Bool)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= _lbv1 (- int_gen 1)))
(assert (= var_v9 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= _lbv1 (- int_gen 1)))
(assert (not (> s _lbv1)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
 
 Timedout the subtype check T_vi <: T_goal
 >>>>>>>>>>>>>>>>>> No Scalar found in Environment, Trying esynthesizePureApp <<<<<<<<<<<<<<<<<< 
  Pure Fun Application: esynthesizePureApp 
 Show Potential Functions
  , 
 subs
 ############################################################
  Trying Pure Component subs
  *************** Trying Arrow Component ************subs :  Arrow ( ( n1 : {var_v0:Ty_int | true} ) -> {v:Ty_int | (v) ==((n1) -- (1))}
  *************** Synthesizing Args ei : ti for ************subs
 ##################################################################################
  Synthesizing the 1th argument for Function subs
  Trying Arguments in Scalars 
 esynthesizeScalar for {var_v0:Ty_int | true}
  Enumeration for 
 spec 
 {var_v0:Ty_int | true}
 
 Enumerating a Scalar Term int_gen
 
 Type of the Scalar Term {var_v1:Ty_int | true}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 
 Enumerating a Scalar Term s
 
 Type of the Scalar Term {v:Ty_int | true}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 
 Enumerating a Scalar Term _lbv0
 
 Type of the Scalar Term {v:Ty_int | (v) ==((s) -- (1))}
 ################################################
 Skipping Variable _lbv0 As Outer Function Call is subs
 
 Enumerating a Scalar Term _lbv1
 
 Type of the Scalar Term {v:Ty_int | (v) ==((int_gen) -- (1))}
 ################################################
 Skipping Variable _lbv1 As Outer Function Call is subs
 Show :: Found a Few Macthing Scalars 
  Next Trying Arguments of the form f (ei...) 
  Pure Fun Application: esynthesizePureApp 
 ##################################################################################
  *************** Successfully Synthesized Args ei Forall i 
 # of Possible Argument Options for subs 2
 Possible Arg Options 
 EI s
 Possible Arg Options 
 EI int_gen
 Apply Single Argument Case : f (ei) Case subs
  Case : f (ei) Case subs s
 Finding Already seen tree for apply subs  (, s )
 Found _lbv0
  Case : f (ei) Case subs int_gen
 Finding Already seen tree for apply subs  (, int_gen )
 Found _lbv1
  Next Trying Arguments of the form f (ei...) 
  Pure Fun Application: esynthesizePureApp 
 Show Potential Functions
  , 
 subs
 ############################################################
  Trying Pure Component subs
 ##################################################################################
  *************** Successfully Synthesized Args ei Forall i 
 # of Possible Argument Options for goal 2
 Possible Arg Options 
 EI _lbv1
 Possible Arg Options 
 EI _lbv0
 Apply Single Argument Case : f (ei) Case goal
  Case : f (ei) Case goal _lbv1
 Finding Already seen tree for apply goal  (, _lbv1 )
 Typechecking the Term apply goal  (, _lbv1 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv1 :: {v:Ty_int | (v) ==((int_gen) -- (1))} | (_lbv1) ==((int_gen) -- (1))                                                                                                                                                                                                                     
 solver 
 (declare-sort T14584)
(declare-fun slen (T14584) Int)
(declare-fun nil () T14584)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun var_v9 () Bool)
(declare-fun v () T14584)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= (slen v) _lbv1))
(assert (= var_v9 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= _lbv1 (- int_gen 1)))
(assert (= (slen v) _lbv1))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply goal  (, _lbv1 )
  Case : f (ei) Case goal _lbv0
 Finding Already seen tree for apply goal  (, _lbv0 )
 Typechecking the Term apply goal  (, _lbv0 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv0 :: {v:Ty_int | (v) ==((s) -- (1))} | (_lbv0) ==((s) -- (1))                                                                                                                                                                                                                     
 solver 
 (declare-sort T14625)
(declare-fun slen (T14625) Int)
(declare-fun nil () T14625)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun var_v9 () Bool)
(declare-fun v () T14625)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= (slen v) _lbv0))
(assert (= var_v9 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= _lbv0 (- s 1)))
(assert (= (slen v) _lbv0))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply goal  (, _lbv0 )
  ###################################################
  The Choice of Function goal Was Ill Fated Try Next Choice of function
 ############################################################
  Trying Pure Component cons
  *************** Trying Arrow Component ************cons :  Arrow ( ( x : {var_v3:Ty_int | true} ) ->  Arrow ( ( xs : {var_v4:Ty_alphalist | true} ) -> {v:Ty_alphalist | (slen)(v) ==((slen)(xs) + (1))}
  *************** Synthesizing Args ei : ti for ************cons
 ##################################################################################
  Synthesizing the 1th argument for Function cons
  Trying Arguments in Scalars 
 esynthesizeScalar for {var_v3:Ty_int | true}
  Enumeration for 
 spec 
 {var_v3:Ty_int | true}
 
 Enumerating a Scalar Term int_gen
 
 Type of the Scalar Term {var_v1:Ty_int | true}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 
 Enumerating a Scalar Term s
 
 Type of the Scalar Term {v:Ty_int | true}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 
 Enumerating a Scalar Term _lbv0
 
 Type of the Scalar Term {v:Ty_int | (v) ==((s) -- (1))}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 
 Enumerating a Scalar Term _lbv1
 
 Type of the Scalar Term {v:Ty_int | (v) ==((int_gen) -- (1))}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 Show :: Found a Few Macthing Scalars 
  Next Trying Arguments of the form f (ei...) 
  Pure Fun Application: esynthesizePureApp 
 Show Potential Functions
  , 
 subs
 ############################################################
  Trying Pure Component subs
  *************** Trying Arrow Component ************subs :  Arrow ( ( n1 : {var_v0:Ty_int | true} ) -> {v:Ty_int | (v) ==((n1) -- (1))}
  *************** Synthesizing Args ei : ti for ************subs
 ##################################################################################
  Synthesizing the 1th argument for Function subs
  Trying Arguments in Scalars 
 esynthesizeScalar for {var_v0:Ty_int | true}
  Enumeration for 
 spec 
 {var_v0:Ty_int | true}
 
 Enumerating a Scalar Term int_gen
 
 Type of the Scalar Term {var_v1:Ty_int | true}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 
 Enumerating a Scalar Term s
 
 Type of the Scalar Term {v:Ty_int | true}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 
 Enumerating a Scalar Term _lbv0
 
 Type of the Scalar Term {v:Ty_int | (v) ==((s) -- (1))}
 ################################################
 Skipping Variable _lbv0 As Outer Function Call is subs
 
 Enumerating a Scalar Term _lbv1
 
 Type of the Scalar Term {v:Ty_int | (v) ==((int_gen) -- (1))}
 ################################################
 Skipping Variable _lbv1 As Outer Function Call is subs
 Show :: Found a Few Macthing Scalars 
  Next Trying Arguments of the form f (ei...) 
  Pure Fun Application: esynthesizePureApp 
 ##################################################################################
  *************** Successfully Synthesized Args ei Forall i 
 # of Possible Argument Options for subs 2
 Possible Arg Options 
 EI s
 Possible Arg Options 
 EI int_gen
 Apply Single Argument Case : f (ei) Case subs
  Case : f (ei) Case subs s
 Finding Already seen tree for apply subs  (, s )
 Found _lbv0
  Case : f (ei) Case subs int_gen
 Finding Already seen tree for apply subs  (, int_gen )
 Found _lbv1
 ##################################################################################
  Synthesizing the 2th argument for Function cons
  Trying Arguments in Scalars 
 esynthesizeScalar for {var_v4:Ty_alphalist | true}
  Enumeration for 
 spec 
 {var_v4:Ty_alphalist | true}
 
 Enumerating a Scalar Term nil
 
 Type of the Scalar Term {v:Ty_alphalist | (slen)(v) ==(0)}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 Show :: Found a Few Macthing Scalars 
  Next Trying Arguments of the form f (ei...) 
  Pure Fun Application: esynthesizePureApp 
 Show Potential Functions
  , 
 goal, 
 cons
 ############################################################
  Trying Pure Component goal
  *************** Trying Arrow Component ************goal :  Arrow ( ( s1 : {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c } ) -> {v:Ty_alphalist | (slen)(v) ==(s1)}
  *************** Synthesizing Args ei : ti for ************goal
 ##################################################################################
  Synthesizing the 1th argument for Function goal
  Trying Arguments in Scalars 
 esynthesizeScalar for {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c }
  Enumeration for 
 spec 
 {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c }
 
 Enumerating a Scalar Term int_gen
 
 Type of the Scalar Term {var_v1:Ty_int | true}                                                                                                                                                                                                                          
 solver 
 (declare-sort T14932)
(declare-fun slen (T14932) Int)
(declare-fun nil () T14932)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun var_v9 () Bool)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= var_v9 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (not (> s int_gen)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
 
 Timeout the subtype check T_vi <: T_goal
 
 Enumerating a Scalar Term s
 
 Type of the Scalar Term {v:Ty_int | true}                                                                                                                                                                                                                          
 solver 
 (declare-sort T14973)
(declare-fun slen (T14973) Int)
(declare-fun nil () T14973)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun var_v9 () Bool)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= var_v9 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (not (> s s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
 
 Timeout the subtype check T_vi <: T_goal
 
 Enumerating a Scalar Term _lbv0
 
 Type of the Scalar Term {v:Ty_int | (v) ==((s) -- (1))}                                                                                                                                                                                                                          
 solver 
 (declare-sort T15014)
(declare-fun slen (T15014) Int)
(declare-fun nil () T15014)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun s () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun var_v9 () Bool)
(assert (= (slen nil) 0))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= _lbv0 (- s 1)))
(assert (= var_v9 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= _lbv0 (- s 1)))
(assert (not (> s _lbv0)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
 
 Timedout the subtype check T_vi <: T_goal
 
 Enumerating a Scalar Term _lbv1
 
 Type of the Scalar Term {v:Ty_int | (v) ==((int_gen) -- (1))}                                                                                                                                                                                                                          
 solver 
 (declare-sort T15055)
(declare-fun slen (T15055) Int)
(declare-fun nil () T15055)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun int_gen () Int)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun var_v9 () Bool)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= _lbv1 (- int_gen 1)))
(assert (= var_v9 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= _lbv1 (- int_gen 1)))
(assert (not (> s _lbv1)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
 
 Timedout the subtype check T_vi <: T_goal
 >>>>>>>>>>>>>>>>>> No Scalar found in Environment, Trying esynthesizePureApp <<<<<<<<<<<<<<<<<< 
  Pure Fun Application: esynthesizePureApp 
 >>>>>>>>>>>>>>>>>>  No pureApp found, Call esynthesizeConsApp <<<<<<<<<<<<<< 
  Next Trying Arguments of the form f (ei...) 
  Pure Fun Application: esynthesizePureApp 
 ##################################################################################
  *************** Synthesizing Args ei : Failed for some  arg
 ############################################################
  Trying Pure Component cons
  *************** Trying Arrow Component ************cons :  Arrow ( ( x : {var_v3:Ty_int | true} ) ->  Arrow ( ( xs : {var_v4:Ty_alphalist | true} ) -> {v:Ty_alphalist | (slen)(v) ==((slen)(xs) + (1))}
  *************** Synthesizing Args ei : ti for ************cons
 ##################################################################################
  Synthesizing the 1th argument for Function cons
  Trying Arguments in Scalars 
 esynthesizeScalar for {var_v3:Ty_int | true}
  Enumeration for 
 spec 
 {var_v3:Ty_int | true}
 
 Enumerating a Scalar Term int_gen
 
 Type of the Scalar Term {var_v1:Ty_int | true}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 
 Enumerating a Scalar Term s
 
 Type of the Scalar Term {v:Ty_int | true}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 
 Enumerating a Scalar Term _lbv0
 
 Type of the Scalar Term {v:Ty_int | (v) ==((s) -- (1))}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 
 Enumerating a Scalar Term _lbv1
 
 Type of the Scalar Term {v:Ty_int | (v) ==((int_gen) -- (1))}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 Show :: Found a Few Macthing Scalars 
  Next Trying Arguments of the form f (ei...) 
  Pure Fun Application: esynthesizePureApp 
 ##################################################################################
  Synthesizing the 2th argument for Function cons
  Trying Arguments in Scalars 
 esynthesizeScalar for {var_v4:Ty_alphalist | true}
  Enumeration for 
 spec 
 {var_v4:Ty_alphalist | true}
 
 Enumerating a Scalar Term nil
 
 Type of the Scalar Term {v:Ty_alphalist | (slen)(v) ==(0)}
 solver 
 (assert false)
(assert (not true))

 $$$$$$$$$$$$$ Success SMT $$$$$$$$$$$$$$
 Show :: Found a Few Macthing Scalars 
  Next Trying Arguments of the form f (ei...) 
  Pure Fun Application: esynthesizePureApp 
 ##################################################################################
  *************** Successfully Synthesized Args ei Forall i 
 # of Possible Argument Options for cons 4
 Possible Arg Options 
 EI _lbv1
 EI nil
 Possible Arg Options 
 EI _lbv0
 EI nil
 Possible Arg Options 
 EI s
 EI nil
 Possible Arg Options 
 EI int_gen
 EI nil
 Show f (ei, e2, ....en) Case
 Finding Already seen tree for apply cons  (, _lbv1 ), nil )
 Found _lbv6
 Finding Already seen tree for apply cons  (, _lbv0 ), nil )
 Found _lbv7
 Finding Already seen tree for apply cons  (, s ), nil )
 Found _lbv8
 Finding Already seen tree for apply cons  (, int_gen ), nil )
 Found _lbv9
 ##################################################################################
  *************** Successfully Synthesized Args ei Forall i 
 # of Possible Argument Options for cons 30
 Possible Arg Options 
 EI _lbv1
 EI nil
 Possible Arg Options 
 EI _lbv1
 EI _lbv9
 Possible Arg Options 
 EI _lbv1
 EI _lbv8
 Possible Arg Options 
 EI _lbv1
 EI _lbv7
 Possible Arg Options 
 EI _lbv1
 EI _lbv6
 Possible Arg Options 
 EI _lbv0
 EI nil
 Possible Arg Options 
 EI _lbv0
 EI _lbv9
 Possible Arg Options 
 EI _lbv0
 EI _lbv8
 Possible Arg Options 
 EI _lbv0
 EI _lbv7
 Possible Arg Options 
 EI _lbv0
 EI _lbv6
 Possible Arg Options 
 EI s
 EI nil
 Possible Arg Options 
 EI s
 EI _lbv9
 Possible Arg Options 
 EI s
 EI _lbv8
 Possible Arg Options 
 EI s
 EI _lbv7
 Possible Arg Options 
 EI s
 EI _lbv6
 Possible Arg Options 
 EI int_gen
 EI nil
 Possible Arg Options 
 EI int_gen
 EI _lbv9
 Possible Arg Options 
 EI int_gen
 EI _lbv8
 Possible Arg Options 
 EI int_gen
 EI _lbv7
 Possible Arg Options 
 EI int_gen
 EI _lbv6
 Possible Arg Options 
 EI _lbv1
 EI nil
 Possible Arg Options 
 EI _lbv1
 EI _lbv9
 Possible Arg Options 
 EI _lbv1
 EI _lbv8
 Possible Arg Options 
 EI _lbv1
 EI _lbv7
 Possible Arg Options 
 EI _lbv1
 EI _lbv6
 Possible Arg Options 
 EI _lbv0
 EI nil
 Possible Arg Options 
 EI _lbv0
 EI _lbv9
 Possible Arg Options 
 EI _lbv0
 EI _lbv8
 Possible Arg Options 
 EI _lbv0
 EI _lbv7
 Possible Arg Options 
 EI _lbv0
 EI _lbv6
 Show f (ei, e2, ....en) Case
 Finding Already seen tree for apply cons  (, _lbv1 ), nil )
 Found _lbv6
 Finding Already seen tree for apply cons  (, _lbv1 ), _lbv9 )
 Typechecking apply cons  (, apply subs  (, int_gen ) ), apply cons  (, int_gen ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv1 ), _lbv9 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv1 :: {v:Ty_int | (v) ==((int_gen) -- (1))} | (_lbv1) ==((int_gen) -- (1))
 Argument _lbv9 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                                                                     
 solver 
 (declare-sort T15286)
(declare-fun slen (T15286) Int)
(declare-fun nil () T15286)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun var_v9 () Bool)
(declare-fun _lbv9 () T15286)
(declare-fun v () T15286)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= (slen v) (+ (slen _lbv9) 1)))
(assert (= var_v9 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= _lbv1 (- int_gen 1)))
(assert (= (slen v) (+ (slen _lbv9) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv1 ), _lbv9 )
 Finding Already seen tree for apply cons  (, _lbv1 ), _lbv8 )
 Typechecking apply cons  (, apply subs  (, int_gen ) ), apply cons  (, s ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv1 ), _lbv8 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv1 :: {v:Ty_int | (v) ==((int_gen) -- (1))} | (_lbv1) ==((int_gen) -- (1))
 Argument _lbv8 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                                                                     
 solver 
 (declare-sort T15327)
(declare-fun slen (T15327) Int)
(declare-fun nil () T15327)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun var_v9 () Bool)
(declare-fun _lbv8 () T15327)
(declare-fun v () T15327)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= (slen v) (+ (slen _lbv8) 1)))
(assert (= var_v9 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= _lbv1 (- int_gen 1)))
(assert (= (slen v) (+ (slen _lbv8) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv1 ), _lbv8 )
 Finding Already seen tree for apply cons  (, _lbv1 ), _lbv7 )
 Typechecking apply cons  (, apply subs  (, int_gen ) ), apply cons  (, apply subs  (, s ) ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv1 ), _lbv7 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv1 :: {v:Ty_int | (v) ==((int_gen) -- (1))} | (_lbv1) ==((int_gen) -- (1))
 Argument _lbv7 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                                                                     
 solver 
 (declare-sort T15368)
(declare-fun slen (T15368) Int)
(declare-fun nil () T15368)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun var_v9 () Bool)
(declare-fun _lbv7 () T15368)
(declare-fun v () T15368)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= (slen v) (+ (slen _lbv7) 1)))
(assert (= var_v9 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= _lbv1 (- int_gen 1)))
(assert (= (slen v) (+ (slen _lbv7) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv1 ), _lbv7 )
 Finding Already seen tree for apply cons  (, _lbv1 ), _lbv6 )
 Typechecking apply cons  (, apply subs  (, int_gen ) ), apply cons  (, apply subs  (, int_gen ) ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv1 ), _lbv6 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv1 :: {v:Ty_int | (v) ==((int_gen) -- (1))} | (_lbv1) ==((int_gen) -- (1))
 Argument _lbv6 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                                                                     
 solver 
 (declare-sort T15409)
(declare-fun slen (T15409) Int)
(declare-fun nil () T15409)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun var_v9 () Bool)
(declare-fun _lbv6 () T15409)
(declare-fun v () T15409)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= (slen v) (+ (slen _lbv6) 1)))
(assert (= var_v9 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= _lbv1 (- int_gen 1)))
(assert (= (slen v) (+ (slen _lbv6) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv1 ), _lbv6 )
 Finding Already seen tree for apply cons  (, _lbv0 ), nil )
 Found _lbv7
 Finding Already seen tree for apply cons  (, _lbv0 ), _lbv9 )
 Typechecking apply cons  (, apply subs  (, s ) ), apply cons  (, int_gen ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv0 ), _lbv9 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv0 :: {v:Ty_int | (v) ==((s) -- (1))} | (_lbv0) ==((s) -- (1))
 Argument _lbv9 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                                                                     
 solver 
 (declare-sort T15450)
(declare-fun slen (T15450) Int)
(declare-fun nil () T15450)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun var_v9 () Bool)
(declare-fun _lbv9 () T15450)
(declare-fun v () T15450)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= (slen v) (+ (slen _lbv9) 1)))
(assert (= var_v9 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= _lbv0 (- s 1)))
(assert (= (slen v) (+ (slen _lbv9) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv0 ), _lbv9 )
 Finding Already seen tree for apply cons  (, _lbv0 ), _lbv8 )
 Typechecking apply cons  (, apply subs  (, s ) ), apply cons  (, s ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv0 ), _lbv8 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv0 :: {v:Ty_int | (v) ==((s) -- (1))} | (_lbv0) ==((s) -- (1))
 Argument _lbv8 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                                                                     
 solver 
 (declare-sort T15491)
(declare-fun slen (T15491) Int)
(declare-fun nil () T15491)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun var_v9 () Bool)
(declare-fun _lbv8 () T15491)
(declare-fun v () T15491)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= (slen v) (+ (slen _lbv8) 1)))
(assert (= var_v9 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= _lbv0 (- s 1)))
(assert (= (slen v) (+ (slen _lbv8) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv0 ), _lbv8 )
 Finding Already seen tree for apply cons  (, _lbv0 ), _lbv7 )
 Typechecking apply cons  (, apply subs  (, s ) ), apply cons  (, apply subs  (, s ) ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv0 ), _lbv7 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv0 :: {v:Ty_int | (v) ==((s) -- (1))} | (_lbv0) ==((s) -- (1))
 Argument _lbv7 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                                                                     
 solver 
 (declare-sort T15532)
(declare-fun slen (T15532) Int)
(declare-fun nil () T15532)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun var_v9 () Bool)
(declare-fun _lbv7 () T15532)
(declare-fun v () T15532)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= (slen v) (+ (slen _lbv7) 1)))
(assert (= var_v9 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= _lbv0 (- s 1)))
(assert (= (slen v) (+ (slen _lbv7) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv0 ), _lbv7 )
 Finding Already seen tree for apply cons  (, _lbv0 ), _lbv6 )
 Typechecking apply cons  (, apply subs  (, s ) ), apply cons  (, apply subs  (, int_gen ) ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv0 ), _lbv6 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv0 :: {v:Ty_int | (v) ==((s) -- (1))} | (_lbv0) ==((s) -- (1))
 Argument _lbv6 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                                                                     
 solver 
 (declare-sort T15573)
(declare-fun slen (T15573) Int)
(declare-fun nil () T15573)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun var_v9 () Bool)
(declare-fun _lbv6 () T15573)
(declare-fun v () T15573)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= (slen v) (+ (slen _lbv6) 1)))
(assert (= var_v9 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= _lbv0 (- s 1)))
(assert (= (slen v) (+ (slen _lbv6) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv0 ), _lbv6 )
 Finding Already seen tree for apply cons  (, s ), nil )
 Found _lbv8
 Finding Already seen tree for apply cons  (, s ), _lbv9 )
 Typechecking apply cons  (, s ), apply cons  (, int_gen ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, s ), _lbv9 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument s :: {v:Ty_int | true} | true
 Argument _lbv9 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                                                                     
 solver 
 (declare-sort T15614)
(declare-fun slen (T15614) Int)
(declare-fun nil () T15614)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun var_v9 () Bool)
(declare-fun _lbv9 () T15614)
(declare-fun v () T15614)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= (slen v) (+ (slen _lbv9) 1)))
(assert (= var_v9 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= (slen v) (+ (slen _lbv9) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, s ), _lbv9 )
 Finding Already seen tree for apply cons  (, s ), _lbv8 )
 Typechecking apply cons  (, s ), apply cons  (, s ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, s ), _lbv8 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument s :: {v:Ty_int | true} | true
 Argument _lbv8 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                                                                     
 solver 
 (declare-sort T15655)
(declare-fun slen (T15655) Int)
(declare-fun nil () T15655)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun var_v9 () Bool)
(declare-fun _lbv8 () T15655)
(declare-fun v () T15655)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= (slen v) (+ (slen _lbv8) 1)))
(assert (= var_v9 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= (slen v) (+ (slen _lbv8) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, s ), _lbv8 )
 Finding Already seen tree for apply cons  (, s ), _lbv7 )
 Typechecking apply cons  (, s ), apply cons  (, apply subs  (, s ) ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, s ), _lbv7 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument s :: {v:Ty_int | true} | true
 Argument _lbv7 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                                                                     
 solver 
 (declare-sort T15696)
(declare-fun slen (T15696) Int)
(declare-fun nil () T15696)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun var_v9 () Bool)
(declare-fun _lbv7 () T15696)
(declare-fun v () T15696)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= (slen v) (+ (slen _lbv7) 1)))
(assert (= var_v9 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= (slen v) (+ (slen _lbv7) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, s ), _lbv7 )
 Finding Already seen tree for apply cons  (, s ), _lbv6 )
 Typechecking apply cons  (, s ), apply cons  (, apply subs  (, int_gen ) ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, s ), _lbv6 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument s :: {v:Ty_int | true} | true
 Argument _lbv6 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                                                                     
 solver 
 (declare-sort T15737)
(declare-fun slen (T15737) Int)
(declare-fun nil () T15737)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun var_v9 () Bool)
(declare-fun _lbv6 () T15737)
(declare-fun v () T15737)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= (slen v) (+ (slen _lbv6) 1)))
(assert (= var_v9 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= (slen v) (+ (slen _lbv6) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, s ), _lbv6 )
 Finding Already seen tree for apply cons  (, int_gen ), nil )
 Found _lbv9
 Finding Already seen tree for apply cons  (, int_gen ), _lbv9 )
 Typechecking apply cons  (, int_gen ), apply cons  (, int_gen ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, int_gen ), _lbv9 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument int_gen :: {var_v1:Ty_int | true} | true
 Argument _lbv9 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                                                                     
 solver 
 (declare-sort T15778)
(declare-fun slen (T15778) Int)
(declare-fun nil () T15778)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun var_v9 () Bool)
(declare-fun _lbv9 () T15778)
(declare-fun v () T15778)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= (slen v) (+ (slen _lbv9) 1)))
(assert (= var_v9 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= (slen v) (+ (slen _lbv9) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, int_gen ), _lbv9 )
 Finding Already seen tree for apply cons  (, int_gen ), _lbv8 )
 Typechecking apply cons  (, int_gen ), apply cons  (, s ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, int_gen ), _lbv8 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument int_gen :: {var_v1:Ty_int | true} | true
 Argument _lbv8 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                                                                     
 solver 
 (declare-sort T15819)
(declare-fun slen (T15819) Int)
(declare-fun nil () T15819)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun var_v9 () Bool)
(declare-fun _lbv8 () T15819)
(declare-fun v () T15819)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= (slen v) (+ (slen _lbv8) 1)))
(assert (= var_v9 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= (slen v) (+ (slen _lbv8) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, int_gen ), _lbv8 )
 Finding Already seen tree for apply cons  (, int_gen ), _lbv7 )
 Typechecking apply cons  (, int_gen ), apply cons  (, apply subs  (, s ) ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, int_gen ), _lbv7 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument int_gen :: {var_v1:Ty_int | true} | true
 Argument _lbv7 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                                                                     
 solver 
 (declare-sort T15860)
(declare-fun slen (T15860) Int)
(declare-fun nil () T15860)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun var_v9 () Bool)
(declare-fun _lbv7 () T15860)
(declare-fun v () T15860)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= (slen v) (+ (slen _lbv7) 1)))
(assert (= var_v9 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= (slen v) (+ (slen _lbv7) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, int_gen ), _lbv7 )
 Finding Already seen tree for apply cons  (, int_gen ), _lbv6 )
 Typechecking apply cons  (, int_gen ), apply cons  (, apply subs  (, int_gen ) ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, int_gen ), _lbv6 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument int_gen :: {var_v1:Ty_int | true} | true
 Argument _lbv6 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                                                                     
 solver 
 (declare-sort T15901)
(declare-fun slen (T15901) Int)
(declare-fun nil () T15901)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun var_v9 () Bool)
(declare-fun _lbv6 () T15901)
(declare-fun v () T15901)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= (slen v) (+ (slen _lbv6) 1)))
(assert (= var_v9 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= (slen v) (+ (slen _lbv6) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, int_gen ), _lbv6 )
 Finding Already seen tree for apply cons  (, _lbv1 ), nil )
 Found _lbv6
 Finding Already seen tree for apply cons  (, _lbv1 ), _lbv9 )
 Typechecking apply cons  (, apply subs  (, int_gen ) ), apply cons  (, int_gen ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv1 ), _lbv9 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv1 :: {v:Ty_int | (v) ==((int_gen) -- (1))} | (_lbv1) ==((int_gen) -- (1))
 Argument _lbv9 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                                                                     
 solver 
 (declare-sort T15942)
(declare-fun slen (T15942) Int)
(declare-fun nil () T15942)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun var_v9 () Bool)
(declare-fun _lbv9 () T15942)
(declare-fun v () T15942)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= (slen v) (+ (slen _lbv9) 1)))
(assert (= var_v9 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= _lbv1 (- int_gen 1)))
(assert (= (slen v) (+ (slen _lbv9) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv1 ), _lbv9 )
 Finding Already seen tree for apply cons  (, _lbv1 ), _lbv8 )
 Typechecking apply cons  (, apply subs  (, int_gen ) ), apply cons  (, s ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv1 ), _lbv8 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv1 :: {v:Ty_int | (v) ==((int_gen) -- (1))} | (_lbv1) ==((int_gen) -- (1))
 Argument _lbv8 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                                                                     
 solver 
 (declare-sort T15983)
(declare-fun slen (T15983) Int)
(declare-fun nil () T15983)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun var_v9 () Bool)
(declare-fun _lbv8 () T15983)
(declare-fun v () T15983)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= (slen v) (+ (slen _lbv8) 1)))
(assert (= var_v9 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= _lbv1 (- int_gen 1)))
(assert (= (slen v) (+ (slen _lbv8) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv1 ), _lbv8 )
 Finding Already seen tree for apply cons  (, _lbv1 ), _lbv7 )
 Typechecking apply cons  (, apply subs  (, int_gen ) ), apply cons  (, apply subs  (, s ) ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv1 ), _lbv7 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv1 :: {v:Ty_int | (v) ==((int_gen) -- (1))} | (_lbv1) ==((int_gen) -- (1))
 Argument _lbv7 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                                                                     
 solver 
 (declare-sort T16024)
(declare-fun slen (T16024) Int)
(declare-fun nil () T16024)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun var_v9 () Bool)
(declare-fun _lbv7 () T16024)
(declare-fun v () T16024)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= (slen v) (+ (slen _lbv7) 1)))
(assert (= var_v9 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= _lbv1 (- int_gen 1)))
(assert (= (slen v) (+ (slen _lbv7) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv1 ), _lbv7 )
 Finding Already seen tree for apply cons  (, _lbv1 ), _lbv6 )
 Typechecking apply cons  (, apply subs  (, int_gen ) ), apply cons  (, apply subs  (, int_gen ) ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv1 ), _lbv6 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv1 :: {v:Ty_int | (v) ==((int_gen) -- (1))} | (_lbv1) ==((int_gen) -- (1))
 Argument _lbv6 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                                                                     
 solver 
 (declare-sort T16065)
(declare-fun slen (T16065) Int)
(declare-fun nil () T16065)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun var_v9 () Bool)
(declare-fun _lbv6 () T16065)
(declare-fun v () T16065)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= (slen v) (+ (slen _lbv6) 1)))
(assert (= var_v9 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= _lbv1 (- int_gen 1)))
(assert (= (slen v) (+ (slen _lbv6) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv1 ), _lbv6 )
 Finding Already seen tree for apply cons  (, _lbv0 ), nil )
 Found _lbv7
 Finding Already seen tree for apply cons  (, _lbv0 ), _lbv9 )
 Typechecking apply cons  (, apply subs  (, s ) ), apply cons  (, int_gen ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv0 ), _lbv9 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv0 :: {v:Ty_int | (v) ==((s) -- (1))} | (_lbv0) ==((s) -- (1))
 Argument _lbv9 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                                                                     
 solver 
 (declare-sort T16106)
(declare-fun slen (T16106) Int)
(declare-fun nil () T16106)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun var_v9 () Bool)
(declare-fun _lbv9 () T16106)
(declare-fun v () T16106)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= (slen v) (+ (slen _lbv9) 1)))
(assert (= var_v9 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= _lbv0 (- s 1)))
(assert (= (slen v) (+ (slen _lbv9) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv0 ), _lbv9 )
 Finding Already seen tree for apply cons  (, _lbv0 ), _lbv8 )
 Typechecking apply cons  (, apply subs  (, s ) ), apply cons  (, s ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv0 ), _lbv8 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv0 :: {v:Ty_int | (v) ==((s) -- (1))} | (_lbv0) ==((s) -- (1))
 Argument _lbv8 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                                                                     
 solver 
 (declare-sort T16147)
(declare-fun slen (T16147) Int)
(declare-fun nil () T16147)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun var_v9 () Bool)
(declare-fun _lbv8 () T16147)
(declare-fun v () T16147)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= (slen v) (+ (slen _lbv8) 1)))
(assert (= var_v9 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= _lbv0 (- s 1)))
(assert (= (slen v) (+ (slen _lbv8) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv0 ), _lbv8 )
 Finding Already seen tree for apply cons  (, _lbv0 ), _lbv7 )
 Typechecking apply cons  (, apply subs  (, s ) ), apply cons  (, apply subs  (, s ) ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv0 ), _lbv7 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv0 :: {v:Ty_int | (v) ==((s) -- (1))} | (_lbv0) ==((s) -- (1))
 Argument _lbv7 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                                                                     
 solver 
 (declare-sort T16188)
(declare-fun slen (T16188) Int)
(declare-fun nil () T16188)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun var_v9 () Bool)
(declare-fun _lbv7 () T16188)
(declare-fun v () T16188)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= (slen v) (+ (slen _lbv7) 1)))
(assert (= var_v9 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= _lbv0 (- s 1)))
(assert (= (slen v) (+ (slen _lbv7) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv0 ), _lbv7 )
 Finding Already seen tree for apply cons  (, _lbv0 ), _lbv6 )
 Typechecking apply cons  (, apply subs  (, s ) ), apply cons  (, apply subs  (, int_gen ) ), nil ) )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Typechecking the Term apply cons  (, _lbv0 ), _lbv6 )
 Against {v:Ty_alphalist | (slen)(v) ==(s)}
 Argument _lbv0 :: {v:Ty_int | (v) ==((s) -- (1))} | (_lbv0) ==((s) -- (1))
 Argument _lbv6 :: {var_v4:Ty_alphalist | true} | true                                                                                                                                                                                                                     
 solver 
 (declare-sort T16229)
(declare-fun slen (T16229) Int)
(declare-fun nil () T16229)
(declare-fun s () Int)
(declare-fun _lbv0 () Int)
(declare-fun int_gen () Int)
(declare-fun _lbv1 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv5 () Bool)
(declare-fun var_v6 () Bool)
(declare-fun var_v7 () Bool)
(declare-fun var_v8 () Bool)
(declare-fun var_v9 () Bool)
(declare-fun _lbv6 () T16229)
(declare-fun v () T16229)
(assert (= (slen nil) 0))
(assert (= _lbv0 (- s 1)))
(assert (= _lbv1 (- int_gen 1)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= s |0|) (= (= _lbv2 false) (> s |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= int_gen |0|) (= (= _lbv3 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv5 true) (and (= _lbv0 |0|) (= (= _lbv5 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v6 true) (and (= _lbv0 |0|) (= (= var_v6 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v7 true) (and (= _lbv1 |0|) (= (= var_v7 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v8 true) (and (= int_gen |0|) (= (= var_v8 false) (> int_gen |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= (slen v) (+ (slen _lbv6) 1)))
(assert (= var_v9 false))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v9 true) (and (= s |0|) (= (= var_v9 false) (> s |0|)))))
(assert (= _lbv0 (- s 1)))
(assert (= (slen v) (+ (slen _lbv6) 1)))
(assert (not (= (slen v) s)))

 $$$$$$$$$$$$$ Timeout SMT $$$$$$$$$$$$$$
  FAILED Typechecking PURE APP For apply cons  (, _lbv0 ), _lbv6 )
 Show :: Successfully Synthesisized False Branch 
  Found a If Then Else solution
 
 let _lbv0 = apply subs  (, s ) 
 in 
 let _lbv1 = apply subs  (, int_gen ) 
 in 
 let _lbv2 = apply sizecheck  (, s ) 
 in 
 let _lbv3 = apply sizecheck  (, int_gen ) 
 in 
 let _lbv4 = apply sizecheck  (, _lbv1 ) 
 in 
 let _lbv5 = apply sizecheck  (, _lbv0 ) 
 in 
 let _lbv6 = apply cons  (, _lbv1 ), nil ) 
 in 
 let _lbv7 = apply cons  (, _lbv0 ), nil ) 
 in 
 let _lbv8 = apply cons  (, s ), nil ) 
 in 
 let _lbv9 = apply cons  (, int_gen ), nil ) 
 in _lbv9
 ***********
 If (apply sizecheck  (, apply subs  (, s ) ) ) then 
 apply cons  (, apply subs  (, s ) ), nil ) 
 else apply cons  (, apply subs  (, s ) ), nil )
 ***********
 If (apply sizecheck  (, apply subs  (, s ) ) ) then 
 apply cons  (, apply subs  (, s ) ), nil ) 
 else apply cons  (, apply subs  (, int_gen ) ), nil )
 ***********
 If (apply sizecheck  (, apply subs  (, s ) ) ) then 
 apply cons  (, apply subs  (, s ) ), nil ) 
 else apply cons  (, int_gen ), nil )
 ***********
 If (apply sizecheck  (, apply subs  (, s ) ) ) then 
 apply cons  (, apply subs  (, s ) ), nil ) 
 else apply cons  (, s ), nil )
 ***********
 If (apply sizecheck  (, apply subs  (, s ) ) ) then 
 apply cons  (, apply subs  (, s ) ), nil ) 
 else apply cons  (, apply subs  (, s ) ), nil )
 ***********
 If (apply sizecheck  (, apply subs  (, s ) ) ) then 
 apply cons  (, apply subs  (, s ) ), nil ) 
 else apply cons  (, apply subs  (, int_gen ) ), nil )
 ***********
 If (apply sizecheck  (, apply subs  (, s ) ) ) then 
 apply cons  (, apply subs  (, int_gen ) ), nil ) 
 else apply cons  (, apply subs  (, s ) ), nil )
 ***********
 If (apply sizecheck  (, apply subs  (, s ) ) ) then 
 apply cons  (, apply subs  (, int_gen ) ), nil ) 
 else apply cons  (, apply subs  (, int_gen ) ), nil )
 ***********
 If (apply sizecheck  (, apply subs  (, s ) ) ) then 
 apply cons  (, apply subs  (, int_gen ) ), nil ) 
 else apply cons  (, int_gen ), nil )
 ***********
 If (apply sizecheck  (, apply subs  (, s ) ) ) then 
 apply cons  (, apply subs  (, int_gen ) ), nil ) 
 else apply cons  (, s ), nil )
 ***********
 If (apply sizecheck  (, apply subs  (, s ) ) ) then 
 apply cons  (, apply subs  (, int_gen ) ), nil ) 
 else apply cons  (, apply subs  (, s ) ), nil )
 ***********
 If (apply sizecheck  (, apply subs  (, s ) ) ) then 
 apply cons  (, apply subs  (, int_gen ) ), nil ) 
 else apply cons  (, apply subs  (, int_gen ) ), nil )
 ***********
 If (apply sizecheck  (, apply subs  (, s ) ) ) then 
 apply cons  (, int_gen ), nil ) 
 else apply cons  (, apply subs  (, s ) ), nil )
 ***********
 If (apply sizecheck  (, apply subs  (, s ) ) ) then 
 apply cons  (, int_gen ), nil ) 
 else apply cons  (, apply subs  (, int_gen ) ), nil )
 ***********
 If (apply sizecheck  (, apply subs  (, s ) ) ) then 
 apply cons  (, int_gen ), nil ) 
 else apply cons  (, int_gen ), nil )
 ***********
 If (apply sizecheck  (, apply subs  (, s ) ) ) then 
 apply cons  (, int_gen ), nil ) 
 else apply cons  (, s ), nil )
 ***********
 If (apply sizecheck  (, apply subs  (, s ) ) ) then 
 apply cons  (, int_gen ), nil ) 
 else apply cons  (, apply subs  (, s ) ), nil )
 ***********
 If (apply sizecheck  (, apply subs  (, s ) ) ) then 
 apply cons  (, int_gen ), nil ) 
 else apply cons  (, apply subs  (, int_gen ) ), nil )
 ***********
 If (apply sizecheck  (, apply subs  (, s ) ) ) then 
 apply cons  (, s ), nil ) 
 else apply cons  (, apply subs  (, s ) ), nil )
 ***********
 If (apply sizecheck  (, apply subs  (, s ) ) ) then 
 apply cons  (, s ), nil ) 
 else apply cons  (, apply subs  (, int_gen ) ), nil )
 ***********
 If (apply sizecheck  (, apply subs  (, s ) ) ) then 
 apply cons  (, s ), nil ) 
 else apply cons  (, int_gen ), nil )
 ***********
 If (apply sizecheck  (, apply subs  (, s ) ) ) then 
 apply cons  (, s ), nil ) 
 else apply cons  (, s ), nil )
 ***********
 If (apply sizecheck  (, apply subs  (, s ) ) ) then 
 apply cons  (, s ), nil ) 
 else apply cons  (, apply subs  (, s ) ), nil )
 ***********
 If (apply sizecheck  (, apply subs  (, s ) ) ) then 
 apply cons  (, s ), nil ) 
 else apply cons  (, apply subs  (, int_gen ) ), nil )
 ***********
 If (apply sizecheck  (, apply subs  (, s ) ) ) then 
 apply cons  (, apply subs  (, s ) ), nil ) 
 else apply cons  (, apply subs  (, s ) ), nil )
 ***********
 If (apply sizecheck  (, apply subs  (, s ) ) ) then 
 apply cons  (, apply subs  (, s ) ), nil ) 
 else apply cons  (, apply subs  (, int_gen ) ), nil )
 ***********
 If (apply sizecheck  (, apply subs  (, s ) ) ) then 
 apply cons  (, apply subs  (, s ) ), nil ) 
 else apply cons  (, int_gen ), nil )
 ***********
 If (apply sizecheck  (, apply subs  (, s ) ) ) then 
 apply cons  (, apply subs  (, s ) ), nil ) 
 else apply cons  (, s ), nil )
 ***********
 If (apply sizecheck  (, apply subs  (, s ) ) ) then 
 apply cons  (, apply subs  (, s ) ), nil ) 
 else apply cons  (, apply subs  (, s ) ), nil )
 ***********
 If (apply sizecheck  (, apply subs  (, s ) ) ) then 
 apply cons  (, apply subs  (, s ) ), nil ) 
 else apply cons  (, apply subs  (, int_gen ) ), nil )
 ***********
 If (apply sizecheck  (, apply subs  (, s ) ) ) then 
 apply cons  (, apply subs  (, int_gen ) ), nil ) 
 else apply cons  (, apply subs  (, s ) ), nil )
 ***********
 If (apply sizecheck  (, apply subs  (, s ) ) ) then 
 apply cons  (, apply subs  (, int_gen ) ), nil ) 
 else apply cons  (, apply subs  (, int_gen ) ), nil )
 ***********
 If (apply sizecheck  (, apply subs  (, s ) ) ) then 
 apply cons  (, apply subs  (, int_gen ) ), nil ) 
 else apply cons  (, int_gen ), nil )
 ***********
 If (apply sizecheck  (, apply subs  (, s ) ) ) then 
 apply cons  (, apply subs  (, int_gen ) ), nil ) 
 else apply cons  (, s ), nil )
 ***********
 If (apply sizecheck  (, apply subs  (, s ) ) ) then 
 apply cons  (, apply subs  (, int_gen ) ), nil ) 
 else apply cons  (, apply subs  (, s ) ), nil )
 ***********
 If (apply sizecheck  (, apply subs  (, s ) ) ) then 
 apply cons  (, apply subs  (, int_gen ) ), nil ) 
 else apply cons  (, apply subs  (, int_gen ) ), nil )
 ***********
 If (apply sizecheck  (, apply subs  (, int_gen ) ) ) then 
 apply cons  (, apply subs  (, s ) ), nil ) 
 else apply cons  (, apply subs  (, s ) ), nil )
 ***********
 If (apply sizecheck  (, apply subs  (, int_gen ) ) ) then 
 apply cons  (, apply subs  (, s ) ), nil ) 
 else apply cons  (, apply subs  (, int_gen ) ), nil )
 ***********
 If (apply sizecheck  (, apply subs  (, int_gen ) ) ) then 
 apply cons  (, apply subs  (, s ) ), nil ) 
 else apply cons  (, int_gen ), nil )
 ***********
 If (apply sizecheck  (, apply subs  (, int_gen ) ) ) then 
 apply cons  (, apply subs  (, s ) ), nil ) 
 else apply cons  (, s ), nil )
 ***********
 If (apply sizecheck  (, apply subs  (, int_gen ) ) ) then 
 apply cons  (, apply subs  (, s ) ), nil ) 
 else apply cons  (, apply subs  (, s ) ), nil )
 ***********
 If (apply sizecheck  (, apply subs  (, int_gen ) ) ) then 
 apply cons  (, apply subs  (, s ) ), nil ) 
 else apply cons  (, apply subs  (, int_gen ) ), nil )
 ***********
 If (apply sizecheck  (, apply subs  (, int_gen ) ) ) then 
 apply cons  (, apply subs  (, int_gen ) ), nil ) 
 else apply cons  (, apply subs  (, s ) ), nil )
 ***********
 If (apply sizecheck  (, apply subs  (, int_gen ) ) ) then 
 apply cons  (, apply subs  (, int_gen ) ), nil ) 
 else apply cons  (, apply subs  (, int_gen ) ), nil )
 ***********
 If (apply sizecheck  (, apply subs  (, int_gen ) ) ) then 
 apply cons  (, apply subs  (, int_gen ) ), nil ) 
 else apply cons  (, int_gen ), nil )
 ***********
 If (apply sizecheck  (, apply subs  (, int_gen ) ) ) then 
 apply cons  (, apply subs  (, int_gen ) ), nil ) 
 else apply cons  (, s ), nil )
 ***********
 If (apply sizecheck  (, apply subs  (, int_gen ) ) ) then 
 apply cons  (, apply subs  (, int_gen ) ), nil ) 
 else apply cons  (, apply subs  (, s ) ), nil )
 ***********
 If (apply sizecheck  (, apply subs  (, int_gen ) ) ) then 
 apply cons  (, apply subs  (, int_gen ) ), nil ) 
 else apply cons  (, apply subs  (, int_gen ) ), nil )
 ***********
 If (apply sizecheck  (, apply subs  (, int_gen ) ) ) then 
 apply cons  (, int_gen ), nil ) 
 else apply cons  (, apply subs  (, s ) ), nil )
 ***********
 If (apply sizecheck  (, apply subs  (, int_gen ) ) ) then 
 apply cons  (, int_gen ), nil ) 
 else apply cons  (, apply subs  (, int_gen ) ), nil )
 ***********
 If (apply sizecheck  (, apply subs  (, int_gen ) ) ) then 
 apply cons  (, int_gen ), nil ) 
 else apply cons  (, int_gen ), nil )
 ***********
 If (apply sizecheck  (, apply subs  (, int_gen ) ) ) then 
 apply cons  (, int_gen ), nil ) 
 else apply cons  (, s ), nil )
 ***********
 If (apply sizecheck  (, apply subs  (, int_gen ) ) ) then 
 apply cons  (, int_gen ), nil ) 
 else apply cons  (, apply subs  (, s ) ), nil )
 ***********
 If (apply sizecheck  (, apply subs  (, int_gen ) ) ) then 
 apply cons  (, int_gen ), nil ) 
 else apply cons  (, apply subs  (, int_gen ) ), nil )
 ***********
 If (apply sizecheck  (, apply subs  (, int_gen ) ) ) then 
 apply cons  (, s ), nil ) 
 else apply cons  (, apply subs  (, s ) ), nil )
 ***********
 If (apply sizecheck  (, apply subs  (, int_gen ) ) ) then 
 apply cons  (, s ), nil ) 
 else apply cons  (, apply subs  (, int_gen ) ), nil )
 ***********
 If (apply sizecheck  (, apply subs  (, int_gen ) ) ) then 
 apply cons  (, s ), nil ) 
 else apply cons  (, int_gen ), nil )
 ***********
 If (apply sizecheck  (, apply subs  (, int_gen ) ) ) then 
 apply cons  (, s ), nil ) 
 else apply cons  (, s ), nil )
 ***********
 If (apply sizecheck  (, apply subs  (, int_gen ) ) ) then 
 apply cons  (, s ), nil ) 
 else apply cons  (, apply subs  (, s ) ), nil )
 ***********
 If (apply sizecheck  (, apply subs  (, int_gen ) ) ) then 
 apply cons  (, s ), nil ) 
 else apply cons  (, apply subs  (, int_gen ) ), nil )
 ***********
 If (apply sizecheck  (, apply subs  (, int_gen ) ) ) then 
 apply cons  (, apply subs  (, s ) ), nil ) 
 else apply cons  (, apply subs  (, s ) ), nil )
 ***********
 If (apply sizecheck  (, apply subs  (, int_gen ) ) ) then 
 apply cons  (, apply subs  (, s ) ), nil ) 
 else apply cons  (, apply subs  (, int_gen ) ), nil )
 ***********
 If (apply sizecheck  (, apply subs  (, int_gen ) ) ) then 
 apply cons  (, apply subs  (, s ) ), nil ) 
 else apply cons  (, int_gen ), nil )
 ***********
 If (apply sizecheck  (, apply subs  (, int_gen ) ) ) then 
 apply cons  (, apply subs  (, s ) ), nil ) 
 else apply cons  (, s ), nil )
 ***********
 If (apply sizecheck  (, apply subs  (, int_gen ) ) ) then 
 apply cons  (, apply subs  (, s ) ), nil ) 
 else apply cons  (, apply subs  (, s ) ), nil )
 ***********
 If (apply sizecheck  (, apply subs  (, int_gen ) ) ) then 
 apply cons  (, apply subs  (, s ) ), nil ) 
 else apply cons  (, apply subs  (, int_gen ) ), nil )
 ***********
 If (apply sizecheck  (, apply subs  (, int_gen ) ) ) then 
 apply cons  (, apply subs  (, int_gen ) ), nil ) 
 else apply cons  (, apply subs  (, s ) ), nil )
 ***********
 If (apply sizecheck  (, apply subs  (, int_gen ) ) ) then 
 apply cons  (, apply subs  (, int_gen ) ), nil ) 
 else apply cons  (, apply subs  (, int_gen ) ), nil )
 ***********
 If (apply sizecheck  (, apply subs  (, int_gen ) ) ) then 
 apply cons  (, apply subs  (, int_gen ) ), nil ) 
 else apply cons  (, int_gen ), nil )
 ***********
 If (apply sizecheck  (, apply subs  (, int_gen ) ) ) then 
 apply cons  (, apply subs  (, int_gen ) ), nil ) 
 else apply cons  (, s ), nil )
 ***********
 If (apply sizecheck  (, apply subs  (, int_gen ) ) ) then 
 apply cons  (, apply subs  (, int_gen ) ), nil ) 
 else apply cons  (, apply subs  (, s ) ), nil )
 ***********
 If (apply sizecheck  (, apply subs  (, int_gen ) ) ) then 
 apply cons  (, apply subs  (, int_gen ) ), nil ) 
 else apply cons  (, apply subs  (, int_gen ) ), nil )
 ***********
 If (apply sizecheck  (, int_gen ) ) then 
 apply cons  (, apply subs  (, s ) ), nil ) 
 else apply cons  (, apply subs  (, s ) ), nil )
 ***********
 If (apply sizecheck  (, int_gen ) ) then 
 apply cons  (, apply subs  (, s ) ), nil ) 
 else apply cons  (, apply subs  (, int_gen ) ), nil )
 ***********
 If (apply sizecheck  (, int_gen ) ) then 
 apply cons  (, apply subs  (, s ) ), nil ) 
 else apply cons  (, int_gen ), nil )
 ***********
 If (apply sizecheck  (, int_gen ) ) then 
 apply cons  (, apply subs  (, s ) ), nil ) 
 else apply cons  (, s ), nil )
 ***********
 If (apply sizecheck  (, int_gen ) ) then 
 apply cons  (, apply subs  (, s ) ), nil ) 
 else apply cons  (, apply subs  (, s ) ), nil )
 ***********
 If (apply sizecheck  (, int_gen ) ) then 
 apply cons  (, apply subs  (, s ) ), nil ) 
 else apply cons  (, apply subs  (, int_gen ) ), nil )
 ***********
 If (apply sizecheck  (, int_gen ) ) then 
 apply cons  (, apply subs  (, int_gen ) ), nil ) 
 else apply cons  (, apply subs  (, s ) ), nil )
 ***********
 If (apply sizecheck  (, int_gen ) ) then 
 apply cons  (, apply subs  (, int_gen ) ), nil ) 
 else apply cons  (, apply subs  (, int_gen ) ), nil )
 ***********
 If (apply sizecheck  (, int_gen ) ) then 
 apply cons  (, apply subs  (, int_gen ) ), nil ) 
 else apply cons  (, int_gen ), nil )
 ***********
 If (apply sizecheck  (, int_gen ) ) then 
 apply cons  (, apply subs  (, int_gen ) ), nil ) 
 else apply cons  (, s ), nil )
 ***********
 If (apply sizecheck  (, int_gen ) ) then 
 apply cons  (, apply subs  (, int_gen ) ), nil ) 
 else apply cons  (, apply subs  (, s ) ), nil )
 ***********
 If (apply sizecheck  (, int_gen ) ) then 
 apply cons  (, apply subs  (, int_gen ) ), nil ) 
 else apply cons  (, apply subs  (, int_gen ) ), nil )
 ***********
 If (apply sizecheck  (, int_gen ) ) then 
 apply cons  (, int_gen ), nil ) 
 else apply cons  (, apply subs  (, s ) ), nil )
 ***********
 If (apply sizecheck  (, int_gen ) ) then 
 apply cons  (, int_gen ), nil ) 
 else apply cons  (, apply subs  (, int_gen ) ), nil )
 ***********
 If (apply sizecheck  (, int_gen ) ) then 
 apply cons  (, int_gen ), nil ) 
 else apply cons  (, int_gen ), nil )
 ***********
 If (apply sizecheck  (, int_gen ) ) then 
 apply cons  (, int_gen ), nil ) 
 else apply cons  (, s ), nil )
 ***********
 If (apply sizecheck  (, int_gen ) ) then 
 apply cons  (, int_gen ), nil ) 
 else apply cons  (, apply subs  (, s ) ), nil )
 ***********
 If (apply sizecheck  (, int_gen ) ) then 
 apply cons  (, int_gen ), nil ) 
 else apply cons  (, apply subs  (, int_gen ) ), nil )
 ***********
 If (apply sizecheck  (, int_gen ) ) then 
 apply cons  (, s ), nil ) 
 else apply cons  (, apply subs  (, s ) ), nil )
 ***********
 If (apply sizecheck  (, int_gen ) ) then 
 apply cons  (, s ), nil ) 
 else apply cons  (, apply subs  (, int_gen ) ), nil )
 ***********
 If (apply sizecheck  (, int_gen ) ) then 
 apply cons  (, s ), nil ) 
 else apply cons  (, int_gen ), nil )
 ***********
 If (apply sizecheck  (, int_gen ) ) then 
 apply cons  (, s ), nil ) 
 else apply cons  (, s ), nil )
 ***********
 If (apply sizecheck  (, int_gen ) ) then 
 apply cons  (, s ), nil ) 
 else apply cons  (, apply subs  (, s ) ), nil )
 ***********
 If (apply sizecheck  (, int_gen ) ) then 
 apply cons  (, s ), nil ) 
 else apply cons  (, apply subs  (, int_gen ) ), nil )
 ***********
 If (apply sizecheck  (, int_gen ) ) then 
 apply cons  (, apply subs  (, s ) ), nil ) 
 else apply cons  (, apply subs  (, s ) ), nil )
 ***********
 If (apply sizecheck  (, int_gen ) ) then 
 apply cons  (, apply subs  (, s ) ), nil ) 
 else apply cons  (, apply subs  (, int_gen ) ), nil )
 ***********
 If (apply sizecheck  (, int_gen ) ) then 
 apply cons  (, apply subs  (, s ) ), nil ) 
 else apply cons  (, int_gen ), nil )
 ***********
 If (apply sizecheck  (, int_gen ) ) then 
 apply cons  (, apply subs  (, s ) ), nil ) 
 else apply cons  (, s ), nil )
 ***********
 If (apply sizecheck  (, int_gen ) ) then 
 apply cons  (, apply subs  (, s ) ), nil ) 
 else apply cons  (, apply subs  (, s ) ), nil )
 ***********
 If (apply sizecheck  (, int_gen ) ) then 
 apply cons  (, apply subs  (, s ) ), nil ) 
 else apply cons  (, apply subs  (, int_gen ) ), nil )
 ***********
 If (apply sizecheck  (, int_gen ) ) then 
 apply cons  (, apply subs  (, int_gen ) ), nil ) 
 else apply cons  (, apply subs  (, s ) ), nil )
 ***********
 If (apply sizecheck  (, int_gen ) ) then 
 apply cons  (, apply subs  (, int_gen ) ), nil ) 
 else apply cons  (, apply subs  (, int_gen ) ), nil )
 ***********
 If (apply sizecheck  (, int_gen ) ) then 
 apply cons  (, apply subs  (, int_gen ) ), nil ) 
 else apply cons  (, int_gen ), nil )
 ***********
 If (apply sizecheck  (, int_gen ) ) then 
 apply cons  (, apply subs  (, int_gen ) ), nil ) 
 else apply cons  (, s ), nil )
 ***********
 If (apply sizecheck  (, int_gen ) ) then 
 apply cons  (, apply subs  (, int_gen ) ), nil ) 
 else apply cons  (, apply subs  (, s ) ), nil )
 ***********
 If (apply sizecheck  (, int_gen ) ) then 
 apply cons  (, apply subs  (, int_gen ) ), nil ) 
 else apply cons  (, apply subs  (, int_gen ) ), nil )
 ***********
 If (apply sizecheck  (, s ) ) then 
 apply cons  (, apply subs  (, s ) ), nil ) 
 else apply cons  (, apply subs  (, s ) ), nil )
 ***********
 If (apply sizecheck  (, s ) ) then 
 apply cons  (, apply subs  (, s ) ), nil ) 
 else apply cons  (, apply subs  (, int_gen ) ), nil )
 ***********
 If (apply sizecheck  (, s ) ) then 
 apply cons  (, apply subs  (, s ) ), nil ) 
 else apply cons  (, int_gen ), nil )
 ***********
 If (apply sizecheck  (, s ) ) then 
 apply cons  (, apply subs  (, s ) ), nil ) 
 else apply cons  (, s ), nil )
 ***********
 If (apply sizecheck  (, s ) ) then 
 apply cons  (, apply subs  (, s ) ), nil ) 
 else apply cons  (, apply subs  (, s ) ), nil )
 ***********
 If (apply sizecheck  (, s ) ) then 
 apply cons  (, apply subs  (, s ) ), nil ) 
 else apply cons  (, apply subs  (, int_gen ) ), nil )
 ***********
 If (apply sizecheck  (, s ) ) then 
 apply cons  (, apply subs  (, int_gen ) ), nil ) 
 else apply cons  (, apply subs  (, s ) ), nil )
 ***********
 If (apply sizecheck  (, s ) ) then 
 apply cons  (, apply subs  (, int_gen ) ), nil ) 
 else apply cons  (, apply subs  (, int_gen ) ), nil )
 ***********
 If (apply sizecheck  (, s ) ) then 
 apply cons  (, apply subs  (, int_gen ) ), nil ) 
 else apply cons  (, int_gen ), nil )
 ***********
 If (apply sizecheck  (, s ) ) then 
 apply cons  (, apply subs  (, int_gen ) ), nil ) 
 else apply cons  (, s ), nil )
 ***********
 If (apply sizecheck  (, s ) ) then 
 apply cons  (, apply subs  (, int_gen ) ), nil ) 
 else apply cons  (, apply subs  (, s ) ), nil )
 ***********
 If (apply sizecheck  (, s ) ) then 
 apply cons  (, apply subs  (, int_gen ) ), nil ) 
 else apply cons  (, apply subs  (, int_gen ) ), nil )
 ***********
 If (apply sizecheck  (, s ) ) then 
 apply cons  (, int_gen ), nil ) 
 else apply cons  (, apply subs  (, s ) ), nil )
 ***********
 If (apply sizecheck  (, s ) ) then 
 apply cons  (, int_gen ), nil ) 
 else apply cons  (, apply subs  (, int_gen ) ), nil )
 ***********
 If (apply sizecheck  (, s ) ) then 
 apply cons  (, int_gen ), nil ) 
 else apply cons  (, int_gen ), nil )
 ***********
 If (apply sizecheck  (, s ) ) then 
 apply cons  (, int_gen ), nil ) 
 else apply cons  (, s ), nil )
 ***********
 If (apply sizecheck  (, s ) ) then 
 apply cons  (, int_gen ), nil ) 
 else apply cons  (, apply subs  (, s ) ), nil )
 ***********
 If (apply sizecheck  (, s ) ) then 
 apply cons  (, int_gen ), nil ) 
 else apply cons  (, apply subs  (, int_gen ) ), nil )
 ***********
 If (apply sizecheck  (, s ) ) then 
 apply cons  (, s ), nil ) 
 else apply cons  (, apply subs  (, s ) ), nil )
 ***********
 If (apply sizecheck  (, s ) ) then 
 apply cons  (, s ), nil ) 
 else apply cons  (, apply subs  (, int_gen ) ), nil )
 ***********
 If (apply sizecheck  (, s ) ) then 
 apply cons  (, s ), nil ) 
 else apply cons  (, int_gen ), nil )
 ***********
 If (apply sizecheck  (, s ) ) then 
 apply cons  (, s ), nil ) 
 else apply cons  (, s ), nil )
 ***********
 If (apply sizecheck  (, s ) ) then 
 apply cons  (, s ), nil ) 
 else apply cons  (, apply subs  (, s ) ), nil )
 ***********
 If (apply sizecheck  (, s ) ) then 
 apply cons  (, s ), nil ) 
 else apply cons  (, apply subs  (, int_gen ) ), nil )
 ***********
 If (apply sizecheck  (, s ) ) then 
 apply cons  (, apply subs  (, s ) ), nil ) 
 else apply cons  (, apply subs  (, s ) ), nil )
 ***********
 If (apply sizecheck  (, s ) ) then 
 apply cons  (, apply subs  (, s ) ), nil ) 
 else apply cons  (, apply subs  (, int_gen ) ), nil )
 ***********
 If (apply sizecheck  (, s ) ) then 
 apply cons  (, apply subs  (, s ) ), nil ) 
 else apply cons  (, int_gen ), nil )
 ***********
 If (apply sizecheck  (, s ) ) then 
 apply cons  (, apply subs  (, s ) ), nil ) 
 else apply cons  (, s ), nil )
 ***********
 If (apply sizecheck  (, s ) ) then 
 apply cons  (, apply subs  (, s ) ), nil ) 
 else apply cons  (, apply subs  (, s ) ), nil )
 ***********
 If (apply sizecheck  (, s ) ) then 
 apply cons  (, apply subs  (, s ) ), nil ) 
 else apply cons  (, apply subs  (, int_gen ) ), nil )
 ***********
 If (apply sizecheck  (, s ) ) then 
 apply cons  (, apply subs  (, int_gen ) ), nil ) 
 else apply cons  (, apply subs  (, s ) ), nil )
 ***********
 If (apply sizecheck  (, s ) ) then 
 apply cons  (, apply subs  (, int_gen ) ), nil ) 
 else apply cons  (, apply subs  (, int_gen ) ), nil )
 ***********
 If (apply sizecheck  (, s ) ) then 
 apply cons  (, apply subs  (, int_gen ) ), nil ) 
 else apply cons  (, int_gen ), nil )
 ***********
 If (apply sizecheck  (, s ) ) then 
 apply cons  (, apply subs  (, int_gen ) ), nil ) 
 else apply cons  (, s ), nil )
 ***********
 If (apply sizecheck  (, s ) ) then 
 apply cons  (, apply subs  (, int_gen ) ), nil ) 
 else apply cons  (, apply subs  (, s ) ), nil )
 ***********
 If (apply sizecheck  (, s ) ) then 
 apply cons  (, apply subs  (, int_gen ) ), nil ) 
 else apply cons  (, apply subs  (, int_gen ) ), nil )
 Success : { 
{v:Ty_alphalist | (slen)(v) ==(s)} 
 If (_lbv5 ) then 
 _lbv7 
 else _lbv7 
 }