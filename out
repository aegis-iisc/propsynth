
  EXPLORED Args.parser output 
 EXPLORED learningOn  true
 EXPLORED bidirectionality  true
 EXPLORED effect-filter  false
 EXPLORED specfile :: tests_specsynth/case7.spec
 EXPLORED goal Number :: 0
 EXPLORED Max path length :: 3stexcwhitespace var: slen
whitespace colon
whitespace var: list
whitespace colon
whitespace var: int
semicolon
stexcwhitespace var: slist
whitespace colon
whitespace var: list
whitespace colon
whitespace var: bool
semicolon
stexcwhitespace var: shd
whitespace colon
whitespace var: list
whitespace colon
whitespace var: int
semicolon
var: subs
whitespace colon
whitespace lparen
var: n
whitespace colon
whitespace lcurly
var: v
whitespace colon
whitespace var: int
whitespace pipe
whitespace truercurly
rparen
whitespace arrow
whitespace lcurly
var: v
whitespace colon
whitespace var: int
whitespace pipe
whitespace var: v
whitespace equalopwhitespace var: n
whitespace ar-minuswhitespace int: 1
rcurly
semicolon
var: gt
whitespace colon
whitespace lparen
var: n1
whitespace colon
whitespace lcurly
var: v
whitespace colon
whitespace var: int
whitespace pipe
whitespace truercurly
rparen
whitespace arrow
whitespace lparen
var: n2
whitespace colon
whitespace lcurly
var: v
whitespace colon
whitespace var: int
whitespace pipe
whitespace truercurly
rparen
whitespace arrow
whitespace whitespace lcurly
whitespace var: v
whitespace colon
whitespace var: bool
whitespace pipe
whitespace lbrace
var: v
equaloptruerbrace
whitespace iffwhitespace lbrace
var: n1
lessthanopvar: n2
rbrace
whitespace conjwhitespace whitespace lbrace
var: v
equalopfalserbrace
whitespace iffwhitespace notwhitespace lbrace
var: n1
lessthanopvar: n2
rbrace
rcurly
semicolon
var: nil
whitespace colon
whitespace lcurly
var: v
whitespace colon
whitespace var: list
whitespace pipe
whitespace var: slist
whitespace lparen
var: v
rparen
whitespace equalopwhitespace truewhitespace whitespace conjwhitespace var: slen
whitespace lparen
var: v
rparen
whitespace equalopwhitespace int: 0
rcurly
semicolon
var: int_gen
whitespace colon
whitespace lparen
var: n3
colon
whitespace var: int
rparen
whitespace arrow
whitespace lcurly
var: v
whitespace colon
whitespace var: int
whitespace pipe
whitespace lparen
lbrace
var: v
whitespace lessthanopwhitespace var: n3
rbrace
whitespace disjwhitespace lbrace
var: v
equalopvar: n3
rbrace
rparen
whitespace whitespace conjwhitespace notwhitespace lbrace
var: v
lessthanopint: 3
rbrace
rcurly
semicolon
whitespace var: sizecheck
whitespace colon
whitespace lparen
var: s
whitespace colon
whitespace var: int
rparen
whitespace arrow
whitespace whitespace lcurly
var: v
whitespace colon
whitespace var: bool
whitespace pipe
whitespace lbrace
var: v
equaloptruerbrace
whitespace iffwhitespace lbrace
var: s
equalopint: 0
rbrace
whitespace conjwhitespace whitespace lbrace
var: v
equalopfalserbrace
whitespace iffwhitespace lbrace
var: s
lessthanopint: 0
rbrace
rcurly
semicolon
var: cons
whitespace colon
whitespace lparen
var: x
whitespace colon
whitespace var: int
rparen
whitespace arrow
whitespace whitespace lparen
var: xs
whitespace colon
whitespace lcurly
var: v
whitespace colon
whitespace var: list
whitespace pipe
whitespace var: slist
whitespace lparen
var: v
rparen
whitespace equalopwhitespace truercurly
rparen
whitespace arrow
whitespace whitespace lcurly
var: v
whitespace colon
whitespace var: list
whitespace pipe
whitespace whitespace lparen
var: shd
whitespace lparen
var: xs
rparen
whitespace lessthanopwhitespace var: x
whitespace disjwhitespace var: shd
whitespace lparen
var: xs
rparen
whitespace equalopwhitespace var: x
rparen
whitespace whitespace implieswhitespace lparen
var: slist
whitespace lparen
var: v
rparen
whitespace equalopwhitespace truewhitespace conjwhitespace whitespace var: slen
whitespace lparen
var: v
rparen
whitespace equalopwhitespace var: slen
whitespace lparen
var: xs
rparen
whitespace pluswhitespace int: 1
whitespace conjwhitespace var: shd
whitespace lparen
var: v
rparen
whitespace equalopwhitespace var: x
rparen
rcurly
semicolon
whitespace var: goal
whitespace colon
whitespace lparen
var: s
whitespace colon
whitespace lcurly
var: v
whitespace colon
whitespace var: int
whitespace pipe
whitespace truewhitespace rcurly
rparen
whitespace arrow
whitespace whitespace lparen
var: x0
whitespace colon
whitespace var: int
rparen
whitespace arrow
whitespace whitespace lcurly
var: v
whitespace colon
whitespace var: list
whitespace pipe
whitespace var: slist
whitespace lparen
var: v
rparen
whitespace equalopwhitespace truewhitespace whitespace conjwhitespace var: slen
whitespace lparen
var: v
rparen
whitespace equalopwhitespace var: s
whitespace whitespace conjwhitespace lparen
var: slen
whitespace lparen
var: v
rparen
whitespace lessthanopwhitespace int: 0
whitespace implieswhitespace whitespace lparen
var: shd
whitespace lparen
var: v
rparen
whitespace lessthanopwhitespace var: x0
whitespace disjwhitespace var: shd
whitespace lparen
var: v
rparen
whitespace equalopwhitespace var: x0
rparen
rparen
rcurly
semicolon
RelSpec {  SRs ;  PRs ;  TSs  
 Assume false
 name subs : 
 params :
 Type  Arrow ( ( n : {v:Ty_int | true} ) -> {v:Ty_int | (v) ==((n) -- (1))} 
 Assume false
 name gt : 
 params :
 Type  Arrow ( ( n1 : {v:Ty_int | true} ) ->  Arrow ( ( n2 : {v:Ty_int | true} ) -> {v:Ty_bool | DoubleImpl 
 v = true
  
 	 Conj <c n1 > n2
 	 , DoubleImpl 
 v = false
  Negation n1 > n2 >c } 
 Assume false
 name nil : 
 params :
 Type {v:Ty_alphalist | 
 	 Conj <c (slist)(v) = (true)
 	 , (slen)(v) ==(0) >c } 
 Assume false
 name int_gen : 
 params :
 Type  Arrow ( ( n3 : {var_v0:Ty_int | true} ) -> {v:Ty_int | 
 	 Conj <c 
 Disj <d  v > n3
 	,   v = n3>d 
 	 , Negation v > 3 >c } 
 Assume false
 name sizecheck : 
 params :
 Type  Arrow ( ( s : {var_v1:Ty_int | true} ) -> {v:Ty_bool | DoubleImpl 
 v = true
  
 	 Conj <c s = 0
 	 , DoubleImpl 
 v = false
  s > 0 >c } 
 Assume false
 name cons : 
 params :
 Type  Arrow ( ( x : {var_v2:Ty_int | true} ) ->  Arrow ( ( xs : {v:Ty_alphalist | (slist)(v) = (true)} ) -> {v:Ty_alphalist | 
 	 Impl < 
 Disj <d  (shd)(xs) > (x)
 	,   (shd)(xs) ==(x)>d 
 	 
 	 Conj <c (slist)(v) = (true)
 	 , 
 	 Conj <c (slen)(v) ==((slen)(xs) + (1))
 	 , (shd)(v) ==(x) >c  >c  >} 
 Assume false
 name goal : 
 params :
 Type  Arrow ( ( s : {v:Ty_int | true} ) ->  Arrow ( ( x0 : {var_v3:Ty_int | true} ) -> {v:Ty_alphalist | 
 	 Conj <c (slist)(v) = (true)
 	 , 
 	 Conj <c (slen)(v) ==(s)
 	 , 
 	 Impl < (slen)(v) > (0)
 	 
 Disj <d  (shd)(v) > (x0)
 	,   (shd)(v) ==(x0)>d  > >c  >c };  Formulas  }
 INITIAL GAMMA 
 
 goal :  Arrow ( ( s : {v:Ty_int | true} ) ->  Arrow ( ( x0 : {var_v3:Ty_int | true} ) -> {v:Ty_alphalist | 
 	 Conj <c (slist)(v) = (true)
 	 , 
 	 Conj <c (slen)(v) ==(s)
 	 , 
 	 Impl < (slen)(v) > (0)
 	 
 Disj <d  (shd)(v) > (x0)
 	,   (shd)(v) ==(x0)>d  > >c  >c }
 cons :  Arrow ( ( x : {var_v2:Ty_int | true} ) ->  Arrow ( ( xs : {v:Ty_alphalist | (slist)(v) = (true)} ) -> {v:Ty_alphalist | 
 	 Impl < 
 Disj <d  (shd)(xs) > (x)
 	,   (shd)(xs) ==(x)>d 
 	 
 	 Conj <c (slist)(v) = (true)
 	 , 
 	 Conj <c (slen)(v) ==((slen)(xs) + (1))
 	 , (shd)(v) ==(x) >c  >c  >}
 sizecheck :  Arrow ( ( s : {var_v1:Ty_int | true} ) -> {v:Ty_bool | DoubleImpl 
 v = true
  
 	 Conj <c s = 0
 	 , DoubleImpl 
 v = false
  s > 0 >c }
 int_gen :  Arrow ( ( n3 : {var_v0:Ty_int | true} ) -> {v:Ty_int | 
 	 Conj <c 
 Disj <d  v > n3
 	,   v = n3>d 
 	 , Negation v > 3 >c }
 nil : {v:Ty_alphalist | 
 	 Conj <c (slist)(v) = (true)
 	 , (slen)(v) ==(0) >c }
 gt :  Arrow ( ( n1 : {v:Ty_int | true} ) ->  Arrow ( ( n2 : {v:Ty_int | true} ) -> {v:Ty_bool | DoubleImpl 
 v = true
  
 	 Conj <c n1 > n2
 	 , DoubleImpl 
 v = false
  Negation n1 > n2 >c }
 subs :  Arrow ( ( n : {v:Ty_int | true} ) -> {v:Ty_int | (v) ==((n) -- (1))}
 INITIAL SIGMA 
 
 TypeNames 
 
 Qualifiers 
 
 Qual slen :  :-> Ty_alphalist :-> Ty_int
 Qual slist :  :-> Ty_alphalist :-> Ty_bool
 Qual shd :  :-> Ty_alphalist :-> Ty_int
 Show ***********Calling S-FUNC synthesize***************
 Show Uncurried , s:{v:Ty_int | true}, x0:{var_v3:Ty_int | true} -> {v:Ty_alphalist | 
 	 Conj <c (slist)(v) = (true)
 	 , 
 	 Conj <c (slen)(v) ==(s)
 	 , 
 	 Impl < (slen)(v) > (0)
 	 
 Disj <d  (shd)(v) > (x0)
 	,   (shd)(v) ==(x0)>d  > >c  >c }
 Decreasing Measure s
 Decreasing Type {v:Ty_int | true}
 Calculated Decreasing Predicate s > v
 Calculated Decreased Goal Type  Arrow ( ( s1 : {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c } ) ->  Arrow ( ( x0 : {var_v3:Ty_int | true} ) -> {v:Ty_alphalist | 
 	 Conj <c (slist)(v) = (true)
 	 , 
 	 Conj <c (slen)(v) ==(s1)
 	 , 
 	 Impl < (slen)(v) > (0)
 	 
 Disj <d  (shd)(v) > (x0)
 	,   (shd)(v) ==(x0)>d  > >c  >c }
 Show Trying :: Top-level Match
 Show :: Synthesize Match {v:Ty_alphalist | 
 	 Conj <c (slist)(v) = (true)
 	 , 
 	 Conj <c (slen)(v) ==(s)
 	 , 
 	 Impl < (slen)(v) > (0)
 	 
 Disj <d  (shd)(v) > (x0)
 	,   (shd)(v) ==(x0)>d  > >c  >c }
 Show :: List Ty_int
 Show :: Non List Case
 Match-case failed :: Try Top-level If-then-else 
 iSynthesize If-THEN-ELSE {v:Ty_alphalist | 
 	 Conj <c (slist)(v) = (true)
 	 , 
 	 Conj <c (slen)(v) ==(s)
 	 , 
 	 Impl < (slen)(v) > (0)
 	 
 Disj <d  (shd)(v) > (x0)
 	,   (shd)(v) ==(x0)>d  > >c  >c }
 iSynthesize Boolean {var_v4:Ty_bool | true}
 esynthesizeScalar for {var_v4:Ty_bool | true}
  Enumeration for 
 spec 
 {var_v4:Ty_bool | true}
 >>>>>>>>>>>>>>>>>> No Scalar found in Environment, Trying esynthesizePureApp <<<<<<<<<<<<<<<<<< 
  Pure Fun Application: esynthesizePureApp 
 Show Potential Functions
  , 
 sizecheck, 
 gt
 ############################################################
  Trying Pure Component sizecheck
  *************** Trying Arrow Component ************sizecheck :  Arrow ( ( s : {var_v1:Ty_int | true} ) -> {v:Ty_bool | DoubleImpl 
 v = true
  
 	 Conj <c s = 0
 	 , DoubleImpl 
 v = false
  s > 0 >c }
  *************** Synthesizing Args ei : ti for ************sizecheck
 ##################################################################################
  Synthesizing the 1th argument for Function sizecheck
  Trying Arguments in Scalars 
 esynthesizeScalar for {var_v1:Ty_int | true}
  Enumeration for 
 spec 
 {var_v1:Ty_int | true}
 
 Enumerating a Scalar Term s
 
 Type of the Scalar Term {v:Ty_int | true}  
solver 
 (declare-sort T3)
(declare-fun set0 (Bool) Bool)
(declare-fun slist (T3 Bool) Bool)
(declare-fun nil () T3)
(declare-fun slen (T3) Int)
(assert (forall ((bv0 Bool)) (= (set0 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set0 bv0))))
(assert (= (slen nil) 0))
(assert (not true))

 
 Timeout the subtype check T_vi <: T_goal
 
 Enumerating a Scalar Term x0
 
 Type of the Scalar Term {var_v3:Ty_int | true}  
solver 
 (declare-sort T45)
(declare-fun set1 (Bool) Bool)
(declare-fun slist (T45 Bool) Bool)
(declare-fun nil () T45)
(declare-fun slen (T45) Int)
(assert (forall ((bv0 Bool)) (= (set1 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set1 bv0))))
(assert (= (slen nil) 0))
(assert (not true))

 Show :: Found a Few Macthing Scalars 
  Next Trying Arguments of the form f (ei...) 
  Pure Fun Application: esynthesizePureApp 
 Show Potential Functions
  , 
 int_gen, 
 subs
 ############################################################
  Trying Pure Component int_gen
  *************** Trying Arrow Component ************int_gen :  Arrow ( ( n3 : {var_v0:Ty_int | true} ) -> {v:Ty_int | 
 	 Conj <c 
 Disj <d  v > n3
 	,   v = n3>d 
 	 , Negation v > 3 >c }
  *************** Synthesizing Args ei : ti for ************int_gen
 ##################################################################################
  Synthesizing the 1th argument for Function int_gen
  Trying Arguments in Scalars 
 esynthesizeScalar for {var_v0:Ty_int | true}
  Enumeration for 
 spec 
 {var_v0:Ty_int | true}
 
 Enumerating a Scalar Term s
 
 Type of the Scalar Term {v:Ty_int | true}  
solver 
 (declare-sort T87)
(declare-fun set2 (Bool) Bool)
(declare-fun slist (T87 Bool) Bool)
(declare-fun nil () T87)
(declare-fun slen (T87) Int)
(assert (forall ((bv0 Bool)) (= (set2 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set2 bv0))))
(assert (= (slen nil) 0))
(assert (not true))

 
 Enumerating a Scalar Term x0
 
 Type of the Scalar Term {var_v3:Ty_int | true}  
solver 
 (declare-sort T129)
(declare-fun set3 (Bool) Bool)
(declare-fun slist (T129 Bool) Bool)
(declare-fun nil () T129)
(declare-fun slen (T129) Int)
(assert (forall ((bv0 Bool)) (= (set3 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set3 bv0))))
(assert (= (slen nil) 0))
(assert (not true))

 Show :: Found a Few Macthing Scalars 
  Next Trying Arguments of the form f (ei...) 
  Pure Fun Application: esynthesizePureApp 
 ##################################################################################
  *************** Successfully Synthesized Args ei Forall i 
 # of Possible Argument Options for int_gen 2
 Possible Arg Options 
 EI x0
 Possible Arg Options 
 EI s
 Apply Single Argument Case : f (ei) Case int_gen
  Case : f (ei) Case int_gen x0
 Finding Already seen tree for apply int_gen  (, x0 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 let _lbv0 = apply int_gen  (, x0 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  Case : f (ei) Case int_gen s
 Finding Already seen tree for apply int_gen  (, s )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 let _lbv1 = apply int_gen  (, s )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  Sorted Exxpressions
 Non-Expanded _lbv1
 Program apply int_gen  (, s ) 
 Size 2
 Non-Expanded _lbv0
 Program apply int_gen  (, x0 ) 
 Size 2
 Typechecking apply int_gen  (, s )
 Against {var_v1:Ty_int | true}
 Typechecking apply int_gen  (, s )
 Against {var_v1:Ty_int | true}
 Argument s :: {v:Ty_int | true} | true                                  
solver 
 (declare-sort T171)
(declare-fun set4 (Bool) Bool)
(declare-fun slist (T171 Bool) Bool)
(declare-fun nil () T171)
(declare-fun slen (T171) Int)
(declare-fun s () Int)
(declare-fun v () Int)
(declare-fun |3| () Int)
(assert (forall ((bv0 Bool)) (= (set4 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set4 bv0))))
(assert (= (slen nil) 0))
(assert (or (> v s) (= v s)))
(assert (= |3| 3))
(assert (not (> v |3|)))
(assert (or (> v s) (= v s)))
(assert (= |3| 3))
(assert (not (> v |3|)))
(assert (not true))

  Show *************** TypeChecking Succsessful {v:Ty_int | 
 	 Conj <c 
 Disj <d  v > s
 	,   v = s>d 
 	 , Negation v > 3 >c }
 Typechecking apply int_gen  (, x0 )
 Against {var_v1:Ty_int | true}
 Typechecking apply int_gen  (, x0 )
 Against {var_v1:Ty_int | true}
 Argument x0 :: {var_v3:Ty_int | true} | true                                                  
solver 
 (declare-sort T213)
(declare-fun set5 (Bool) Bool)
(declare-fun slist (T213 Bool) Bool)
(declare-fun nil () T213)
(declare-fun slen (T213) Int)
(declare-fun s () Int)
(declare-fun _lbv1 () Int)
(declare-fun |3| () Int)
(declare-fun x0 () Int)
(declare-fun v () Int)
(assert (forall ((bv0 Bool)) (= (set5 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set5 bv0))))
(assert (= (slen nil) 0))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> v x0) (= v x0)))
(assert (= |3| 3))
(assert (not (> v |3|)))
(assert (or (> v x0) (= v x0)))
(assert (= |3| 3))
(assert (not (> v |3|)))
(assert (not true))

  Show *************** TypeChecking Succsessful {v:Ty_int | 
 	 Conj <c 
 Disj <d  v > x0
 	,   v = x0>d 
 	 , Negation v > 3 >c }
 ##################################################################################
  *************** Successfully Synthesized Args ei Forall i 
 # of Possible Argument Options for sizecheck 3
 Possible Arg Options 
 EI x0
 Possible Arg Options 
 EI _lbv0
 Possible Arg Options 
 EI _lbv1
 Apply Single Argument Case : f (ei) Case sizecheck
  Case : f (ei) Case sizecheck x0
 Finding Already seen tree for apply sizecheck  (, x0 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 let _lbv2 = apply sizecheck  (, x0 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  Case : f (ei) Case sizecheck _lbv0
 Finding Already seen tree for apply sizecheck  (, _lbv0 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 let _lbv3 = apply sizecheck  (, _lbv0 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  Case : f (ei) Case sizecheck _lbv1
 Finding Already seen tree for apply sizecheck  (, _lbv1 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 let _lbv4 = apply sizecheck  (, _lbv1 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  Sorted Exxpressions
 Non-Expanded _lbv2
 Program apply sizecheck  (, x0 ) 
 Size 2
 Non-Expanded _lbv4
 Program apply sizecheck  (, apply int_gen  (, s ) ) 
 Size 3
 Non-Expanded _lbv3
 Program apply sizecheck  (, apply int_gen  (, x0 ) ) 
 Size 3
 Typechecking apply sizecheck  (, x0 )
 Against {var_v4:Ty_bool | true}
 Typechecking apply sizecheck  (, x0 )
 Against {var_v4:Ty_bool | true}
 Argument x0 :: {var_v3:Ty_int | true} | true                                                                                
solver 
 (declare-sort T255)
(declare-fun set6 (Bool) Bool)
(declare-fun slist (T255 Bool) Bool)
(declare-fun nil () T255)
(declare-fun slen (T255) Int)
(declare-fun s () Int)
(declare-fun _lbv1 () Int)
(declare-fun |3| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv0 () Int)
(declare-fun |0| () Int)
(declare-fun v () Bool)
(assert (forall ((bv0 Bool)) (= (set6 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set6 bv0))))
(assert (= (slen nil) 0))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= v true) (and (= x0 |0|) (= (= v false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= v true) (and (= x0 |0|) (= (= v false) (> x0 |0|)))))
(assert (not true))

  Show *************** TypeChecking Succsessful {v:Ty_bool | DoubleImpl 
 v = true
  
 	 Conj <c x0 = 0
 	 , DoubleImpl 
 v = false
  x0 > 0 >c }
 Typechecking apply sizecheck  (, _lbv1 )
 Against {var_v4:Ty_bool | true}
 Typechecking apply sizecheck  (, _lbv1 )
 Against {var_v4:Ty_bool | true}
 Argument _lbv1 :: {v:Ty_int | 
 	 Conj <c 
 Disj <d  v > s
 	,   v = s>d 
 	 , Negation v > 3 >c } | 
 	 Conj <c 
 Disj <d  _lbv1 > s
 	,   _lbv1 = s>d 
 	 , Negation _lbv1 > 3 >c                                                                                                                        
solver 
 (declare-sort T297)
(declare-fun set7 (Bool) Bool)
(declare-fun slist (T297 Bool) Bool)
(declare-fun nil () T297)
(declare-fun slen (T297) Int)
(declare-fun s () Int)
(declare-fun _lbv1 () Int)
(declare-fun |3| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv0 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun v () Bool)
(assert (forall ((bv0 Bool)) (= (set7 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set7 bv0))))
(assert (= (slen nil) 0))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= v true) (and (= _lbv1 |0|) (= (= v false) (> _lbv1 |0|)))))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= v true) (and (= _lbv1 |0|) (= (= v false) (> _lbv1 |0|)))))
(assert (not true))

  Show *************** TypeChecking Succsessful {v:Ty_bool | DoubleImpl 
 v = true
  
 	 Conj <c _lbv1 = 0
 	 , DoubleImpl 
 v = false
  _lbv1 > 0 >c }
 Typechecking apply sizecheck  (, _lbv0 )
 Against {var_v4:Ty_bool | true}
 Typechecking apply sizecheck  (, _lbv0 )
 Against {var_v4:Ty_bool | true}
 Argument _lbv0 :: {v:Ty_int | 
 	 Conj <c 
 Disj <d  v > x0
 	,   v = x0>d 
 	 , Negation v > 3 >c } | 
 	 Conj <c 
 Disj <d  _lbv0 > x0
 	,   _lbv0 = x0>d 
 	 , Negation _lbv0 > 3 >c                                                                                                                                               
solver 
 (declare-sort T339)
(declare-fun set8 (Bool) Bool)
(declare-fun slist (T339 Bool) Bool)
(declare-fun nil () T339)
(declare-fun slen (T339) Int)
(declare-fun s () Int)
(declare-fun _lbv1 () Int)
(declare-fun |3| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv0 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun v () Bool)
(assert (forall ((bv0 Bool)) (= (set8 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set8 bv0))))
(assert (= (slen nil) 0))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= v true) (and (= _lbv0 |0|) (= (= v false) (> _lbv0 |0|)))))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= v true) (and (= _lbv0 |0|) (= (= v false) (> _lbv0 |0|)))))
(assert (not true))

  Show *************** TypeChecking Succsessful {v:Ty_bool | DoubleImpl 
 v = true
  
 	 Conj <c _lbv0 = 0
 	 , DoubleImpl 
 v = false
  _lbv0 > 0 >c }
 Show :: iSynthesize Boolean Successful _lbv3
 Show :: iSynthesize Boolean Successful {v:Ty_bool | DoubleImpl 
 v = true
  
 	 Conj <c _lbv0 = 0
 	 , DoubleImpl 
 v = false
  _lbv0 > 0 >c }
  *********************Synthesizing the True branch*******************
 Show :: True Predicate 
 	 Conj <c var_v5 = true
 	 , DoubleImpl 
 var_v5 = true
  
 	 Conj <c _lbv0 = 0
 	 , DoubleImpl 
 var_v5 = false
  _lbv0 > 0 >c  >c 
 Show ***********Calling Scalar synthesize***************
 esynthesizeScalar for {v:Ty_alphalist | 
 	 Conj <c (slist)(v) = (true)
 	 , 
 	 Conj <c (slen)(v) ==(s)
 	 , 
 	 Impl < (slen)(v) > (0)
 	 
 Disj <d  (shd)(v) > (x0)
 	,   (shd)(v) ==(x0)>d  > >c  >c }
  Enumeration for 
 spec 
 {v:Ty_alphalist | 
 	 Conj <c (slist)(v) = (true)
 	 , 
 	 Conj <c (slen)(v) ==(s)
 	 , 
 	 Impl < (slen)(v) > (0)
 	 
 Disj <d  (shd)(v) > (x0)
 	,   (shd)(v) ==(x0)>d  > >c  >c }
 
 Enumerating a Scalar Term nil
 
 Type of the Scalar Term {v:Ty_alphalist | 
 	 Conj <c (slist)(v) = (true)
 	 , (slen)(v) ==(0) >c }                                                                                                                                                               
solver 
 (declare-sort T382)
(declare-fun s () Int)
(declare-fun _lbv1 () Int)
(declare-fun |3| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv0 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun set9 (Bool) Bool)
(declare-fun slist (T382 Bool) Bool)
(declare-fun nil () T382)
(declare-fun slen (T382) Int)
(declare-fun set10 (Bool) Bool)
(declare-fun set11 (Bool) Bool)
(declare-fun shd (T382) Int)
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (forall ((bv0 Bool)) (= (set9 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set9 bv0))))
(assert (= (slen nil) 0))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (forall ((bv0 Bool)) (= (set10 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set10 bv0))))
(assert (= (slen nil) 0))
(assert (forall ((bv0 Bool)) (= (set11 bv0) (and (= bv0 true)))))
(assert (let ((a!1 (=> (> (slen nil) 0) (or (> (shd nil) x0) (= (shd nil) x0)))))
(let ((a!2 (and (forall ((bv0 Bool)) (= (slist nil bv0) (set11 bv0)))
                (= (slen nil) s)
                a!1)))
  (not a!2))))

 
 Timeout the subtype check T_vi <: T_goal
 >>>>>>>>>>>>>>>>>> No Scalar found in Environment, Trying esynthesizePureApp <<<<<<<<<<<<<<<<<< 
  Pure Fun Application: esynthesizePureApp 
 Show Potential Functions
  , 
 goal, 
 cons
 ############################################################
  Trying Pure Component goal
  *************** Trying Arrow Component ************goal :  Arrow ( ( s1 : {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c } ) ->  Arrow ( ( x0 : {var_v3:Ty_int | true} ) -> {v:Ty_alphalist | 
 	 Conj <c (slist)(v) = (true)
 	 , 
 	 Conj <c (slen)(v) ==(s1)
 	 , 
 	 Impl < (slen)(v) > (0)
 	 
 Disj <d  (shd)(v) > (x0)
 	,   (shd)(v) ==(x0)>d  > >c  >c }
  *************** Synthesizing Args ei : ti for ************goal
 ##################################################################################
  Synthesizing the 1th argument for Function goal
  Trying Arguments in Scalars 
 esynthesizeScalar for {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c }
  Enumeration for 
 spec 
 {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c }
 
 Enumerating a Scalar Term s
 
 Type of the Scalar Term {v:Ty_int | true}                                                                                                                                                                
solver 
 (declare-sort T423)
(declare-fun set12 (Bool) Bool)
(declare-fun slist (T423 Bool) Bool)
(declare-fun nil () T423)
(declare-fun slen (T423) Int)
(declare-fun s () Int)
(declare-fun _lbv1 () Int)
(declare-fun |3| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv0 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(assert (forall ((bv0 Bool)) (= (set12 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set12 bv0))))
(assert (= (slen nil) 0))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (not (> s s)))

 
 FaileD the subtype check T_vi <: T_goal
 
 Enumerating a Scalar Term x0
 
 Type of the Scalar Term {var_v3:Ty_int | true}                                                                                                                                                                
solver 
 (declare-sort T465)
(declare-fun set13 (Bool) Bool)
(declare-fun slist (T465 Bool) Bool)
(declare-fun nil () T465)
(declare-fun slen (T465) Int)
(declare-fun s () Int)
(declare-fun _lbv1 () Int)
(declare-fun |3| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv0 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(assert (forall ((bv0 Bool)) (= (set13 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set13 bv0))))
(assert (= (slen nil) 0))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (not (> s x0)))

 
 FaileD the subtype check T_vi <: T_goal
 
 Enumerating a Scalar Term _lbv1
 
 Type of the Scalar Term {v:Ty_int | 
 	 Conj <c 
 Disj <d  v > s
 	,   v = s>d 
 	 , Negation v > 3 >c }                                                                                                                                                                                
solver 
 (declare-sort T507)
(declare-fun set14 (Bool) Bool)
(declare-fun slist (T507 Bool) Bool)
(declare-fun nil () T507)
(declare-fun slen (T507) Int)
(declare-fun x0 () Int)
(declare-fun _lbv0 () Int)
(declare-fun |3| () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun s () Int)
(assert (forall ((bv0 Bool)) (= (set14 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set14 bv0))))
(assert (= (slen nil) 0))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (not (> s _lbv1)))

 
 FaileD the subtype check T_vi <: T_goal
 
 Enumerating a Scalar Term _lbv0
 
 Type of the Scalar Term {v:Ty_int | 
 	 Conj <c 
 Disj <d  v > x0
 	,   v = x0>d 
 	 , Negation v > 3 >c }                                                                                                                                                                                
solver 
 (declare-sort T549)
(declare-fun set15 (Bool) Bool)
(declare-fun slist (T549 Bool) Bool)
(declare-fun nil () T549)
(declare-fun slen (T549) Int)
(declare-fun s () Int)
(declare-fun _lbv1 () Int)
(declare-fun |3| () Int)
(declare-fun |0| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(assert (forall ((bv0 Bool)) (= (set15 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set15 bv0))))
(assert (= (slen nil) 0))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (not (> s _lbv0)))

 
 FaileD the subtype check T_vi <: T_goal
 >>>>>>>>>>>>>>>>>> No Scalar found in Environment, Trying esynthesizePureApp <<<<<<<<<<<<<<<<<< 
  Pure Fun Application: esynthesizePureApp 
 Show Potential Functions
  , 
 int_gen, 
 subs
 ############################################################
  Trying Pure Component int_gen
  *************** Trying Arrow Component ************int_gen :  Arrow ( ( n3 : {var_v0:Ty_int | true} ) -> {v:Ty_int | 
 	 Conj <c 
 Disj <d  v > n3
 	,   v = n3>d 
 	 , Negation v > 3 >c }
  *************** Synthesizing Args ei : ti for ************int_gen
 ##################################################################################
  Synthesizing the 1th argument for Function int_gen
  Trying Arguments in Scalars 
 esynthesizeScalar for {var_v0:Ty_int | true}
  Enumeration for 
 spec 
 {var_v0:Ty_int | true}
 
 Enumerating a Scalar Term s
 
 Type of the Scalar Term {v:Ty_int | true}                                                                                                                                                           
solver 
 (declare-sort T591)
(declare-fun set16 (Bool) Bool)
(declare-fun slist (T591 Bool) Bool)
(declare-fun nil () T591)
(declare-fun slen (T591) Int)
(declare-fun s () Int)
(declare-fun _lbv1 () Int)
(declare-fun |3| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv0 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(assert (forall ((bv0 Bool)) (= (set16 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set16 bv0))))
(assert (= (slen nil) 0))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (not true))

 
 Enumerating a Scalar Term x0
 
 Type of the Scalar Term {var_v3:Ty_int | true}                                                                                                                                                           
solver 
 (declare-sort T633)
(declare-fun set17 (Bool) Bool)
(declare-fun slist (T633 Bool) Bool)
(declare-fun nil () T633)
(declare-fun slen (T633) Int)
(declare-fun s () Int)
(declare-fun _lbv1 () Int)
(declare-fun |3| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv0 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(assert (forall ((bv0 Bool)) (= (set17 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set17 bv0))))
(assert (= (slen nil) 0))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (not true))

 
 Enumerating a Scalar Term _lbv1
 
 Type of the Scalar Term {v:Ty_int | 
 	 Conj <c 
 Disj <d  v > s
 	,   v = s>d 
 	 , Negation v > 3 >c }
 ################################################
 Skipping Variable _lbv1 As Outer Function Call is int_gen
 
 Enumerating a Scalar Term _lbv0
 
 Type of the Scalar Term {v:Ty_int | 
 	 Conj <c 
 Disj <d  v > x0
 	,   v = x0>d 
 	 , Negation v > 3 >c }
 ################################################
 Skipping Variable _lbv0 As Outer Function Call is int_gen
 Show :: Found a Few Macthing Scalars 
  Next Trying Arguments of the form f (ei...) 
  Pure Fun Application: esynthesizePureApp 
 ##################################################################################
  *************** Successfully Synthesized Args ei Forall i 
 # of Possible Argument Options for int_gen 2
 Possible Arg Options 
 EI x0
 Possible Arg Options 
 EI s
 Apply Single Argument Case : f (ei) Case int_gen
  Case : f (ei) Case int_gen x0
 Finding Already seen tree for apply int_gen  (, x0 )
 Found _lbv0
  Case : f (ei) Case int_gen s
 Finding Already seen tree for apply int_gen  (, s )
 Found _lbv1
  Sorted Exxpressions
 Non-Expanded _lbv1
 Program apply int_gen  (, s ) 
 Size 2
 Non-Expanded _lbv0
 Program apply int_gen  (, x0 ) 
 Size 2
 Typechecking apply int_gen  (, s )
 Against {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c }
 Typechecking apply int_gen  (, s )
 Against {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c }
 Argument s :: {v:Ty_int | true} | true                                                                                                                                                                                                
solver 
 (declare-sort T675)
(declare-fun set18 (Bool) Bool)
(declare-fun slist (T675 Bool) Bool)
(declare-fun nil () T675)
(declare-fun slen (T675) Int)
(declare-fun s () Int)
(declare-fun _lbv1 () Int)
(declare-fun |3| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv0 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun v () Int)
(assert (forall ((bv0 Bool)) (= (set18 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set18 bv0))))
(assert (= (slen nil) 0))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (or (> v s) (= v s)))
(assert (= |3| 3))
(assert (not (> v |3|)))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (or (> v s) (= v s)))
(assert (= |3| 3))
(assert (not (> v |3|)))
(assert (not (> s v)))

 Typechecking apply int_gen  (, x0 )
 Against {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c }
 Typechecking apply int_gen  (, x0 )
 Against {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c }
 Argument x0 :: {var_v3:Ty_int | true} | true                                                                                                                                                                                                
solver 
 (declare-sort T717)
(declare-fun set19 (Bool) Bool)
(declare-fun slist (T717 Bool) Bool)
(declare-fun nil () T717)
(declare-fun slen (T717) Int)
(declare-fun s () Int)
(declare-fun _lbv1 () Int)
(declare-fun |3| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv0 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun v () Int)
(assert (forall ((bv0 Bool)) (= (set19 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set19 bv0))))
(assert (= (slen nil) 0))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (or (> v x0) (= v x0)))
(assert (= |3| 3))
(assert (not (> v |3|)))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (or (> v x0) (= v x0)))
(assert (= |3| 3))
(assert (not (> v |3|)))
(assert (not (> s v)))

  ###################################################
  The Choice of Function int_gen Was Ill Fated Try Next Choice of function
 ############################################################
  Trying Pure Component subs
  *************** Trying Arrow Component ************subs :  Arrow ( ( n : {v:Ty_int | true} ) -> {v:Ty_int | (v) ==((n) -- (1))}
  *************** Synthesizing Args ei : ti for ************subs
 ##################################################################################
  Synthesizing the 1th argument for Function subs
  Trying Arguments in Scalars 
 esynthesizeScalar for {v:Ty_int | true}
  Enumeration for 
 spec 
 {v:Ty_int | true}
 
 Enumerating a Scalar Term s
 
 Type of the Scalar Term {v:Ty_int | true}                                                                                                                                                           
solver 
 (declare-sort T759)
(declare-fun set20 (Bool) Bool)
(declare-fun slist (T759 Bool) Bool)
(declare-fun nil () T759)
(declare-fun slen (T759) Int)
(declare-fun s () Int)
(declare-fun _lbv1 () Int)
(declare-fun |3| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv0 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(assert (forall ((bv0 Bool)) (= (set20 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set20 bv0))))
(assert (= (slen nil) 0))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (not true))

 
 Enumerating a Scalar Term x0
 
 Type of the Scalar Term {var_v3:Ty_int | true}                                                                                                                                                           
solver 
 (declare-sort T801)
(declare-fun set21 (Bool) Bool)
(declare-fun slist (T801 Bool) Bool)
(declare-fun nil () T801)
(declare-fun slen (T801) Int)
(declare-fun s () Int)
(declare-fun _lbv1 () Int)
(declare-fun |3| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv0 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(assert (forall ((bv0 Bool)) (= (set21 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set21 bv0))))
(assert (= (slen nil) 0))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (not true))

 
 Enumerating a Scalar Term _lbv1
 
 Type of the Scalar Term {v:Ty_int | 
 	 Conj <c 
 Disj <d  v > s
 	,   v = s>d 
 	 , Negation v > 3 >c }                                                                                                                                                                           
solver 
 (declare-sort T843)
(declare-fun set22 (Bool) Bool)
(declare-fun slist (T843 Bool) Bool)
(declare-fun nil () T843)
(declare-fun slen (T843) Int)
(declare-fun x0 () Int)
(declare-fun _lbv0 () Int)
(declare-fun |3| () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun s () Int)
(assert (forall ((bv0 Bool)) (= (set22 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set22 bv0))))
(assert (= (slen nil) 0))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (not true))

 
 Enumerating a Scalar Term _lbv0
 
 Type of the Scalar Term {v:Ty_int | 
 	 Conj <c 
 Disj <d  v > x0
 	,   v = x0>d 
 	 , Negation v > 3 >c }                                                                                                                                                                           
solver 
 (declare-sort T885)
(declare-fun set23 (Bool) Bool)
(declare-fun slist (T885 Bool) Bool)
(declare-fun nil () T885)
(declare-fun slen (T885) Int)
(declare-fun s () Int)
(declare-fun _lbv1 () Int)
(declare-fun |3| () Int)
(declare-fun |0| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(assert (forall ((bv0 Bool)) (= (set23 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set23 bv0))))
(assert (= (slen nil) 0))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (not true))

 Show :: Found a Few Macthing Scalars 
  Next Trying Arguments of the form f (ei...) 
  Pure Fun Application: esynthesizePureApp 
 ##################################################################################
  *************** Successfully Synthesized Args ei Forall i 
 # of Possible Argument Options for subs 4
 Possible Arg Options 
 EI _lbv0
 Possible Arg Options 
 EI _lbv1
 Possible Arg Options 
 EI x0
 Possible Arg Options 
 EI s
 Apply Single Argument Case : f (ei) Case subs
  Case : f (ei) Case subs _lbv0
 Finding Already seen tree for apply subs  (, _lbv0 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 let _lbv5 = apply subs  (, _lbv0 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  Case : f (ei) Case subs _lbv1
 Finding Already seen tree for apply subs  (, _lbv1 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 let _lbv6 = apply subs  (, _lbv1 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  Case : f (ei) Case subs x0
 Finding Already seen tree for apply subs  (, x0 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 let _lbv7 = apply subs  (, x0 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  Case : f (ei) Case subs s
 Finding Already seen tree for apply subs  (, s )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 let _lbv8 = apply subs  (, s )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  Sorted Exxpressions
 Non-Expanded _lbv8
 Program apply subs  (, s ) 
 Size 2
 Non-Expanded _lbv7
 Program apply subs  (, x0 ) 
 Size 2
 Non-Expanded _lbv6
 Program apply subs  (, apply int_gen  (, s ) ) 
 Size 3
 Non-Expanded _lbv5
 Program apply subs  (, apply int_gen  (, x0 ) ) 
 Size 3
 Typechecking apply subs  (, s )
 Against {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c }
 Typechecking apply subs  (, s )
 Against {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c }
 Argument s :: {v:Ty_int | true} | true                                                                                                                                                                
solver 
 (declare-sort T927)
(declare-fun set24 (Bool) Bool)
(declare-fun slist (T927 Bool) Bool)
(declare-fun nil () T927)
(declare-fun slen (T927) Int)
(declare-fun s () Int)
(declare-fun _lbv1 () Int)
(declare-fun |3| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv0 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun v () Int)
(assert (forall ((bv0 Bool)) (= (set24 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set24 bv0))))
(assert (= (slen nil) 0))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (= v (- s 1)))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (= v (- s 1)))
(assert (not (> s v)))

  Show *************** TypeChecking Succsessful {v:Ty_int | (v) ==((s) -- (1))}
 Typechecking apply subs  (, x0 )
 Against {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c }
 Typechecking apply subs  (, x0 )
 Against {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c }
 Argument x0 :: {var_v3:Ty_int | true} | true                                                                                                                                                                
solver 
 (declare-sort T969)
(declare-fun set25 (Bool) Bool)
(declare-fun slist (T969 Bool) Bool)
(declare-fun nil () T969)
(declare-fun slen (T969) Int)
(declare-fun s () Int)
(declare-fun _lbv1 () Int)
(declare-fun |3| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv0 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv8 () Int)
(declare-fun v () Int)
(assert (forall ((bv0 Bool)) (= (set25 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set25 bv0))))
(assert (= (slen nil) 0))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (= _lbv8 (- s 1)))
(assert (= v (- x0 1)))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (= v (- x0 1)))
(assert (not (> s v)))

 Typechecking apply subs  (, _lbv1 )
 Against {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c }
 Typechecking apply subs  (, _lbv1 )
 Against {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c }
 Argument _lbv1 :: {v:Ty_int | 
 	 Conj <c 
 Disj <d  v > s
 	,   v = s>d 
 	 , Negation v > 3 >c } | 
 	 Conj <c 
 Disj <d  _lbv1 > s
 	,   _lbv1 = s>d 
 	 , Negation _lbv1 > 3 >c                                                                                                                                                                                 
solver 
 (declare-sort T1011)
(declare-fun set26 (Bool) Bool)
(declare-fun slist (T1011 Bool) Bool)
(declare-fun nil () T1011)
(declare-fun slen (T1011) Int)
(declare-fun s () Int)
(declare-fun _lbv1 () Int)
(declare-fun |3| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv0 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv8 () Int)
(declare-fun v () Int)
(assert (forall ((bv0 Bool)) (= (set26 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set26 bv0))))
(assert (= (slen nil) 0))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (= _lbv8 (- s 1)))
(assert (= v (- _lbv1 1)))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (= v (- _lbv1 1)))
(assert (not (> s v)))

 Typechecking apply subs  (, _lbv0 )
 Against {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c }
 Typechecking apply subs  (, _lbv0 )
 Against {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c }
 Argument _lbv0 :: {v:Ty_int | 
 	 Conj <c 
 Disj <d  v > x0
 	,   v = x0>d 
 	 , Negation v > 3 >c } | 
 	 Conj <c 
 Disj <d  _lbv0 > x0
 	,   _lbv0 = x0>d 
 	 , Negation _lbv0 > 3 >c                                                                                                                                                                                 
solver 
 (declare-sort T1053)
(declare-fun set27 (Bool) Bool)
(declare-fun slist (T1053 Bool) Bool)
(declare-fun nil () T1053)
(declare-fun slen (T1053) Int)
(declare-fun s () Int)
(declare-fun _lbv1 () Int)
(declare-fun |3| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv0 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv8 () Int)
(declare-fun v () Int)
(assert (forall ((bv0 Bool)) (= (set27 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set27 bv0))))
(assert (= (slen nil) 0))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (= _lbv8 (- s 1)))
(assert (= v (- _lbv0 1)))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (= v (- _lbv0 1)))
(assert (not (> s v)))

  Next Trying Arguments of the form f (ei...) 
  Pure Fun Application: esynthesizePureApp 
 Show Potential Functions
  , 
 int_gen, 
 subs
 ############################################################
  Trying Pure Component int_gen
  *************** Trying Arrow Component ************int_gen :  Arrow ( ( n3 : {var_v0:Ty_int | true} ) -> {v:Ty_int | 
 	 Conj <c 
 Disj <d  v > n3
 	,   v = n3>d 
 	 , Negation v > 3 >c }
  *************** Synthesizing Args ei : ti for ************int_gen
 ##################################################################################
  Synthesizing the 1th argument for Function int_gen
  Trying Arguments in Scalars 
 esynthesizeScalar for {var_v0:Ty_int | true}
  Enumeration for 
 spec 
 {var_v0:Ty_int | true}
 
 Enumerating a Scalar Term s
 
 Type of the Scalar Term {v:Ty_int | true}                                                                                                                                                           
solver 
 (declare-sort T1095)
(declare-fun set28 (Bool) Bool)
(declare-fun slist (T1095 Bool) Bool)
(declare-fun nil () T1095)
(declare-fun slen (T1095) Int)
(declare-fun s () Int)
(declare-fun _lbv1 () Int)
(declare-fun |3| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv0 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv8 () Int)
(assert (forall ((bv0 Bool)) (= (set28 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set28 bv0))))
(assert (= (slen nil) 0))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (= _lbv8 (- s 1)))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (not true))

 
 Enumerating a Scalar Term x0
 
 Type of the Scalar Term {var_v3:Ty_int | true}                                                                                                                                                           
solver 
 (declare-sort T1137)
(declare-fun set29 (Bool) Bool)
(declare-fun slist (T1137 Bool) Bool)
(declare-fun nil () T1137)
(declare-fun slen (T1137) Int)
(declare-fun s () Int)
(declare-fun _lbv1 () Int)
(declare-fun |3| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv0 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv8 () Int)
(assert (forall ((bv0 Bool)) (= (set29 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set29 bv0))))
(assert (= (slen nil) 0))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (= _lbv8 (- s 1)))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (not true))

 
 Enumerating a Scalar Term _lbv1
 
 Type of the Scalar Term {v:Ty_int | 
 	 Conj <c 
 Disj <d  v > s
 	,   v = s>d 
 	 , Negation v > 3 >c }
 ################################################
 Skipping Variable _lbv1 As Outer Function Call is int_gen
 
 Enumerating a Scalar Term _lbv0
 
 Type of the Scalar Term {v:Ty_int | 
 	 Conj <c 
 Disj <d  v > x0
 	,   v = x0>d 
 	 , Negation v > 3 >c }
 ################################################
 Skipping Variable _lbv0 As Outer Function Call is int_gen
 
 Enumerating a Scalar Term _lbv8
 
 Type of the Scalar Term {v:Ty_int | (v) ==((s) -- (1))}                                                                                                                                                           
solver 
 (declare-sort T1179)
(declare-fun set30 (Bool) Bool)
(declare-fun slist (T1179 Bool) Bool)
(declare-fun nil () T1179)
(declare-fun slen (T1179) Int)
(declare-fun s () Int)
(declare-fun _lbv1 () Int)
(declare-fun |3| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv0 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv8 () Int)
(assert (forall ((bv0 Bool)) (= (set30 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set30 bv0))))
(assert (= (slen nil) 0))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (= _lbv8 (- s 1)))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (= _lbv8 (- s 1)))
(assert (not true))

 Show :: Found a Few Macthing Scalars 
  Next Trying Arguments of the form f (ei...) 
  Pure Fun Application: esynthesizePureApp 
 ##################################################################################
  *************** Successfully Synthesized Args ei Forall i 
 # of Possible Argument Options for int_gen 3
 Possible Arg Options 
 EI _lbv8
 Possible Arg Options 
 EI x0
 Possible Arg Options 
 EI s
 Apply Single Argument Case : f (ei) Case int_gen
  Case : f (ei) Case int_gen _lbv8
 Finding Already seen tree for apply int_gen  (, _lbv8 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 let _lbv9 = apply int_gen  (, _lbv8 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  Case : f (ei) Case int_gen x0
 Finding Already seen tree for apply int_gen  (, x0 )
 Found _lbv0
  Case : f (ei) Case int_gen s
 Finding Already seen tree for apply int_gen  (, s )
 Found _lbv1
  Sorted Exxpressions
 Non-Expanded _lbv1
 Program apply int_gen  (, s ) 
 Size 2
 Non-Expanded _lbv0
 Program apply int_gen  (, x0 ) 
 Size 2
 Non-Expanded _lbv9
 Program apply int_gen  (, apply subs  (, s ) ) 
 Size 3
 Typechecking apply int_gen  (, s )
 Against {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c }
 Typechecking apply int_gen  (, s )
 Against {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c }
 Argument s :: {v:Ty_int | true} | true                                                                                                                                                                                                
solver 
 (declare-sort T1221)
(declare-fun set31 (Bool) Bool)
(declare-fun slist (T1221 Bool) Bool)
(declare-fun nil () T1221)
(declare-fun slen (T1221) Int)
(declare-fun s () Int)
(declare-fun _lbv1 () Int)
(declare-fun |3| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv0 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv8 () Int)
(declare-fun v () Int)
(assert (forall ((bv0 Bool)) (= (set31 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set31 bv0))))
(assert (= (slen nil) 0))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (= _lbv8 (- s 1)))
(assert (or (> v s) (= v s)))
(assert (= |3| 3))
(assert (not (> v |3|)))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (or (> v s) (= v s)))
(assert (= |3| 3))
(assert (not (> v |3|)))
(assert (not (> s v)))

 Typechecking apply int_gen  (, x0 )
 Against {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c }
 Typechecking apply int_gen  (, x0 )
 Against {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c }
 Argument x0 :: {var_v3:Ty_int | true} | true                                                                                                                                                                                                
solver 
 (declare-sort T1263)
(declare-fun set32 (Bool) Bool)
(declare-fun slist (T1263 Bool) Bool)
(declare-fun nil () T1263)
(declare-fun slen (T1263) Int)
(declare-fun s () Int)
(declare-fun _lbv1 () Int)
(declare-fun |3| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv0 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv8 () Int)
(declare-fun v () Int)
(assert (forall ((bv0 Bool)) (= (set32 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set32 bv0))))
(assert (= (slen nil) 0))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (= _lbv8 (- s 1)))
(assert (or (> v x0) (= v x0)))
(assert (= |3| 3))
(assert (not (> v |3|)))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (or (> v x0) (= v x0)))
(assert (= |3| 3))
(assert (not (> v |3|)))
(assert (not (> s v)))

 Typechecking apply int_gen  (, _lbv8 )
 Against {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c }
 Typechecking apply int_gen  (, _lbv8 )
 Against {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c }
 Argument _lbv8 :: {v:Ty_int | (v) ==((s) -- (1))} | (_lbv8) ==((s) -- (1))                                                                                                                                                                                                
solver 
 (declare-sort T1305)
(declare-fun set33 (Bool) Bool)
(declare-fun slist (T1305 Bool) Bool)
(declare-fun nil () T1305)
(declare-fun slen (T1305) Int)
(declare-fun s () Int)
(declare-fun _lbv1 () Int)
(declare-fun |3| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv0 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv8 () Int)
(declare-fun v () Int)
(assert (forall ((bv0 Bool)) (= (set33 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set33 bv0))))
(assert (= (slen nil) 0))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (= _lbv8 (- s 1)))
(assert (or (> v _lbv8) (= v _lbv8)))
(assert (= |3| 3))
(assert (not (> v |3|)))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (= _lbv8 (- s 1)))
(assert (or (> v _lbv8) (= v _lbv8)))
(assert (= |3| 3))
(assert (not (> v |3|)))
(assert (not (> s v)))

  ###################################################
  The Choice of Function int_gen Was Ill Fated Try Next Choice of function
 ############################################################
  Trying Pure Component subs
  *************** Trying Arrow Component ************subs :  Arrow ( ( n : {v:Ty_int | true} ) -> {v:Ty_int | (v) ==((n) -- (1))}
  *************** Synthesizing Args ei : ti for ************subs
 ##################################################################################
  Synthesizing the 1th argument for Function subs
  Trying Arguments in Scalars 
 esynthesizeScalar for {v:Ty_int | true}
  Enumeration for 
 spec 
 {v:Ty_int | true}
 
 Enumerating a Scalar Term s
 
 Type of the Scalar Term {v:Ty_int | true}                                                                                                                                                           
solver 
 (declare-sort T1347)
(declare-fun set34 (Bool) Bool)
(declare-fun slist (T1347 Bool) Bool)
(declare-fun nil () T1347)
(declare-fun slen (T1347) Int)
(declare-fun s () Int)
(declare-fun _lbv1 () Int)
(declare-fun |3| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv0 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv8 () Int)
(assert (forall ((bv0 Bool)) (= (set34 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set34 bv0))))
(assert (= (slen nil) 0))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (= _lbv8 (- s 1)))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (not true))

 
 Enumerating a Scalar Term x0
 
 Type of the Scalar Term {var_v3:Ty_int | true}                                                                                                                                                           
solver 
 (declare-sort T1389)
(declare-fun set35 (Bool) Bool)
(declare-fun slist (T1389 Bool) Bool)
(declare-fun nil () T1389)
(declare-fun slen (T1389) Int)
(declare-fun s () Int)
(declare-fun _lbv1 () Int)
(declare-fun |3| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv0 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv8 () Int)
(assert (forall ((bv0 Bool)) (= (set35 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set35 bv0))))
(assert (= (slen nil) 0))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (= _lbv8 (- s 1)))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (not true))

 
 Enumerating a Scalar Term _lbv1
 
 Type of the Scalar Term {v:Ty_int | 
 	 Conj <c 
 Disj <d  v > s
 	,   v = s>d 
 	 , Negation v > 3 >c }                                                                                                                                                                           
solver 
 (declare-sort T1431)
(declare-fun set36 (Bool) Bool)
(declare-fun slist (T1431 Bool) Bool)
(declare-fun nil () T1431)
(declare-fun slen (T1431) Int)
(declare-fun x0 () Int)
(declare-fun _lbv0 () Int)
(declare-fun |3| () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun s () Int)
(declare-fun _lbv8 () Int)
(assert (forall ((bv0 Bool)) (= (set36 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set36 bv0))))
(assert (= (slen nil) 0))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (= _lbv8 (- s 1)))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (not true))

 
 Enumerating a Scalar Term _lbv0
 
 Type of the Scalar Term {v:Ty_int | 
 	 Conj <c 
 Disj <d  v > x0
 	,   v = x0>d 
 	 , Negation v > 3 >c }                                                                                                                                                                           
solver 
 (declare-sort T1473)
(declare-fun set37 (Bool) Bool)
(declare-fun slist (T1473 Bool) Bool)
(declare-fun nil () T1473)
(declare-fun slen (T1473) Int)
(declare-fun s () Int)
(declare-fun _lbv1 () Int)
(declare-fun |3| () Int)
(declare-fun |0| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv8 () Int)
(assert (forall ((bv0 Bool)) (= (set37 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set37 bv0))))
(assert (= (slen nil) 0))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (= _lbv8 (- s 1)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (not true))

 
 Enumerating a Scalar Term _lbv8
 
 Type of the Scalar Term {v:Ty_int | (v) ==((s) -- (1))}
 ################################################
 Skipping Variable _lbv8 As Outer Function Call is subs
 Show :: Found a Few Macthing Scalars 
  Next Trying Arguments of the form f (ei...) 
  Pure Fun Application: esynthesizePureApp 
 ##################################################################################
  *************** Successfully Synthesized Args ei Forall i 
 # of Possible Argument Options for subs 4
 Possible Arg Options 
 EI _lbv0
 Possible Arg Options 
 EI _lbv1
 Possible Arg Options 
 EI x0
 Possible Arg Options 
 EI s
 Apply Single Argument Case : f (ei) Case subs
  Case : f (ei) Case subs _lbv0
 Finding Already seen tree for apply subs  (, _lbv0 )
 Found _lbv5
  Case : f (ei) Case subs _lbv1
 Finding Already seen tree for apply subs  (, _lbv1 )
 Found _lbv6
  Case : f (ei) Case subs x0
 Finding Already seen tree for apply subs  (, x0 )
 Found _lbv7
  Case : f (ei) Case subs s
 Finding Already seen tree for apply subs  (, s )
 Found _lbv8
  Sorted Exxpressions
 Non-Expanded _lbv8
 Program apply subs  (, s ) 
 Size 2
 Non-Expanded _lbv7
 Program apply subs  (, x0 ) 
 Size 2
 Non-Expanded _lbv6
 Program apply subs  (, apply int_gen  (, s ) ) 
 Size 3
 Non-Expanded _lbv5
 Program apply subs  (, apply int_gen  (, x0 ) ) 
 Size 3
 Typechecking apply subs  (, s )
 Against {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c }
 Typechecking apply subs  (, s )
 Against {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c }
 Argument s :: {v:Ty_int | true} | true                                                                                                                                                                               
solver 
 (declare-sort T1515)
(declare-fun set38 (Bool) Bool)
(declare-fun slist (T1515 Bool) Bool)
(declare-fun nil () T1515)
(declare-fun slen (T1515) Int)
(declare-fun s () Int)
(declare-fun _lbv1 () Int)
(declare-fun |3| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv0 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv8 () Int)
(declare-fun _lbv5 () Int)
(declare-fun _lbv6 () Int)
(declare-fun _lbv7 () Int)
(declare-fun v () Int)
(assert (forall ((bv0 Bool)) (= (set38 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set38 bv0))))
(assert (= (slen nil) 0))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (= _lbv8 (- s 1)))
(assert (> s _lbv5))
(assert (> s _lbv6))
(assert (> s _lbv7))
(assert (= v (- s 1)))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (= v (- s 1)))
(assert (not (> s v)))

  Show *************** TypeChecking Succsessful {v:Ty_int | (v) ==((s) -- (1))}
 Typechecking apply subs  (, x0 )
 Against {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c }
 Typechecking apply subs  (, x0 )
 Against {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c }
 Argument x0 :: {var_v3:Ty_int | true} | true                                                                                                                                                                               
solver 
 (declare-sort T1557)
(declare-fun set39 (Bool) Bool)
(declare-fun slist (T1557 Bool) Bool)
(declare-fun nil () T1557)
(declare-fun slen (T1557) Int)
(declare-fun s () Int)
(declare-fun _lbv1 () Int)
(declare-fun |3| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv0 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv5 () Int)
(declare-fun _lbv6 () Int)
(declare-fun _lbv7 () Int)
(declare-fun _lbv8 () Int)
(declare-fun v () Int)
(assert (forall ((bv0 Bool)) (= (set39 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set39 bv0))))
(assert (= (slen nil) 0))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv5))
(assert (> s _lbv6))
(assert (> s _lbv7))
(assert (= _lbv8 (- s 1)))
(assert (= v (- x0 1)))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (= v (- x0 1)))
(assert (not (> s v)))

 Typechecking apply subs  (, _lbv1 )
 Against {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c }
 Typechecking apply subs  (, _lbv1 )
 Against {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c }
 Argument _lbv1 :: {v:Ty_int | 
 	 Conj <c 
 Disj <d  v > s
 	,   v = s>d 
 	 , Negation v > 3 >c } | 
 	 Conj <c 
 Disj <d  _lbv1 > s
 	,   _lbv1 = s>d 
 	 , Negation _lbv1 > 3 >c                                                                                                                                                                                                
solver 
 (declare-sort T1599)
(declare-fun set40 (Bool) Bool)
(declare-fun slist (T1599 Bool) Bool)
(declare-fun nil () T1599)
(declare-fun slen (T1599) Int)
(declare-fun s () Int)
(declare-fun _lbv1 () Int)
(declare-fun |3| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv0 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv5 () Int)
(declare-fun _lbv6 () Int)
(declare-fun _lbv7 () Int)
(declare-fun _lbv8 () Int)
(declare-fun v () Int)
(assert (forall ((bv0 Bool)) (= (set40 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set40 bv0))))
(assert (= (slen nil) 0))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv5))
(assert (> s _lbv6))
(assert (> s _lbv7))
(assert (= _lbv8 (- s 1)))
(assert (= v (- _lbv1 1)))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (= v (- _lbv1 1)))
(assert (not (> s v)))

 Typechecking apply subs  (, _lbv0 )
 Against {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c }
 Typechecking apply subs  (, _lbv0 )
 Against {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c }
 Argument _lbv0 :: {v:Ty_int | 
 	 Conj <c 
 Disj <d  v > x0
 	,   v = x0>d 
 	 , Negation v > 3 >c } | 
 	 Conj <c 
 Disj <d  _lbv0 > x0
 	,   _lbv0 = x0>d 
 	 , Negation _lbv0 > 3 >c                                                                                                                                                                                                
solver 
 (declare-sort T1641)
(declare-fun set41 (Bool) Bool)
(declare-fun slist (T1641 Bool) Bool)
(declare-fun nil () T1641)
(declare-fun slen (T1641) Int)
(declare-fun s () Int)
(declare-fun _lbv1 () Int)
(declare-fun |3| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv0 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv5 () Int)
(declare-fun _lbv6 () Int)
(declare-fun _lbv7 () Int)
(declare-fun _lbv8 () Int)
(declare-fun v () Int)
(assert (forall ((bv0 Bool)) (= (set41 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set41 bv0))))
(assert (= (slen nil) 0))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv5))
(assert (> s _lbv6))
(assert (> s _lbv7))
(assert (= _lbv8 (- s 1)))
(assert (= v (- _lbv0 1)))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (= v (- _lbv0 1)))
(assert (not (> s v)))

 ##################################################################################
  Synthesizing the 2th argument for Function goal
  Trying Arguments in Scalars 
 esynthesizeScalar for {var_v3:Ty_int | true}
  Enumeration for 
 spec 
 {var_v3:Ty_int | true}
 
 Enumerating a Scalar Term s
 
 Type of the Scalar Term {v:Ty_int | true}                                                                                                                                                                          
solver 
 (declare-sort T1683)
(declare-fun set42 (Bool) Bool)
(declare-fun slist (T1683 Bool) Bool)
(declare-fun nil () T1683)
(declare-fun slen (T1683) Int)
(declare-fun s () Int)
(declare-fun _lbv1 () Int)
(declare-fun |3| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv0 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv5 () Int)
(declare-fun _lbv6 () Int)
(declare-fun _lbv7 () Int)
(declare-fun _lbv8 () Int)
(assert (forall ((bv0 Bool)) (= (set42 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set42 bv0))))
(assert (= (slen nil) 0))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv5))
(assert (> s _lbv6))
(assert (> s _lbv7))
(assert (= _lbv8 (- s 1)))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (not true))

 
 Enumerating a Scalar Term x0
 
 Type of the Scalar Term {var_v3:Ty_int | true}                                                                                                                                                                          
solver 
 (declare-sort T1725)
(declare-fun set43 (Bool) Bool)
(declare-fun slist (T1725 Bool) Bool)
(declare-fun nil () T1725)
(declare-fun slen (T1725) Int)
(declare-fun s () Int)
(declare-fun _lbv1 () Int)
(declare-fun |3| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv0 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv5 () Int)
(declare-fun _lbv6 () Int)
(declare-fun _lbv7 () Int)
(declare-fun _lbv8 () Int)
(assert (forall ((bv0 Bool)) (= (set43 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set43 bv0))))
(assert (= (slen nil) 0))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv5))
(assert (> s _lbv6))
(assert (> s _lbv7))
(assert (= _lbv8 (- s 1)))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (not true))

 
 Enumerating a Scalar Term _lbv1
 
 Type of the Scalar Term {v:Ty_int | 
 	 Conj <c 
 Disj <d  v > s
 	,   v = s>d 
 	 , Negation v > 3 >c }                                                                                                                                                                                          
solver 
 (declare-sort T1767)
(declare-fun set44 (Bool) Bool)
(declare-fun slist (T1767 Bool) Bool)
(declare-fun nil () T1767)
(declare-fun slen (T1767) Int)
(declare-fun x0 () Int)
(declare-fun _lbv0 () Int)
(declare-fun |3| () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv5 () Int)
(declare-fun s () Int)
(declare-fun _lbv6 () Int)
(declare-fun _lbv7 () Int)
(declare-fun _lbv8 () Int)
(assert (forall ((bv0 Bool)) (= (set44 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set44 bv0))))
(assert (= (slen nil) 0))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv5))
(assert (> s _lbv6))
(assert (> s _lbv7))
(assert (= _lbv8 (- s 1)))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (not true))

 
 Enumerating a Scalar Term _lbv0
 
 Type of the Scalar Term {v:Ty_int | 
 	 Conj <c 
 Disj <d  v > x0
 	,   v = x0>d 
 	 , Negation v > 3 >c }                                                                                                                                                                                          
solver 
 (declare-sort T1809)
(declare-fun set45 (Bool) Bool)
(declare-fun slist (T1809 Bool) Bool)
(declare-fun nil () T1809)
(declare-fun slen (T1809) Int)
(declare-fun s () Int)
(declare-fun _lbv1 () Int)
(declare-fun |3| () Int)
(declare-fun |0| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv5 () Int)
(declare-fun _lbv6 () Int)
(declare-fun _lbv7 () Int)
(declare-fun _lbv8 () Int)
(assert (forall ((bv0 Bool)) (= (set45 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set45 bv0))))
(assert (= (slen nil) 0))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv5))
(assert (> s _lbv6))
(assert (> s _lbv7))
(assert (= _lbv8 (- s 1)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (not true))

 
 Enumerating a Scalar Term _lbv5
 
 Type of the Scalar Term {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c }
 ################################################
 Skipping Variable _lbv5 As Outer Function Call is subs
 
 Enumerating a Scalar Term _lbv6
 
 Type of the Scalar Term {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c }
 ################################################
 Skipping Variable _lbv6 As Outer Function Call is subs
 
 Enumerating a Scalar Term _lbv7
 
 Type of the Scalar Term {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c }
 ################################################
 Skipping Variable _lbv7 As Outer Function Call is subs
 
 Enumerating a Scalar Term _lbv8
 
 Type of the Scalar Term {v:Ty_int | (v) ==((s) -- (1))}
 ################################################
 Skipping Variable _lbv8 As Outer Function Call is subs
 Show :: Found a Few Macthing Scalars 
  Next Trying Arguments of the form f (ei...) 
  Pure Fun Application: esynthesizePureApp 
 Show Potential Functions
  , 
 int_gen, 
 subs
 ############################################################
  Trying Pure Component int_gen
  *************** Trying Arrow Component ************int_gen :  Arrow ( ( n3 : {var_v0:Ty_int | true} ) -> {v:Ty_int | 
 	 Conj <c 
 Disj <d  v > n3
 	,   v = n3>d 
 	 , Negation v > 3 >c }
  *************** Synthesizing Args ei : ti for ************int_gen
 ##################################################################################
  Synthesizing the 1th argument for Function int_gen
  Trying Arguments in Scalars 
 esynthesizeScalar for {var_v0:Ty_int | true}
  Enumeration for 
 spec 
 {var_v0:Ty_int | true}
 
 Enumerating a Scalar Term s
 
 Type of the Scalar Term {v:Ty_int | true}                                                                                                                                                                          
solver 
 (declare-sort T1851)
(declare-fun set46 (Bool) Bool)
(declare-fun slist (T1851 Bool) Bool)
(declare-fun nil () T1851)
(declare-fun slen (T1851) Int)
(declare-fun s () Int)
(declare-fun _lbv1 () Int)
(declare-fun |3| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv0 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv5 () Int)
(declare-fun _lbv6 () Int)
(declare-fun _lbv7 () Int)
(declare-fun _lbv8 () Int)
(assert (forall ((bv0 Bool)) (= (set46 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set46 bv0))))
(assert (= (slen nil) 0))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv5))
(assert (> s _lbv6))
(assert (> s _lbv7))
(assert (= _lbv8 (- s 1)))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (not true))

 
 Enumerating a Scalar Term x0
 
 Type of the Scalar Term {var_v3:Ty_int | true}                                                                                                                                                                          
solver 
 (declare-sort T1893)
(declare-fun set47 (Bool) Bool)
(declare-fun slist (T1893 Bool) Bool)
(declare-fun nil () T1893)
(declare-fun slen (T1893) Int)
(declare-fun s () Int)
(declare-fun _lbv1 () Int)
(declare-fun |3| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv0 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv5 () Int)
(declare-fun _lbv6 () Int)
(declare-fun _lbv7 () Int)
(declare-fun _lbv8 () Int)
(assert (forall ((bv0 Bool)) (= (set47 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set47 bv0))))
(assert (= (slen nil) 0))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv5))
(assert (> s _lbv6))
(assert (> s _lbv7))
(assert (= _lbv8 (- s 1)))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (not true))

 
 Enumerating a Scalar Term _lbv1
 
 Type of the Scalar Term {v:Ty_int | 
 	 Conj <c 
 Disj <d  v > s
 	,   v = s>d 
 	 , Negation v > 3 >c }
 ################################################
 Skipping Variable _lbv1 As Outer Function Call is int_gen
 
 Enumerating a Scalar Term _lbv0
 
 Type of the Scalar Term {v:Ty_int | 
 	 Conj <c 
 Disj <d  v > x0
 	,   v = x0>d 
 	 , Negation v > 3 >c }
 ################################################
 Skipping Variable _lbv0 As Outer Function Call is int_gen
 
 Enumerating a Scalar Term _lbv5
 
 Type of the Scalar Term {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c }                                                                                                                                                                               
solver 
 (declare-sort T1935)
(declare-fun set48 (Bool) Bool)
(declare-fun slist (T1935 Bool) Bool)
(declare-fun nil () T1935)
(declare-fun slen (T1935) Int)
(declare-fun s () Int)
(declare-fun _lbv1 () Int)
(declare-fun |3| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv0 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv6 () Int)
(declare-fun _lbv7 () Int)
(declare-fun _lbv8 () Int)
(declare-fun _lbv5 () Int)
(assert (forall ((bv0 Bool)) (= (set48 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set48 bv0))))
(assert (= (slen nil) 0))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv6))
(assert (> s _lbv7))
(assert (= _lbv8 (- s 1)))
(assert (> s _lbv5))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv5))
(assert (not true))

 
 Enumerating a Scalar Term _lbv6
 
 Type of the Scalar Term {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c }                                                                                                                                                                               
solver 
 (declare-sort T1977)
(declare-fun set49 (Bool) Bool)
(declare-fun slist (T1977 Bool) Bool)
(declare-fun nil () T1977)
(declare-fun slen (T1977) Int)
(declare-fun s () Int)
(declare-fun _lbv1 () Int)
(declare-fun |3| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv0 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv5 () Int)
(declare-fun _lbv7 () Int)
(declare-fun _lbv8 () Int)
(declare-fun _lbv6 () Int)
(assert (forall ((bv0 Bool)) (= (set49 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set49 bv0))))
(assert (= (slen nil) 0))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv5))
(assert (> s _lbv7))
(assert (= _lbv8 (- s 1)))
(assert (> s _lbv6))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv6))
(assert (not true))

 
 Enumerating a Scalar Term _lbv7
 
 Type of the Scalar Term {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c }                                                                                                                                                                               
solver 
 (declare-sort T2019)
(declare-fun set50 (Bool) Bool)
(declare-fun slist (T2019 Bool) Bool)
(declare-fun nil () T2019)
(declare-fun slen (T2019) Int)
(declare-fun s () Int)
(declare-fun _lbv1 () Int)
(declare-fun |3| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv0 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv5 () Int)
(declare-fun _lbv6 () Int)
(declare-fun _lbv8 () Int)
(declare-fun _lbv7 () Int)
(assert (forall ((bv0 Bool)) (= (set50 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set50 bv0))))
(assert (= (slen nil) 0))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv5))
(assert (> s _lbv6))
(assert (= _lbv8 (- s 1)))
(assert (> s _lbv7))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv7))
(assert (not true))

 
 Enumerating a Scalar Term _lbv8
 
 Type of the Scalar Term {v:Ty_int | (v) ==((s) -- (1))}                                                                                                                                                                          
solver 
 (declare-sort T2061)
(declare-fun set51 (Bool) Bool)
(declare-fun slist (T2061 Bool) Bool)
(declare-fun nil () T2061)
(declare-fun slen (T2061) Int)
(declare-fun s () Int)
(declare-fun _lbv1 () Int)
(declare-fun |3| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv0 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv5 () Int)
(declare-fun _lbv6 () Int)
(declare-fun _lbv7 () Int)
(declare-fun _lbv8 () Int)
(assert (forall ((bv0 Bool)) (= (set51 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set51 bv0))))
(assert (= (slen nil) 0))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv5))
(assert (> s _lbv6))
(assert (> s _lbv7))
(assert (= _lbv8 (- s 1)))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (= _lbv8 (- s 1)))
(assert (not true))

 Show :: Found a Few Macthing Scalars 
  Next Trying Arguments of the form f (ei...) 
  Pure Fun Application: esynthesizePureApp 
 ##################################################################################
  *************** Successfully Synthesized Args ei Forall i 
 # of Possible Argument Options for int_gen 6
 Possible Arg Options 
 EI _lbv8
 Possible Arg Options 
 EI _lbv7
 Possible Arg Options 
 EI _lbv6
 Possible Arg Options 
 EI _lbv5
 Possible Arg Options 
 EI x0
 Possible Arg Options 
 EI s
 Apply Single Argument Case : f (ei) Case int_gen
  Case : f (ei) Case int_gen _lbv8
 Finding Already seen tree for apply int_gen  (, _lbv8 )
 Found _lbv9
  Case : f (ei) Case int_gen _lbv7
 Finding Already seen tree for apply int_gen  (, _lbv7 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 let _lbv10 = apply int_gen  (, _lbv7 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  Case : f (ei) Case int_gen _lbv6
 Finding Already seen tree for apply int_gen  (, _lbv6 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 let _lbv11 = apply int_gen  (, _lbv6 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  Case : f (ei) Case int_gen _lbv5
 Finding Already seen tree for apply int_gen  (, _lbv5 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 let _lbv12 = apply int_gen  (, _lbv5 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  Case : f (ei) Case int_gen x0
 Finding Already seen tree for apply int_gen  (, x0 )
 Found _lbv0
  Case : f (ei) Case int_gen s
 Finding Already seen tree for apply int_gen  (, s )
 Found _lbv1
  Sorted Exxpressions
 Non-Expanded _lbv1
 Program apply int_gen  (, s ) 
 Size 2
 Non-Expanded _lbv0
 Program apply int_gen  (, x0 ) 
 Size 2
 Non-Expanded _lbv10
 Program apply int_gen  (, apply subs  (, x0 ) ) 
 Size 3
 Non-Expanded _lbv9
 Program apply int_gen  (, apply subs  (, s ) ) 
 Size 3
 Non-Expanded _lbv12
 Program apply int_gen  (, apply subs  (, apply int_gen  (, x0 ) ) ) 
 Size 4
 Non-Expanded _lbv11
 Program apply int_gen  (, apply subs  (, apply int_gen  (, s ) ) ) 
 Size 4
 Typechecking apply int_gen  (, s )
 Against {var_v3:Ty_int | true}
 Typechecking apply int_gen  (, s )
 Against {var_v3:Ty_int | true}
 Argument s :: {v:Ty_int | true} | true                                                                                                                                                                                                          
solver 
 (declare-sort T2103)
(declare-fun set52 (Bool) Bool)
(declare-fun slist (T2103 Bool) Bool)
(declare-fun nil () T2103)
(declare-fun slen (T2103) Int)
(declare-fun s () Int)
(declare-fun _lbv1 () Int)
(declare-fun |3| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv0 () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv5 () Int)
(declare-fun _lbv6 () Int)
(declare-fun _lbv7 () Int)
(declare-fun _lbv8 () Int)
(declare-fun v () Int)
(assert (forall ((bv0 Bool)) (= (set52 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set52 bv0))))
(assert (= (slen nil) 0))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv5))
(assert (> s _lbv6))
(assert (> s _lbv7))
(assert (= _lbv8 (- s 1)))
(assert (or (> v s) (= v s)))
(assert (= |3| 3))
(assert (not (> v |3|)))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (or (> v s) (= v s)))
(assert (= |3| 3))
(assert (not (> v |3|)))
(assert (not true))

  Show *************** TypeChecking Succsessful {v:Ty_int | 
 	 Conj <c 
 Disj <d  v > s
 	,   v = s>d 
 	 , Negation v > 3 >c }
 Typechecking apply int_gen  (, x0 )
 Against {var_v3:Ty_int | true}
 Typechecking apply int_gen  (, x0 )
 Against {var_v3:Ty_int | true}
 Argument x0 :: {var_v3:Ty_int | true} | true                                                                                                                                                                                                          
solver 
 (declare-sort T2145)
(declare-fun set53 (Bool) Bool)
(declare-fun slist (T2145 Bool) Bool)
(declare-fun nil () T2145)
(declare-fun slen (T2145) Int)
(declare-fun x0 () Int)
(declare-fun _lbv0 () Int)
(declare-fun |3| () Int)
(declare-fun |0| () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv5 () Int)
(declare-fun s () Int)
(declare-fun _lbv6 () Int)
(declare-fun _lbv7 () Int)
(declare-fun _lbv8 () Int)
(declare-fun v () Int)
(assert (forall ((bv0 Bool)) (= (set53 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set53 bv0))))
(assert (= (slen nil) 0))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv5))
(assert (> s _lbv6))
(assert (> s _lbv7))
(assert (= _lbv8 (- s 1)))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> v x0) (= v x0)))
(assert (= |3| 3))
(assert (not (> v |3|)))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (or (> v x0) (= v x0)))
(assert (= |3| 3))
(assert (not (> v |3|)))
(assert (not true))

  Show *************** TypeChecking Succsessful {v:Ty_int | 
 	 Conj <c 
 Disj <d  v > x0
 	,   v = x0>d 
 	 , Negation v > 3 >c }
 Typechecking apply int_gen  (, _lbv7 )
 Against {var_v3:Ty_int | true}
 Typechecking apply int_gen  (, _lbv7 )
 Against {var_v3:Ty_int | true}
 Argument _lbv7 :: {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c } | 
 	 Conj <c true
 	 , s > _lbv7 >c                                                                                                                                                                                                                
solver 
 (declare-sort T2187)
(declare-fun set54 (Bool) Bool)
(declare-fun slist (T2187 Bool) Bool)
(declare-fun nil () T2187)
(declare-fun slen (T2187) Int)
(declare-fun |0| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv5 () Int)
(declare-fun s () Int)
(declare-fun _lbv6 () Int)
(declare-fun _lbv7 () Int)
(declare-fun _lbv8 () Int)
(declare-fun |3| () Int)
(declare-fun v () Int)
(assert (forall ((bv0 Bool)) (= (set54 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set54 bv0))))
(assert (= (slen nil) 0))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv5))
(assert (> s _lbv6))
(assert (> s _lbv7))
(assert (= _lbv8 (- s 1)))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (or (> v _lbv7) (= v _lbv7)))
(assert (= |3| 3))
(assert (not (> v |3|)))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv7))
(assert (or (> v _lbv7) (= v _lbv7)))
(assert (= |3| 3))
(assert (not (> v |3|)))
(assert (not true))

  Show *************** TypeChecking Succsessful {v:Ty_int | 
 	 Conj <c 
 Disj <d  v > _lbv7
 	,   v = _lbv7>d 
 	 , Negation v > 3 >c }
 Typechecking apply int_gen  (, _lbv8 )
 Against {var_v3:Ty_int | true}
 Typechecking apply int_gen  (, _lbv8 )
 Against {var_v3:Ty_int | true}
 Argument _lbv8 :: {v:Ty_int | (v) ==((s) -- (1))} | (_lbv8) ==((s) -- (1))                                                                                                                                                                                                                          
solver 
 (declare-sort T2229)
(declare-fun set55 (Bool) Bool)
(declare-fun slist (T2229 Bool) Bool)
(declare-fun nil () T2229)
(declare-fun slen (T2229) Int)
(declare-fun |0| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv5 () Int)
(declare-fun s () Int)
(declare-fun _lbv6 () Int)
(declare-fun _lbv7 () Int)
(declare-fun _lbv8 () Int)
(declare-fun |3| () Int)
(declare-fun _lbv10 () Int)
(declare-fun v () Int)
(assert (forall ((bv0 Bool)) (= (set55 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set55 bv0))))
(assert (= (slen nil) 0))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv5))
(assert (> s _lbv6))
(assert (> s _lbv7))
(assert (= _lbv8 (- s 1)))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (or (> _lbv10 _lbv7) (= _lbv10 _lbv7)))
(assert (= |3| 3))
(assert (not (> _lbv10 |3|)))
(assert (or (> v _lbv8) (= v _lbv8)))
(assert (= |3| 3))
(assert (not (> v |3|)))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (= _lbv8 (- s 1)))
(assert (or (> v _lbv8) (= v _lbv8)))
(assert (= |3| 3))
(assert (not (> v |3|)))
(assert (not true))

  Show *************** TypeChecking Succsessful {v:Ty_int | 
 	 Conj <c 
 Disj <d  v > _lbv8
 	,   v = _lbv8>d 
 	 , Negation v > 3 >c }
 Typechecking apply int_gen  (, _lbv5 )
 Against {var_v3:Ty_int | true}
 Typechecking apply int_gen  (, _lbv5 )
 Against {var_v3:Ty_int | true}
 Argument _lbv5 :: {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c } | 
 	 Conj <c true
 	 , s > _lbv5 >c                                                                                                                                                                                                                                                
solver 
 (declare-sort T2271)
(declare-fun set56 (Bool) Bool)
(declare-fun slist (T2271 Bool) Bool)
(declare-fun nil () T2271)
(declare-fun slen (T2271) Int)
(declare-fun |0| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv5 () Int)
(declare-fun s () Int)
(declare-fun _lbv6 () Int)
(declare-fun _lbv7 () Int)
(declare-fun _lbv8 () Int)
(declare-fun |3| () Int)
(declare-fun _lbv10 () Int)
(declare-fun _lbv9 () Int)
(declare-fun v () Int)
(assert (forall ((bv0 Bool)) (= (set56 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set56 bv0))))
(assert (= (slen nil) 0))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv5))
(assert (> s _lbv6))
(assert (> s _lbv7))
(assert (= _lbv8 (- s 1)))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (or (> _lbv10 _lbv7) (= _lbv10 _lbv7)))
(assert (= |3| 3))
(assert (not (> _lbv10 |3|)))
(assert (or (> _lbv9 _lbv8) (= _lbv9 _lbv8)))
(assert (= |3| 3))
(assert (not (> _lbv9 |3|)))
(assert (or (> v _lbv5) (= v _lbv5)))
(assert (= |3| 3))
(assert (not (> v |3|)))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv5))
(assert (or (> v _lbv5) (= v _lbv5)))
(assert (= |3| 3))
(assert (not (> v |3|)))
(assert (not true))

  Show *************** TypeChecking Succsessful {v:Ty_int | 
 	 Conj <c 
 Disj <d  v > _lbv5
 	,   v = _lbv5>d 
 	 , Negation v > 3 >c }
 Typechecking apply int_gen  (, _lbv6 )
 Against {var_v3:Ty_int | true}
 Typechecking apply int_gen  (, _lbv6 )
 Against {var_v3:Ty_int | true}
 Argument _lbv6 :: {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c } | 
 	 Conj <c true
 	 , s > _lbv6 >c                                                                                                                                                                                                                                                                
solver 
 (declare-sort T2313)
(declare-fun set57 (Bool) Bool)
(declare-fun slist (T2313 Bool) Bool)
(declare-fun nil () T2313)
(declare-fun slen (T2313) Int)
(declare-fun |0| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv5 () Int)
(declare-fun s () Int)
(declare-fun _lbv6 () Int)
(declare-fun _lbv7 () Int)
(declare-fun _lbv8 () Int)
(declare-fun |3| () Int)
(declare-fun _lbv10 () Int)
(declare-fun _lbv9 () Int)
(declare-fun _lbv12 () Int)
(declare-fun v () Int)
(assert (forall ((bv0 Bool)) (= (set57 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set57 bv0))))
(assert (= (slen nil) 0))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv5))
(assert (> s _lbv6))
(assert (> s _lbv7))
(assert (= _lbv8 (- s 1)))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (or (> _lbv10 _lbv7) (= _lbv10 _lbv7)))
(assert (= |3| 3))
(assert (not (> _lbv10 |3|)))
(assert (or (> _lbv9 _lbv8) (= _lbv9 _lbv8)))
(assert (= |3| 3))
(assert (not (> _lbv9 |3|)))
(assert (or (> _lbv12 _lbv5) (= _lbv12 _lbv5)))
(assert (= |3| 3))
(assert (not (> _lbv12 |3|)))
(assert (or (> v _lbv6) (= v _lbv6)))
(assert (= |3| 3))
(assert (not (> v |3|)))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv6))
(assert (or (> v _lbv6) (= v _lbv6)))
(assert (= |3| 3))
(assert (not (> v |3|)))
(assert (not true))

  Show *************** TypeChecking Succsessful {v:Ty_int | 
 	 Conj <c 
 Disj <d  v > _lbv6
 	,   v = _lbv6>d 
 	 , Negation v > 3 >c }
 ##################################################################################
  *************** Successfully Synthesized Args ei Forall i 
 # of Possible Argument Options for goal 20
 Possible Arg Options 
 EI _lbv8
 EI _lbv0
 Possible Arg Options 
 EI _lbv8
 EI _lbv1
 Possible Arg Options 
 EI _lbv8
 EI x0
 Possible Arg Options 
 EI _lbv8
 EI s
 Possible Arg Options 
 EI _lbv8
 EI _lbv11
 Possible Arg Options 
 EI _lbv8
 EI _lbv12
 Possible Arg Options 
 EI _lbv8
 EI _lbv9
 Possible Arg Options 
 EI _lbv8
 EI _lbv10
 Possible Arg Options 
 EI _lbv8
 EI _lbv0
 Possible Arg Options 
 EI _lbv8
 EI _lbv1
 Possible Arg Options 
 EI _lbv8
 EI _lbv0
 Possible Arg Options 
 EI _lbv8
 EI _lbv1
 Possible Arg Options 
 EI _lbv8
 EI x0
 Possible Arg Options 
 EI _lbv8
 EI s
 Possible Arg Options 
 EI _lbv8
 EI _lbv11
 Possible Arg Options 
 EI _lbv8
 EI _lbv12
 Possible Arg Options 
 EI _lbv8
 EI _lbv9
 Possible Arg Options 
 EI _lbv8
 EI _lbv10
 Possible Arg Options 
 EI _lbv8
 EI _lbv0
 Possible Arg Options 
 EI _lbv8
 EI _lbv1
 Show f (ei, e2, ....en) Case
 Finding Already seen tree for apply goal  (, _lbv8 ), _lbv0 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 let _lbv13 = apply goal  (, _lbv8 ), _lbv0 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 Finding Already seen tree for apply goal  (, _lbv8 ), _lbv1 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 let _lbv14 = apply goal  (, _lbv8 ), _lbv1 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 Finding Already seen tree for apply goal  (, _lbv8 ), x0 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 let _lbv15 = apply goal  (, _lbv8 ), x0 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 Finding Already seen tree for apply goal  (, _lbv8 ), s )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 let _lbv16 = apply goal  (, _lbv8 ), s )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 Finding Already seen tree for apply goal  (, _lbv8 ), _lbv11 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 let _lbv17 = apply goal  (, _lbv8 ), _lbv11 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 Finding Already seen tree for apply goal  (, _lbv8 ), _lbv12 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 let _lbv18 = apply goal  (, _lbv8 ), _lbv12 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 Finding Already seen tree for apply goal  (, _lbv8 ), _lbv9 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 let _lbv19 = apply goal  (, _lbv8 ), _lbv9 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 Finding Already seen tree for apply goal  (, _lbv8 ), _lbv10 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 let _lbv20 = apply goal  (, _lbv8 ), _lbv10 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 Finding Already seen tree for apply goal  (, _lbv8 ), _lbv0 )
 Found _lbv13
 Finding Already seen tree for apply goal  (, _lbv8 ), _lbv1 )
 Found _lbv14
 Finding Already seen tree for apply goal  (, _lbv8 ), _lbv0 )
 Found _lbv13
 Finding Already seen tree for apply goal  (, _lbv8 ), _lbv1 )
 Found _lbv14
 Finding Already seen tree for apply goal  (, _lbv8 ), x0 )
 Found _lbv15
 Finding Already seen tree for apply goal  (, _lbv8 ), s )
 Found _lbv16
 Finding Already seen tree for apply goal  (, _lbv8 ), _lbv11 )
 Found _lbv17
 Finding Already seen tree for apply goal  (, _lbv8 ), _lbv12 )
 Found _lbv18
 Finding Already seen tree for apply goal  (, _lbv8 ), _lbv9 )
 Found _lbv19
 Finding Already seen tree for apply goal  (, _lbv8 ), _lbv10 )
 Found _lbv20
 Finding Already seen tree for apply goal  (, _lbv8 ), _lbv0 )
 Found _lbv13
 Finding Already seen tree for apply goal  (, _lbv8 ), _lbv1 )
 Found _lbv14
  Sorted Exxpressions
 Non-Expanded _lbv16
 Program apply goal  (, apply subs  (, s ) ), s ) 
 Size 4
 Non-Expanded _lbv15
 Program apply goal  (, apply subs  (, s ) ), x0 ) 
 Size 4
 Non-Expanded _lbv16
 Program apply goal  (, apply subs  (, s ) ), s ) 
 Size 4
 Non-Expanded _lbv15
 Program apply goal  (, apply subs  (, s ) ), x0 ) 
 Size 4
 Typechecking apply goal  (, _lbv8 ), s )
 Against {v:Ty_alphalist | 
 	 Conj <c (slist)(v) = (true)
 	 , 
 	 Conj <c (slen)(v) ==(s)
 	 , 
 	 Impl < (slen)(v) > (0)
 	 
 Disj <d  (shd)(v) > (x0)
 	,   (shd)(v) ==(x0)>d  > >c  >c }
 Typechecking apply goal  (, _lbv8 ), s )
 Against {v:Ty_alphalist | 
 	 Conj <c (slist)(v) = (true)
 	 , 
 	 Conj <c (slen)(v) ==(s)
 	 , 
 	 Impl < (slen)(v) > (0)
 	 
 Disj <d  (shd)(v) > (x0)
 	,   (shd)(v) ==(x0)>d  > >c  >c }
 Argument _lbv8 :: {v:Ty_int | (v) ==((s) -- (1))} | (_lbv8) ==((s) -- (1))
 Argument s :: {v:Ty_int | true} | true                                                                                                                                                                                                                                                                
solver 
 (declare-sort T2355)
(declare-fun set58 (Bool) Bool)
(declare-fun slist (T2355 Bool) Bool)
(declare-fun nil () T2355)
(declare-fun slen (T2355) Int)
(declare-fun |0| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv5 () Int)
(declare-fun s () Int)
(declare-fun _lbv6 () Int)
(declare-fun _lbv7 () Int)
(declare-fun _lbv8 () Int)
(declare-fun |3| () Int)
(declare-fun _lbv10 () Int)
(declare-fun _lbv9 () Int)
(declare-fun _lbv12 () Int)
(declare-fun _lbv11 () Int)
(declare-fun set59 (Bool) Bool)
(declare-fun _lbv13 () T2355)
(declare-fun shd (T2355) Int)
(declare-fun set60 (Bool) Bool)
(declare-fun _lbv14 () T2355)
(declare-fun set61 (Bool) Bool)
(declare-fun _lbv15 () T2355)
(declare-fun set62 (Bool) Bool)
(declare-fun _lbv16 () T2355)
(declare-fun set63 (Bool) Bool)
(declare-fun _lbv17 () T2355)
(declare-fun set64 (Bool) Bool)
(declare-fun _lbv18 () T2355)
(declare-fun set65 (Bool) Bool)
(declare-fun _lbv19 () T2355)
(declare-fun set66 (Bool) Bool)
(declare-fun _lbv20 () T2355)
(declare-fun set67 (Bool) Bool)
(declare-fun v () T2355)
(declare-fun set68 (Bool) Bool)
(declare-fun set69 (Bool) Bool)
(assert (forall ((bv0 Bool)) (= (set58 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set58 bv0))))
(assert (= (slen nil) 0))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv5))
(assert (> s _lbv6))
(assert (> s _lbv7))
(assert (= _lbv8 (- s 1)))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (or (> _lbv10 _lbv7) (= _lbv10 _lbv7)))
(assert (= |3| 3))
(assert (not (> _lbv10 |3|)))
(assert (or (> _lbv9 _lbv8) (= _lbv9 _lbv8)))
(assert (= |3| 3))
(assert (not (> _lbv9 |3|)))
(assert (or (> _lbv12 _lbv5) (= _lbv12 _lbv5)))
(assert (= |3| 3))
(assert (not (> _lbv12 |3|)))
(assert (or (> _lbv11 _lbv6) (= _lbv11 _lbv6)))
(assert (= |3| 3))
(assert (not (> _lbv11 |3|)))
(assert (forall ((bv0 Bool)) (= (set59 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv13 bv0) (set59 bv0))))
(assert (= (slen _lbv13) s))
(assert (=> (> (slen _lbv13) 0) (or (> (shd _lbv13) x0) (= (shd _lbv13) x0))))
(assert (forall ((bv0 Bool)) (= (set60 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv14 bv0) (set60 bv0))))
(assert (= (slen _lbv14) s))
(assert (=> (> (slen _lbv14) 0) (or (> (shd _lbv14) x0) (= (shd _lbv14) x0))))
(assert (forall ((bv0 Bool)) (= (set61 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv15 bv0) (set61 bv0))))
(assert (= (slen _lbv15) s))
(assert (=> (> (slen _lbv15) 0) (or (> (shd _lbv15) x0) (= (shd _lbv15) x0))))
(assert (forall ((bv0 Bool)) (= (set62 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv16 bv0) (set62 bv0))))
(assert (= (slen _lbv16) s))
(assert (=> (> (slen _lbv16) 0) (or (> (shd _lbv16) x0) (= (shd _lbv16) x0))))
(assert (forall ((bv0 Bool)) (= (set63 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv17 bv0) (set63 bv0))))
(assert (= (slen _lbv17) s))
(assert (=> (> (slen _lbv17) 0) (or (> (shd _lbv17) x0) (= (shd _lbv17) x0))))
(assert (forall ((bv0 Bool)) (= (set64 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv18 bv0) (set64 bv0))))
(assert (= (slen _lbv18) s))
(assert (=> (> (slen _lbv18) 0) (or (> (shd _lbv18) x0) (= (shd _lbv18) x0))))
(assert (forall ((bv0 Bool)) (= (set65 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv19 bv0) (set65 bv0))))
(assert (= (slen _lbv19) s))
(assert (=> (> (slen _lbv19) 0) (or (> (shd _lbv19) x0) (= (shd _lbv19) x0))))
(assert (forall ((bv0 Bool)) (= (set66 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv20 bv0) (set66 bv0))))
(assert (= (slen _lbv20) s))
(assert (=> (> (slen _lbv20) 0) (or (> (shd _lbv20) x0) (= (shd _lbv20) x0))))
(assert (forall ((bv0 Bool)) (= (set67 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist v bv0) (set67 bv0))))
(assert (= (slen v) _lbv8))
(assert (=> (> (slen v) 0) (or (> (shd v) s) (= (shd v) s))))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (= _lbv8 (- s 1)))
(assert (forall ((bv0 Bool)) (= (set68 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist v bv0) (set68 bv0))))
(assert (= (slen v) _lbv8))
(assert (=> (> (slen v) 0) (or (> (shd v) s) (= (shd v) s))))
(assert (forall ((bv0 Bool)) (= (set69 bv0) (and (= bv0 true)))))
(assert (let ((a!1 (=> (> (slen v) 0) (or (> (shd v) x0) (= (shd v) x0)))))
(let ((a!2 (and (forall ((bv0 Bool)) (= (slist v bv0) (set69 bv0)))
                (= (slen v) s)
                a!1)))
  (not a!2))))

 Typechecking apply goal  (, _lbv8 ), x0 )
 Against {v:Ty_alphalist | 
 	 Conj <c (slist)(v) = (true)
 	 , 
 	 Conj <c (slen)(v) ==(s)
 	 , 
 	 Impl < (slen)(v) > (0)
 	 
 Disj <d  (shd)(v) > (x0)
 	,   (shd)(v) ==(x0)>d  > >c  >c }
 Typechecking apply goal  (, _lbv8 ), x0 )
 Against {v:Ty_alphalist | 
 	 Conj <c (slist)(v) = (true)
 	 , 
 	 Conj <c (slen)(v) ==(s)
 	 , 
 	 Impl < (slen)(v) > (0)
 	 
 Disj <d  (shd)(v) > (x0)
 	,   (shd)(v) ==(x0)>d  > >c  >c }
 Argument _lbv8 :: {v:Ty_int | (v) ==((s) -- (1))} | (_lbv8) ==((s) -- (1))
 Argument x0 :: {var_v3:Ty_int | true} | true                                                                                                                                                                                                                                                                
solver 
 (declare-sort T2397)
(declare-fun set70 (Bool) Bool)
(declare-fun slist (T2397 Bool) Bool)
(declare-fun nil () T2397)
(declare-fun slen (T2397) Int)
(declare-fun |0| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv5 () Int)
(declare-fun s () Int)
(declare-fun _lbv6 () Int)
(declare-fun _lbv7 () Int)
(declare-fun _lbv8 () Int)
(declare-fun |3| () Int)
(declare-fun _lbv10 () Int)
(declare-fun _lbv9 () Int)
(declare-fun _lbv12 () Int)
(declare-fun _lbv11 () Int)
(declare-fun set71 (Bool) Bool)
(declare-fun _lbv13 () T2397)
(declare-fun shd (T2397) Int)
(declare-fun set72 (Bool) Bool)
(declare-fun _lbv14 () T2397)
(declare-fun set73 (Bool) Bool)
(declare-fun _lbv15 () T2397)
(declare-fun set74 (Bool) Bool)
(declare-fun _lbv16 () T2397)
(declare-fun set75 (Bool) Bool)
(declare-fun _lbv17 () T2397)
(declare-fun set76 (Bool) Bool)
(declare-fun _lbv18 () T2397)
(declare-fun set77 (Bool) Bool)
(declare-fun _lbv19 () T2397)
(declare-fun set78 (Bool) Bool)
(declare-fun _lbv20 () T2397)
(declare-fun set79 (Bool) Bool)
(declare-fun v () T2397)
(declare-fun set80 (Bool) Bool)
(declare-fun set81 (Bool) Bool)
(assert (forall ((bv0 Bool)) (= (set70 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set70 bv0))))
(assert (= (slen nil) 0))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv5))
(assert (> s _lbv6))
(assert (> s _lbv7))
(assert (= _lbv8 (- s 1)))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (or (> _lbv10 _lbv7) (= _lbv10 _lbv7)))
(assert (= |3| 3))
(assert (not (> _lbv10 |3|)))
(assert (or (> _lbv9 _lbv8) (= _lbv9 _lbv8)))
(assert (= |3| 3))
(assert (not (> _lbv9 |3|)))
(assert (or (> _lbv12 _lbv5) (= _lbv12 _lbv5)))
(assert (= |3| 3))
(assert (not (> _lbv12 |3|)))
(assert (or (> _lbv11 _lbv6) (= _lbv11 _lbv6)))
(assert (= |3| 3))
(assert (not (> _lbv11 |3|)))
(assert (forall ((bv0 Bool)) (= (set71 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv13 bv0) (set71 bv0))))
(assert (= (slen _lbv13) s))
(assert (=> (> (slen _lbv13) 0) (or (> (shd _lbv13) x0) (= (shd _lbv13) x0))))
(assert (forall ((bv0 Bool)) (= (set72 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv14 bv0) (set72 bv0))))
(assert (= (slen _lbv14) s))
(assert (=> (> (slen _lbv14) 0) (or (> (shd _lbv14) x0) (= (shd _lbv14) x0))))
(assert (forall ((bv0 Bool)) (= (set73 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv15 bv0) (set73 bv0))))
(assert (= (slen _lbv15) s))
(assert (=> (> (slen _lbv15) 0) (or (> (shd _lbv15) x0) (= (shd _lbv15) x0))))
(assert (forall ((bv0 Bool)) (= (set74 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv16 bv0) (set74 bv0))))
(assert (= (slen _lbv16) s))
(assert (=> (> (slen _lbv16) 0) (or (> (shd _lbv16) x0) (= (shd _lbv16) x0))))
(assert (forall ((bv0 Bool)) (= (set75 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv17 bv0) (set75 bv0))))
(assert (= (slen _lbv17) s))
(assert (=> (> (slen _lbv17) 0) (or (> (shd _lbv17) x0) (= (shd _lbv17) x0))))
(assert (forall ((bv0 Bool)) (= (set76 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv18 bv0) (set76 bv0))))
(assert (= (slen _lbv18) s))
(assert (=> (> (slen _lbv18) 0) (or (> (shd _lbv18) x0) (= (shd _lbv18) x0))))
(assert (forall ((bv0 Bool)) (= (set77 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv19 bv0) (set77 bv0))))
(assert (= (slen _lbv19) s))
(assert (=> (> (slen _lbv19) 0) (or (> (shd _lbv19) x0) (= (shd _lbv19) x0))))
(assert (forall ((bv0 Bool)) (= (set78 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv20 bv0) (set78 bv0))))
(assert (= (slen _lbv20) s))
(assert (=> (> (slen _lbv20) 0) (or (> (shd _lbv20) x0) (= (shd _lbv20) x0))))
(assert (forall ((bv0 Bool)) (= (set79 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist v bv0) (set79 bv0))))
(assert (= (slen v) _lbv8))
(assert (=> (> (slen v) 0) (or (> (shd v) x0) (= (shd v) x0))))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (= _lbv8 (- s 1)))
(assert (forall ((bv0 Bool)) (= (set80 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist v bv0) (set80 bv0))))
(assert (= (slen v) _lbv8))
(assert (=> (> (slen v) 0) (or (> (shd v) x0) (= (shd v) x0))))
(assert (forall ((bv0 Bool)) (= (set81 bv0) (and (= bv0 true)))))
(assert (let ((a!1 (=> (> (slen v) 0) (or (> (shd v) x0) (= (shd v) x0)))))
(let ((a!2 (and (forall ((bv0 Bool)) (= (slist v bv0) (set81 bv0)))
                (= (slen v) s)
                a!1)))
  (not a!2))))

 Typechecking apply goal  (, _lbv8 ), s )
 Against {v:Ty_alphalist | 
 	 Conj <c (slist)(v) = (true)
 	 , 
 	 Conj <c (slen)(v) ==(s)
 	 , 
 	 Impl < (slen)(v) > (0)
 	 
 Disj <d  (shd)(v) > (x0)
 	,   (shd)(v) ==(x0)>d  > >c  >c }
 Typechecking apply goal  (, _lbv8 ), s )
 Against {v:Ty_alphalist | 
 	 Conj <c (slist)(v) = (true)
 	 , 
 	 Conj <c (slen)(v) ==(s)
 	 , 
 	 Impl < (slen)(v) > (0)
 	 
 Disj <d  (shd)(v) > (x0)
 	,   (shd)(v) ==(x0)>d  > >c  >c }
 Argument _lbv8 :: {v:Ty_int | (v) ==((s) -- (1))} | (_lbv8) ==((s) -- (1))
 Argument s :: {v:Ty_int | true} | true                                                                                                                                                                                                                                                                
solver 
 (declare-sort T2439)
(declare-fun set82 (Bool) Bool)
(declare-fun slist (T2439 Bool) Bool)
(declare-fun nil () T2439)
(declare-fun slen (T2439) Int)
(declare-fun |0| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv5 () Int)
(declare-fun s () Int)
(declare-fun _lbv6 () Int)
(declare-fun _lbv7 () Int)
(declare-fun _lbv8 () Int)
(declare-fun |3| () Int)
(declare-fun _lbv10 () Int)
(declare-fun _lbv9 () Int)
(declare-fun _lbv12 () Int)
(declare-fun _lbv11 () Int)
(declare-fun set83 (Bool) Bool)
(declare-fun _lbv13 () T2439)
(declare-fun shd (T2439) Int)
(declare-fun set84 (Bool) Bool)
(declare-fun _lbv14 () T2439)
(declare-fun set85 (Bool) Bool)
(declare-fun _lbv15 () T2439)
(declare-fun set86 (Bool) Bool)
(declare-fun _lbv16 () T2439)
(declare-fun set87 (Bool) Bool)
(declare-fun _lbv17 () T2439)
(declare-fun set88 (Bool) Bool)
(declare-fun _lbv18 () T2439)
(declare-fun set89 (Bool) Bool)
(declare-fun _lbv19 () T2439)
(declare-fun set90 (Bool) Bool)
(declare-fun _lbv20 () T2439)
(declare-fun set91 (Bool) Bool)
(declare-fun v () T2439)
(declare-fun set92 (Bool) Bool)
(declare-fun set93 (Bool) Bool)
(assert (forall ((bv0 Bool)) (= (set82 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set82 bv0))))
(assert (= (slen nil) 0))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv5))
(assert (> s _lbv6))
(assert (> s _lbv7))
(assert (= _lbv8 (- s 1)))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (or (> _lbv10 _lbv7) (= _lbv10 _lbv7)))
(assert (= |3| 3))
(assert (not (> _lbv10 |3|)))
(assert (or (> _lbv9 _lbv8) (= _lbv9 _lbv8)))
(assert (= |3| 3))
(assert (not (> _lbv9 |3|)))
(assert (or (> _lbv12 _lbv5) (= _lbv12 _lbv5)))
(assert (= |3| 3))
(assert (not (> _lbv12 |3|)))
(assert (or (> _lbv11 _lbv6) (= _lbv11 _lbv6)))
(assert (= |3| 3))
(assert (not (> _lbv11 |3|)))
(assert (forall ((bv0 Bool)) (= (set83 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv13 bv0) (set83 bv0))))
(assert (= (slen _lbv13) s))
(assert (=> (> (slen _lbv13) 0) (or (> (shd _lbv13) x0) (= (shd _lbv13) x0))))
(assert (forall ((bv0 Bool)) (= (set84 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv14 bv0) (set84 bv0))))
(assert (= (slen _lbv14) s))
(assert (=> (> (slen _lbv14) 0) (or (> (shd _lbv14) x0) (= (shd _lbv14) x0))))
(assert (forall ((bv0 Bool)) (= (set85 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv15 bv0) (set85 bv0))))
(assert (= (slen _lbv15) s))
(assert (=> (> (slen _lbv15) 0) (or (> (shd _lbv15) x0) (= (shd _lbv15) x0))))
(assert (forall ((bv0 Bool)) (= (set86 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv16 bv0) (set86 bv0))))
(assert (= (slen _lbv16) s))
(assert (=> (> (slen _lbv16) 0) (or (> (shd _lbv16) x0) (= (shd _lbv16) x0))))
(assert (forall ((bv0 Bool)) (= (set87 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv17 bv0) (set87 bv0))))
(assert (= (slen _lbv17) s))
(assert (=> (> (slen _lbv17) 0) (or (> (shd _lbv17) x0) (= (shd _lbv17) x0))))
(assert (forall ((bv0 Bool)) (= (set88 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv18 bv0) (set88 bv0))))
(assert (= (slen _lbv18) s))
(assert (=> (> (slen _lbv18) 0) (or (> (shd _lbv18) x0) (= (shd _lbv18) x0))))
(assert (forall ((bv0 Bool)) (= (set89 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv19 bv0) (set89 bv0))))
(assert (= (slen _lbv19) s))
(assert (=> (> (slen _lbv19) 0) (or (> (shd _lbv19) x0) (= (shd _lbv19) x0))))
(assert (forall ((bv0 Bool)) (= (set90 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv20 bv0) (set90 bv0))))
(assert (= (slen _lbv20) s))
(assert (=> (> (slen _lbv20) 0) (or (> (shd _lbv20) x0) (= (shd _lbv20) x0))))
(assert (forall ((bv0 Bool)) (= (set91 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist v bv0) (set91 bv0))))
(assert (= (slen v) _lbv8))
(assert (=> (> (slen v) 0) (or (> (shd v) s) (= (shd v) s))))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (= _lbv8 (- s 1)))
(assert (forall ((bv0 Bool)) (= (set92 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist v bv0) (set92 bv0))))
(assert (= (slen v) _lbv8))
(assert (=> (> (slen v) 0) (or (> (shd v) s) (= (shd v) s))))
(assert (forall ((bv0 Bool)) (= (set93 bv0) (and (= bv0 true)))))
(assert (let ((a!1 (=> (> (slen v) 0) (or (> (shd v) x0) (= (shd v) x0)))))
(let ((a!2 (and (forall ((bv0 Bool)) (= (slist v bv0) (set93 bv0)))
                (= (slen v) s)
                a!1)))
  (not a!2))))

 Typechecking apply goal  (, _lbv8 ), x0 )
 Against {v:Ty_alphalist | 
 	 Conj <c (slist)(v) = (true)
 	 , 
 	 Conj <c (slen)(v) ==(s)
 	 , 
 	 Impl < (slen)(v) > (0)
 	 
 Disj <d  (shd)(v) > (x0)
 	,   (shd)(v) ==(x0)>d  > >c  >c }
 Typechecking apply goal  (, _lbv8 ), x0 )
 Against {v:Ty_alphalist | 
 	 Conj <c (slist)(v) = (true)
 	 , 
 	 Conj <c (slen)(v) ==(s)
 	 , 
 	 Impl < (slen)(v) > (0)
 	 
 Disj <d  (shd)(v) > (x0)
 	,   (shd)(v) ==(x0)>d  > >c  >c }
 Argument _lbv8 :: {v:Ty_int | (v) ==((s) -- (1))} | (_lbv8) ==((s) -- (1))
 Argument x0 :: {var_v3:Ty_int | true} | true                                                                                                                                                                                                                                                                
solver 
 (declare-sort T2481)
(declare-fun set94 (Bool) Bool)
(declare-fun slist (T2481 Bool) Bool)
(declare-fun nil () T2481)
(declare-fun slen (T2481) Int)
(declare-fun |0| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv5 () Int)
(declare-fun s () Int)
(declare-fun _lbv6 () Int)
(declare-fun _lbv7 () Int)
(declare-fun _lbv8 () Int)
(declare-fun |3| () Int)
(declare-fun _lbv10 () Int)
(declare-fun _lbv9 () Int)
(declare-fun _lbv12 () Int)
(declare-fun _lbv11 () Int)
(declare-fun set95 (Bool) Bool)
(declare-fun _lbv13 () T2481)
(declare-fun shd (T2481) Int)
(declare-fun set96 (Bool) Bool)
(declare-fun _lbv14 () T2481)
(declare-fun set97 (Bool) Bool)
(declare-fun _lbv15 () T2481)
(declare-fun set98 (Bool) Bool)
(declare-fun _lbv16 () T2481)
(declare-fun set99 (Bool) Bool)
(declare-fun _lbv17 () T2481)
(declare-fun set100 (Bool) Bool)
(declare-fun _lbv18 () T2481)
(declare-fun set101 (Bool) Bool)
(declare-fun _lbv19 () T2481)
(declare-fun set102 (Bool) Bool)
(declare-fun _lbv20 () T2481)
(declare-fun set103 (Bool) Bool)
(declare-fun v () T2481)
(declare-fun set104 (Bool) Bool)
(declare-fun set105 (Bool) Bool)
(assert (forall ((bv0 Bool)) (= (set94 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set94 bv0))))
(assert (= (slen nil) 0))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv5))
(assert (> s _lbv6))
(assert (> s _lbv7))
(assert (= _lbv8 (- s 1)))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (or (> _lbv10 _lbv7) (= _lbv10 _lbv7)))
(assert (= |3| 3))
(assert (not (> _lbv10 |3|)))
(assert (or (> _lbv9 _lbv8) (= _lbv9 _lbv8)))
(assert (= |3| 3))
(assert (not (> _lbv9 |3|)))
(assert (or (> _lbv12 _lbv5) (= _lbv12 _lbv5)))
(assert (= |3| 3))
(assert (not (> _lbv12 |3|)))
(assert (or (> _lbv11 _lbv6) (= _lbv11 _lbv6)))
(assert (= |3| 3))
(assert (not (> _lbv11 |3|)))
(assert (forall ((bv0 Bool)) (= (set95 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv13 bv0) (set95 bv0))))
(assert (= (slen _lbv13) s))
(assert (=> (> (slen _lbv13) 0) (or (> (shd _lbv13) x0) (= (shd _lbv13) x0))))
(assert (forall ((bv0 Bool)) (= (set96 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv14 bv0) (set96 bv0))))
(assert (= (slen _lbv14) s))
(assert (=> (> (slen _lbv14) 0) (or (> (shd _lbv14) x0) (= (shd _lbv14) x0))))
(assert (forall ((bv0 Bool)) (= (set97 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv15 bv0) (set97 bv0))))
(assert (= (slen _lbv15) s))
(assert (=> (> (slen _lbv15) 0) (or (> (shd _lbv15) x0) (= (shd _lbv15) x0))))
(assert (forall ((bv0 Bool)) (= (set98 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv16 bv0) (set98 bv0))))
(assert (= (slen _lbv16) s))
(assert (=> (> (slen _lbv16) 0) (or (> (shd _lbv16) x0) (= (shd _lbv16) x0))))
(assert (forall ((bv0 Bool)) (= (set99 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv17 bv0) (set99 bv0))))
(assert (= (slen _lbv17) s))
(assert (=> (> (slen _lbv17) 0) (or (> (shd _lbv17) x0) (= (shd _lbv17) x0))))
(assert (forall ((bv0 Bool)) (= (set100 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv18 bv0) (set100 bv0))))
(assert (= (slen _lbv18) s))
(assert (=> (> (slen _lbv18) 0) (or (> (shd _lbv18) x0) (= (shd _lbv18) x0))))
(assert (forall ((bv0 Bool)) (= (set101 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv19 bv0) (set101 bv0))))
(assert (= (slen _lbv19) s))
(assert (=> (> (slen _lbv19) 0) (or (> (shd _lbv19) x0) (= (shd _lbv19) x0))))
(assert (forall ((bv0 Bool)) (= (set102 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv20 bv0) (set102 bv0))))
(assert (= (slen _lbv20) s))
(assert (=> (> (slen _lbv20) 0) (or (> (shd _lbv20) x0) (= (shd _lbv20) x0))))
(assert (forall ((bv0 Bool)) (= (set103 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist v bv0) (set103 bv0))))
(assert (= (slen v) _lbv8))
(assert (=> (> (slen v) 0) (or (> (shd v) x0) (= (shd v) x0))))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (= _lbv8 (- s 1)))
(assert (forall ((bv0 Bool)) (= (set104 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist v bv0) (set104 bv0))))
(assert (= (slen v) _lbv8))
(assert (=> (> (slen v) 0) (or (> (shd v) x0) (= (shd v) x0))))
(assert (forall ((bv0 Bool)) (= (set105 bv0) (and (= bv0 true)))))
(assert (let ((a!1 (=> (> (slen v) 0) (or (> (shd v) x0) (= (shd v) x0)))))
(let ((a!2 (and (forall ((bv0 Bool)) (= (slist v bv0) (set105 bv0)))
                (= (slen v) s)
                a!1)))
  (not a!2))))

  ###################################################
  The Choice of Function goal Was Ill Fated Try Next Choice of function
 ############################################################
  Trying Pure Component cons
  *************** Trying Arrow Component ************cons :  Arrow ( ( x : {var_v2:Ty_int | true} ) ->  Arrow ( ( xs : {v:Ty_alphalist | (slist)(v) = (true)} ) -> {v:Ty_alphalist | 
 	 Impl < 
 Disj <d  (shd)(xs) > (x)
 	,   (shd)(xs) ==(x)>d 
 	 
 	 Conj <c (slist)(v) = (true)
 	 , 
 	 Conj <c (slen)(v) ==((slen)(xs) + (1))
 	 , (shd)(v) ==(x) >c  >c  >}
  *************** Synthesizing Args ei : ti for ************cons
 ##################################################################################
  Synthesizing the 1th argument for Function cons
  Trying Arguments in Scalars 
 esynthesizeScalar for {var_v2:Ty_int | true}
  Enumeration for 
 spec 
 {var_v2:Ty_int | true}
 
 Enumerating a Scalar Term s
 
 Type of the Scalar Term {v:Ty_int | true}                                                                                                                                                                                                                                                          
solver 
 (declare-sort T2523)
(declare-fun set106 (Bool) Bool)
(declare-fun slist (T2523 Bool) Bool)
(declare-fun nil () T2523)
(declare-fun slen (T2523) Int)
(declare-fun |0| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv5 () Int)
(declare-fun s () Int)
(declare-fun _lbv6 () Int)
(declare-fun _lbv7 () Int)
(declare-fun _lbv8 () Int)
(declare-fun |3| () Int)
(declare-fun _lbv10 () Int)
(declare-fun _lbv9 () Int)
(declare-fun _lbv12 () Int)
(declare-fun _lbv11 () Int)
(declare-fun set107 (Bool) Bool)
(declare-fun _lbv13 () T2523)
(declare-fun shd (T2523) Int)
(declare-fun set108 (Bool) Bool)
(declare-fun _lbv14 () T2523)
(declare-fun set109 (Bool) Bool)
(declare-fun _lbv15 () T2523)
(declare-fun set110 (Bool) Bool)
(declare-fun _lbv16 () T2523)
(declare-fun set111 (Bool) Bool)
(declare-fun _lbv17 () T2523)
(declare-fun set112 (Bool) Bool)
(declare-fun _lbv18 () T2523)
(declare-fun set113 (Bool) Bool)
(declare-fun _lbv19 () T2523)
(declare-fun set114 (Bool) Bool)
(declare-fun _lbv20 () T2523)
(assert (forall ((bv0 Bool)) (= (set106 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set106 bv0))))
(assert (= (slen nil) 0))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv5))
(assert (> s _lbv6))
(assert (> s _lbv7))
(assert (= _lbv8 (- s 1)))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (or (> _lbv10 _lbv7) (= _lbv10 _lbv7)))
(assert (= |3| 3))
(assert (not (> _lbv10 |3|)))
(assert (or (> _lbv9 _lbv8) (= _lbv9 _lbv8)))
(assert (= |3| 3))
(assert (not (> _lbv9 |3|)))
(assert (or (> _lbv12 _lbv5) (= _lbv12 _lbv5)))
(assert (= |3| 3))
(assert (not (> _lbv12 |3|)))
(assert (or (> _lbv11 _lbv6) (= _lbv11 _lbv6)))
(assert (= |3| 3))
(assert (not (> _lbv11 |3|)))
(assert (forall ((bv0 Bool)) (= (set107 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv13 bv0) (set107 bv0))))
(assert (= (slen _lbv13) s))
(assert (=> (> (slen _lbv13) 0) (or (> (shd _lbv13) x0) (= (shd _lbv13) x0))))
(assert (forall ((bv0 Bool)) (= (set108 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv14 bv0) (set108 bv0))))
(assert (= (slen _lbv14) s))
(assert (=> (> (slen _lbv14) 0) (or (> (shd _lbv14) x0) (= (shd _lbv14) x0))))
(assert (forall ((bv0 Bool)) (= (set109 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv15 bv0) (set109 bv0))))
(assert (= (slen _lbv15) s))
(assert (=> (> (slen _lbv15) 0) (or (> (shd _lbv15) x0) (= (shd _lbv15) x0))))
(assert (forall ((bv0 Bool)) (= (set110 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv16 bv0) (set110 bv0))))
(assert (= (slen _lbv16) s))
(assert (=> (> (slen _lbv16) 0) (or (> (shd _lbv16) x0) (= (shd _lbv16) x0))))
(assert (forall ((bv0 Bool)) (= (set111 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv17 bv0) (set111 bv0))))
(assert (= (slen _lbv17) s))
(assert (=> (> (slen _lbv17) 0) (or (> (shd _lbv17) x0) (= (shd _lbv17) x0))))
(assert (forall ((bv0 Bool)) (= (set112 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv18 bv0) (set112 bv0))))
(assert (= (slen _lbv18) s))
(assert (=> (> (slen _lbv18) 0) (or (> (shd _lbv18) x0) (= (shd _lbv18) x0))))
(assert (forall ((bv0 Bool)) (= (set113 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv19 bv0) (set113 bv0))))
(assert (= (slen _lbv19) s))
(assert (=> (> (slen _lbv19) 0) (or (> (shd _lbv19) x0) (= (shd _lbv19) x0))))
(assert (forall ((bv0 Bool)) (= (set114 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv20 bv0) (set114 bv0))))
(assert (= (slen _lbv20) s))
(assert (=> (> (slen _lbv20) 0) (or (> (shd _lbv20) x0) (= (shd _lbv20) x0))))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (not true))

 
 Enumerating a Scalar Term x0
 
 Type of the Scalar Term {var_v3:Ty_int | true}                                                                                                                                                                                                                                                          
solver 
 (declare-sort T2565)
(declare-fun set115 (Bool) Bool)
(declare-fun slist (T2565 Bool) Bool)
(declare-fun nil () T2565)
(declare-fun slen (T2565) Int)
(declare-fun |0| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv5 () Int)
(declare-fun s () Int)
(declare-fun _lbv6 () Int)
(declare-fun _lbv7 () Int)
(declare-fun _lbv8 () Int)
(declare-fun |3| () Int)
(declare-fun _lbv10 () Int)
(declare-fun _lbv9 () Int)
(declare-fun _lbv12 () Int)
(declare-fun _lbv11 () Int)
(declare-fun set116 (Bool) Bool)
(declare-fun _lbv13 () T2565)
(declare-fun shd (T2565) Int)
(declare-fun set117 (Bool) Bool)
(declare-fun _lbv14 () T2565)
(declare-fun set118 (Bool) Bool)
(declare-fun _lbv15 () T2565)
(declare-fun set119 (Bool) Bool)
(declare-fun _lbv16 () T2565)
(declare-fun set120 (Bool) Bool)
(declare-fun _lbv17 () T2565)
(declare-fun set121 (Bool) Bool)
(declare-fun _lbv18 () T2565)
(declare-fun set122 (Bool) Bool)
(declare-fun _lbv19 () T2565)
(declare-fun set123 (Bool) Bool)
(declare-fun _lbv20 () T2565)
(assert (forall ((bv0 Bool)) (= (set115 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set115 bv0))))
(assert (= (slen nil) 0))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv5))
(assert (> s _lbv6))
(assert (> s _lbv7))
(assert (= _lbv8 (- s 1)))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (or (> _lbv10 _lbv7) (= _lbv10 _lbv7)))
(assert (= |3| 3))
(assert (not (> _lbv10 |3|)))
(assert (or (> _lbv9 _lbv8) (= _lbv9 _lbv8)))
(assert (= |3| 3))
(assert (not (> _lbv9 |3|)))
(assert (or (> _lbv12 _lbv5) (= _lbv12 _lbv5)))
(assert (= |3| 3))
(assert (not (> _lbv12 |3|)))
(assert (or (> _lbv11 _lbv6) (= _lbv11 _lbv6)))
(assert (= |3| 3))
(assert (not (> _lbv11 |3|)))
(assert (forall ((bv0 Bool)) (= (set116 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv13 bv0) (set116 bv0))))
(assert (= (slen _lbv13) s))
(assert (=> (> (slen _lbv13) 0) (or (> (shd _lbv13) x0) (= (shd _lbv13) x0))))
(assert (forall ((bv0 Bool)) (= (set117 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv14 bv0) (set117 bv0))))
(assert (= (slen _lbv14) s))
(assert (=> (> (slen _lbv14) 0) (or (> (shd _lbv14) x0) (= (shd _lbv14) x0))))
(assert (forall ((bv0 Bool)) (= (set118 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv15 bv0) (set118 bv0))))
(assert (= (slen _lbv15) s))
(assert (=> (> (slen _lbv15) 0) (or (> (shd _lbv15) x0) (= (shd _lbv15) x0))))
(assert (forall ((bv0 Bool)) (= (set119 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv16 bv0) (set119 bv0))))
(assert (= (slen _lbv16) s))
(assert (=> (> (slen _lbv16) 0) (or (> (shd _lbv16) x0) (= (shd _lbv16) x0))))
(assert (forall ((bv0 Bool)) (= (set120 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv17 bv0) (set120 bv0))))
(assert (= (slen _lbv17) s))
(assert (=> (> (slen _lbv17) 0) (or (> (shd _lbv17) x0) (= (shd _lbv17) x0))))
(assert (forall ((bv0 Bool)) (= (set121 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv18 bv0) (set121 bv0))))
(assert (= (slen _lbv18) s))
(assert (=> (> (slen _lbv18) 0) (or (> (shd _lbv18) x0) (= (shd _lbv18) x0))))
(assert (forall ((bv0 Bool)) (= (set122 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv19 bv0) (set122 bv0))))
(assert (= (slen _lbv19) s))
(assert (=> (> (slen _lbv19) 0) (or (> (shd _lbv19) x0) (= (shd _lbv19) x0))))
(assert (forall ((bv0 Bool)) (= (set123 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv20 bv0) (set123 bv0))))
(assert (= (slen _lbv20) s))
(assert (=> (> (slen _lbv20) 0) (or (> (shd _lbv20) x0) (= (shd _lbv20) x0))))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (not true))

 
 Enumerating a Scalar Term _lbv5
 
 Type of the Scalar Term {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c }                                                                                                                                                                                                                                                               
solver 
 (declare-sort T2607)
(declare-fun set124 (Bool) Bool)
(declare-fun slist (T2607 Bool) Bool)
(declare-fun nil () T2607)
(declare-fun slen (T2607) Int)
(declare-fun |0| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv6 () Int)
(declare-fun s () Int)
(declare-fun _lbv7 () Int)
(declare-fun _lbv8 () Int)
(declare-fun |3| () Int)
(declare-fun _lbv10 () Int)
(declare-fun _lbv9 () Int)
(declare-fun _lbv5 () Int)
(declare-fun _lbv12 () Int)
(declare-fun _lbv11 () Int)
(declare-fun set125 (Bool) Bool)
(declare-fun _lbv13 () T2607)
(declare-fun shd (T2607) Int)
(declare-fun set126 (Bool) Bool)
(declare-fun _lbv14 () T2607)
(declare-fun set127 (Bool) Bool)
(declare-fun _lbv15 () T2607)
(declare-fun set128 (Bool) Bool)
(declare-fun _lbv16 () T2607)
(declare-fun set129 (Bool) Bool)
(declare-fun _lbv17 () T2607)
(declare-fun set130 (Bool) Bool)
(declare-fun _lbv18 () T2607)
(declare-fun set131 (Bool) Bool)
(declare-fun _lbv19 () T2607)
(declare-fun set132 (Bool) Bool)
(declare-fun _lbv20 () T2607)
(assert (forall ((bv0 Bool)) (= (set124 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set124 bv0))))
(assert (= (slen nil) 0))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv6))
(assert (> s _lbv7))
(assert (= _lbv8 (- s 1)))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (or (> _lbv10 _lbv7) (= _lbv10 _lbv7)))
(assert (= |3| 3))
(assert (not (> _lbv10 |3|)))
(assert (or (> _lbv9 _lbv8) (= _lbv9 _lbv8)))
(assert (= |3| 3))
(assert (not (> _lbv9 |3|)))
(assert (or (> _lbv12 _lbv5) (= _lbv12 _lbv5)))
(assert (= |3| 3))
(assert (not (> _lbv12 |3|)))
(assert (or (> _lbv11 _lbv6) (= _lbv11 _lbv6)))
(assert (= |3| 3))
(assert (not (> _lbv11 |3|)))
(assert (forall ((bv0 Bool)) (= (set125 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv13 bv0) (set125 bv0))))
(assert (= (slen _lbv13) s))
(assert (=> (> (slen _lbv13) 0) (or (> (shd _lbv13) x0) (= (shd _lbv13) x0))))
(assert (forall ((bv0 Bool)) (= (set126 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv14 bv0) (set126 bv0))))
(assert (= (slen _lbv14) s))
(assert (=> (> (slen _lbv14) 0) (or (> (shd _lbv14) x0) (= (shd _lbv14) x0))))
(assert (forall ((bv0 Bool)) (= (set127 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv15 bv0) (set127 bv0))))
(assert (= (slen _lbv15) s))
(assert (=> (> (slen _lbv15) 0) (or (> (shd _lbv15) x0) (= (shd _lbv15) x0))))
(assert (forall ((bv0 Bool)) (= (set128 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv16 bv0) (set128 bv0))))
(assert (= (slen _lbv16) s))
(assert (=> (> (slen _lbv16) 0) (or (> (shd _lbv16) x0) (= (shd _lbv16) x0))))
(assert (forall ((bv0 Bool)) (= (set129 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv17 bv0) (set129 bv0))))
(assert (= (slen _lbv17) s))
(assert (=> (> (slen _lbv17) 0) (or (> (shd _lbv17) x0) (= (shd _lbv17) x0))))
(assert (forall ((bv0 Bool)) (= (set130 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv18 bv0) (set130 bv0))))
(assert (= (slen _lbv18) s))
(assert (=> (> (slen _lbv18) 0) (or (> (shd _lbv18) x0) (= (shd _lbv18) x0))))
(assert (forall ((bv0 Bool)) (= (set131 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv19 bv0) (set131 bv0))))
(assert (= (slen _lbv19) s))
(assert (=> (> (slen _lbv19) 0) (or (> (shd _lbv19) x0) (= (shd _lbv19) x0))))
(assert (forall ((bv0 Bool)) (= (set132 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv20 bv0) (set132 bv0))))
(assert (= (slen _lbv20) s))
(assert (=> (> (slen _lbv20) 0) (or (> (shd _lbv20) x0) (= (shd _lbv20) x0))))
(assert (> s _lbv5))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv5))
(assert (not true))

 
 Enumerating a Scalar Term _lbv6
 
 Type of the Scalar Term {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c }                                                                                                                                                                                                                                                               
solver 
 (declare-sort T2649)
(declare-fun set133 (Bool) Bool)
(declare-fun slist (T2649 Bool) Bool)
(declare-fun nil () T2649)
(declare-fun slen (T2649) Int)
(declare-fun |0| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv5 () Int)
(declare-fun s () Int)
(declare-fun _lbv7 () Int)
(declare-fun _lbv8 () Int)
(declare-fun |3| () Int)
(declare-fun _lbv10 () Int)
(declare-fun _lbv9 () Int)
(declare-fun _lbv12 () Int)
(declare-fun _lbv6 () Int)
(declare-fun _lbv11 () Int)
(declare-fun set134 (Bool) Bool)
(declare-fun _lbv13 () T2649)
(declare-fun shd (T2649) Int)
(declare-fun set135 (Bool) Bool)
(declare-fun _lbv14 () T2649)
(declare-fun set136 (Bool) Bool)
(declare-fun _lbv15 () T2649)
(declare-fun set137 (Bool) Bool)
(declare-fun _lbv16 () T2649)
(declare-fun set138 (Bool) Bool)
(declare-fun _lbv17 () T2649)
(declare-fun set139 (Bool) Bool)
(declare-fun _lbv18 () T2649)
(declare-fun set140 (Bool) Bool)
(declare-fun _lbv19 () T2649)
(declare-fun set141 (Bool) Bool)
(declare-fun _lbv20 () T2649)
(assert (forall ((bv0 Bool)) (= (set133 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set133 bv0))))
(assert (= (slen nil) 0))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv5))
(assert (> s _lbv7))
(assert (= _lbv8 (- s 1)))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (or (> _lbv10 _lbv7) (= _lbv10 _lbv7)))
(assert (= |3| 3))
(assert (not (> _lbv10 |3|)))
(assert (or (> _lbv9 _lbv8) (= _lbv9 _lbv8)))
(assert (= |3| 3))
(assert (not (> _lbv9 |3|)))
(assert (or (> _lbv12 _lbv5) (= _lbv12 _lbv5)))
(assert (= |3| 3))
(assert (not (> _lbv12 |3|)))
(assert (or (> _lbv11 _lbv6) (= _lbv11 _lbv6)))
(assert (= |3| 3))
(assert (not (> _lbv11 |3|)))
(assert (forall ((bv0 Bool)) (= (set134 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv13 bv0) (set134 bv0))))
(assert (= (slen _lbv13) s))
(assert (=> (> (slen _lbv13) 0) (or (> (shd _lbv13) x0) (= (shd _lbv13) x0))))
(assert (forall ((bv0 Bool)) (= (set135 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv14 bv0) (set135 bv0))))
(assert (= (slen _lbv14) s))
(assert (=> (> (slen _lbv14) 0) (or (> (shd _lbv14) x0) (= (shd _lbv14) x0))))
(assert (forall ((bv0 Bool)) (= (set136 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv15 bv0) (set136 bv0))))
(assert (= (slen _lbv15) s))
(assert (=> (> (slen _lbv15) 0) (or (> (shd _lbv15) x0) (= (shd _lbv15) x0))))
(assert (forall ((bv0 Bool)) (= (set137 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv16 bv0) (set137 bv0))))
(assert (= (slen _lbv16) s))
(assert (=> (> (slen _lbv16) 0) (or (> (shd _lbv16) x0) (= (shd _lbv16) x0))))
(assert (forall ((bv0 Bool)) (= (set138 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv17 bv0) (set138 bv0))))
(assert (= (slen _lbv17) s))
(assert (=> (> (slen _lbv17) 0) (or (> (shd _lbv17) x0) (= (shd _lbv17) x0))))
(assert (forall ((bv0 Bool)) (= (set139 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv18 bv0) (set139 bv0))))
(assert (= (slen _lbv18) s))
(assert (=> (> (slen _lbv18) 0) (or (> (shd _lbv18) x0) (= (shd _lbv18) x0))))
(assert (forall ((bv0 Bool)) (= (set140 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv19 bv0) (set140 bv0))))
(assert (= (slen _lbv19) s))
(assert (=> (> (slen _lbv19) 0) (or (> (shd _lbv19) x0) (= (shd _lbv19) x0))))
(assert (forall ((bv0 Bool)) (= (set141 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv20 bv0) (set141 bv0))))
(assert (= (slen _lbv20) s))
(assert (=> (> (slen _lbv20) 0) (or (> (shd _lbv20) x0) (= (shd _lbv20) x0))))
(assert (> s _lbv6))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv6))
(assert (not true))

 
 Enumerating a Scalar Term _lbv7
 
 Type of the Scalar Term {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c }                                                                                                                                                                                                                                                               
solver 
 (declare-sort T2691)
(declare-fun set142 (Bool) Bool)
(declare-fun slist (T2691 Bool) Bool)
(declare-fun nil () T2691)
(declare-fun slen (T2691) Int)
(declare-fun |0| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv5 () Int)
(declare-fun s () Int)
(declare-fun _lbv6 () Int)
(declare-fun _lbv8 () Int)
(declare-fun |3| () Int)
(declare-fun _lbv7 () Int)
(declare-fun _lbv10 () Int)
(declare-fun _lbv9 () Int)
(declare-fun _lbv12 () Int)
(declare-fun _lbv11 () Int)
(declare-fun set143 (Bool) Bool)
(declare-fun _lbv13 () T2691)
(declare-fun shd (T2691) Int)
(declare-fun set144 (Bool) Bool)
(declare-fun _lbv14 () T2691)
(declare-fun set145 (Bool) Bool)
(declare-fun _lbv15 () T2691)
(declare-fun set146 (Bool) Bool)
(declare-fun _lbv16 () T2691)
(declare-fun set147 (Bool) Bool)
(declare-fun _lbv17 () T2691)
(declare-fun set148 (Bool) Bool)
(declare-fun _lbv18 () T2691)
(declare-fun set149 (Bool) Bool)
(declare-fun _lbv19 () T2691)
(declare-fun set150 (Bool) Bool)
(declare-fun _lbv20 () T2691)
(assert (forall ((bv0 Bool)) (= (set142 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set142 bv0))))
(assert (= (slen nil) 0))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv5))
(assert (> s _lbv6))
(assert (= _lbv8 (- s 1)))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (or (> _lbv10 _lbv7) (= _lbv10 _lbv7)))
(assert (= |3| 3))
(assert (not (> _lbv10 |3|)))
(assert (or (> _lbv9 _lbv8) (= _lbv9 _lbv8)))
(assert (= |3| 3))
(assert (not (> _lbv9 |3|)))
(assert (or (> _lbv12 _lbv5) (= _lbv12 _lbv5)))
(assert (= |3| 3))
(assert (not (> _lbv12 |3|)))
(assert (or (> _lbv11 _lbv6) (= _lbv11 _lbv6)))
(assert (= |3| 3))
(assert (not (> _lbv11 |3|)))
(assert (forall ((bv0 Bool)) (= (set143 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv13 bv0) (set143 bv0))))
(assert (= (slen _lbv13) s))
(assert (=> (> (slen _lbv13) 0) (or (> (shd _lbv13) x0) (= (shd _lbv13) x0))))
(assert (forall ((bv0 Bool)) (= (set144 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv14 bv0) (set144 bv0))))
(assert (= (slen _lbv14) s))
(assert (=> (> (slen _lbv14) 0) (or (> (shd _lbv14) x0) (= (shd _lbv14) x0))))
(assert (forall ((bv0 Bool)) (= (set145 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv15 bv0) (set145 bv0))))
(assert (= (slen _lbv15) s))
(assert (=> (> (slen _lbv15) 0) (or (> (shd _lbv15) x0) (= (shd _lbv15) x0))))
(assert (forall ((bv0 Bool)) (= (set146 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv16 bv0) (set146 bv0))))
(assert (= (slen _lbv16) s))
(assert (=> (> (slen _lbv16) 0) (or (> (shd _lbv16) x0) (= (shd _lbv16) x0))))
(assert (forall ((bv0 Bool)) (= (set147 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv17 bv0) (set147 bv0))))
(assert (= (slen _lbv17) s))
(assert (=> (> (slen _lbv17) 0) (or (> (shd _lbv17) x0) (= (shd _lbv17) x0))))
(assert (forall ((bv0 Bool)) (= (set148 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv18 bv0) (set148 bv0))))
(assert (= (slen _lbv18) s))
(assert (=> (> (slen _lbv18) 0) (or (> (shd _lbv18) x0) (= (shd _lbv18) x0))))
(assert (forall ((bv0 Bool)) (= (set149 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv19 bv0) (set149 bv0))))
(assert (= (slen _lbv19) s))
(assert (=> (> (slen _lbv19) 0) (or (> (shd _lbv19) x0) (= (shd _lbv19) x0))))
(assert (forall ((bv0 Bool)) (= (set150 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv20 bv0) (set150 bv0))))
(assert (= (slen _lbv20) s))
(assert (=> (> (slen _lbv20) 0) (or (> (shd _lbv20) x0) (= (shd _lbv20) x0))))
(assert (> s _lbv7))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv7))
(assert (not true))

 
 Enumerating a Scalar Term _lbv8
 
 Type of the Scalar Term {v:Ty_int | (v) ==((s) -- (1))}                                                                                                                                                                                                                                                          
solver 
 (declare-sort T2733)
(declare-fun set151 (Bool) Bool)
(declare-fun slist (T2733 Bool) Bool)
(declare-fun nil () T2733)
(declare-fun slen (T2733) Int)
(declare-fun |0| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv5 () Int)
(declare-fun s () Int)
(declare-fun _lbv6 () Int)
(declare-fun _lbv7 () Int)
(declare-fun |3| () Int)
(declare-fun _lbv10 () Int)
(declare-fun _lbv8 () Int)
(declare-fun _lbv9 () Int)
(declare-fun _lbv12 () Int)
(declare-fun _lbv11 () Int)
(declare-fun set152 (Bool) Bool)
(declare-fun _lbv13 () T2733)
(declare-fun shd (T2733) Int)
(declare-fun set153 (Bool) Bool)
(declare-fun _lbv14 () T2733)
(declare-fun set154 (Bool) Bool)
(declare-fun _lbv15 () T2733)
(declare-fun set155 (Bool) Bool)
(declare-fun _lbv16 () T2733)
(declare-fun set156 (Bool) Bool)
(declare-fun _lbv17 () T2733)
(declare-fun set157 (Bool) Bool)
(declare-fun _lbv18 () T2733)
(declare-fun set158 (Bool) Bool)
(declare-fun _lbv19 () T2733)
(declare-fun set159 (Bool) Bool)
(declare-fun _lbv20 () T2733)
(assert (forall ((bv0 Bool)) (= (set151 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set151 bv0))))
(assert (= (slen nil) 0))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv5))
(assert (> s _lbv6))
(assert (> s _lbv7))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (or (> _lbv10 _lbv7) (= _lbv10 _lbv7)))
(assert (= |3| 3))
(assert (not (> _lbv10 |3|)))
(assert (or (> _lbv9 _lbv8) (= _lbv9 _lbv8)))
(assert (= |3| 3))
(assert (not (> _lbv9 |3|)))
(assert (or (> _lbv12 _lbv5) (= _lbv12 _lbv5)))
(assert (= |3| 3))
(assert (not (> _lbv12 |3|)))
(assert (or (> _lbv11 _lbv6) (= _lbv11 _lbv6)))
(assert (= |3| 3))
(assert (not (> _lbv11 |3|)))
(assert (forall ((bv0 Bool)) (= (set152 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv13 bv0) (set152 bv0))))
(assert (= (slen _lbv13) s))
(assert (=> (> (slen _lbv13) 0) (or (> (shd _lbv13) x0) (= (shd _lbv13) x0))))
(assert (forall ((bv0 Bool)) (= (set153 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv14 bv0) (set153 bv0))))
(assert (= (slen _lbv14) s))
(assert (=> (> (slen _lbv14) 0) (or (> (shd _lbv14) x0) (= (shd _lbv14) x0))))
(assert (forall ((bv0 Bool)) (= (set154 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv15 bv0) (set154 bv0))))
(assert (= (slen _lbv15) s))
(assert (=> (> (slen _lbv15) 0) (or (> (shd _lbv15) x0) (= (shd _lbv15) x0))))
(assert (forall ((bv0 Bool)) (= (set155 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv16 bv0) (set155 bv0))))
(assert (= (slen _lbv16) s))
(assert (=> (> (slen _lbv16) 0) (or (> (shd _lbv16) x0) (= (shd _lbv16) x0))))
(assert (forall ((bv0 Bool)) (= (set156 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv17 bv0) (set156 bv0))))
(assert (= (slen _lbv17) s))
(assert (=> (> (slen _lbv17) 0) (or (> (shd _lbv17) x0) (= (shd _lbv17) x0))))
(assert (forall ((bv0 Bool)) (= (set157 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv18 bv0) (set157 bv0))))
(assert (= (slen _lbv18) s))
(assert (=> (> (slen _lbv18) 0) (or (> (shd _lbv18) x0) (= (shd _lbv18) x0))))
(assert (forall ((bv0 Bool)) (= (set158 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv19 bv0) (set158 bv0))))
(assert (= (slen _lbv19) s))
(assert (=> (> (slen _lbv19) 0) (or (> (shd _lbv19) x0) (= (shd _lbv19) x0))))
(assert (forall ((bv0 Bool)) (= (set159 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv20 bv0) (set159 bv0))))
(assert (= (slen _lbv20) s))
(assert (=> (> (slen _lbv20) 0) (or (> (shd _lbv20) x0) (= (shd _lbv20) x0))))
(assert (= _lbv8 (- s 1)))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (= _lbv8 (- s 1)))
(assert (not true))

 
 Enumerating a Scalar Term _lbv1
 
 Type of the Scalar Term {v:Ty_int | 
 	 Conj <c 
 Disj <d  v > s
 	,   v = s>d 
 	 , Negation v > 3 >c }                                                                                                                                                                                                                                                                          
solver 
 (declare-sort T2775)
(declare-fun set160 (Bool) Bool)
(declare-fun slist (T2775 Bool) Bool)
(declare-fun nil () T2775)
(declare-fun slen (T2775) Int)
(declare-fun |0| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv5 () Int)
(declare-fun s () Int)
(declare-fun _lbv6 () Int)
(declare-fun _lbv7 () Int)
(declare-fun _lbv8 () Int)
(declare-fun |3| () Int)
(declare-fun _lbv10 () Int)
(declare-fun _lbv9 () Int)
(declare-fun _lbv12 () Int)
(declare-fun _lbv11 () Int)
(declare-fun set161 (Bool) Bool)
(declare-fun _lbv13 () T2775)
(declare-fun shd (T2775) Int)
(declare-fun set162 (Bool) Bool)
(declare-fun _lbv14 () T2775)
(declare-fun set163 (Bool) Bool)
(declare-fun _lbv15 () T2775)
(declare-fun set164 (Bool) Bool)
(declare-fun _lbv16 () T2775)
(declare-fun set165 (Bool) Bool)
(declare-fun _lbv17 () T2775)
(declare-fun set166 (Bool) Bool)
(declare-fun _lbv18 () T2775)
(declare-fun set167 (Bool) Bool)
(declare-fun _lbv19 () T2775)
(declare-fun set168 (Bool) Bool)
(declare-fun _lbv20 () T2775)
(assert (forall ((bv0 Bool)) (= (set160 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set160 bv0))))
(assert (= (slen nil) 0))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv5))
(assert (> s _lbv6))
(assert (> s _lbv7))
(assert (= _lbv8 (- s 1)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (or (> _lbv10 _lbv7) (= _lbv10 _lbv7)))
(assert (= |3| 3))
(assert (not (> _lbv10 |3|)))
(assert (or (> _lbv9 _lbv8) (= _lbv9 _lbv8)))
(assert (= |3| 3))
(assert (not (> _lbv9 |3|)))
(assert (or (> _lbv12 _lbv5) (= _lbv12 _lbv5)))
(assert (= |3| 3))
(assert (not (> _lbv12 |3|)))
(assert (or (> _lbv11 _lbv6) (= _lbv11 _lbv6)))
(assert (= |3| 3))
(assert (not (> _lbv11 |3|)))
(assert (forall ((bv0 Bool)) (= (set161 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv13 bv0) (set161 bv0))))
(assert (= (slen _lbv13) s))
(assert (=> (> (slen _lbv13) 0) (or (> (shd _lbv13) x0) (= (shd _lbv13) x0))))
(assert (forall ((bv0 Bool)) (= (set162 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv14 bv0) (set162 bv0))))
(assert (= (slen _lbv14) s))
(assert (=> (> (slen _lbv14) 0) (or (> (shd _lbv14) x0) (= (shd _lbv14) x0))))
(assert (forall ((bv0 Bool)) (= (set163 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv15 bv0) (set163 bv0))))
(assert (= (slen _lbv15) s))
(assert (=> (> (slen _lbv15) 0) (or (> (shd _lbv15) x0) (= (shd _lbv15) x0))))
(assert (forall ((bv0 Bool)) (= (set164 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv16 bv0) (set164 bv0))))
(assert (= (slen _lbv16) s))
(assert (=> (> (slen _lbv16) 0) (or (> (shd _lbv16) x0) (= (shd _lbv16) x0))))
(assert (forall ((bv0 Bool)) (= (set165 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv17 bv0) (set165 bv0))))
(assert (= (slen _lbv17) s))
(assert (=> (> (slen _lbv17) 0) (or (> (shd _lbv17) x0) (= (shd _lbv17) x0))))
(assert (forall ((bv0 Bool)) (= (set166 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv18 bv0) (set166 bv0))))
(assert (= (slen _lbv18) s))
(assert (=> (> (slen _lbv18) 0) (or (> (shd _lbv18) x0) (= (shd _lbv18) x0))))
(assert (forall ((bv0 Bool)) (= (set167 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv19 bv0) (set167 bv0))))
(assert (= (slen _lbv19) s))
(assert (=> (> (slen _lbv19) 0) (or (> (shd _lbv19) x0) (= (shd _lbv19) x0))))
(assert (forall ((bv0 Bool)) (= (set168 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv20 bv0) (set168 bv0))))
(assert (= (slen _lbv20) s))
(assert (=> (> (slen _lbv20) 0) (or (> (shd _lbv20) x0) (= (shd _lbv20) x0))))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (not true))

 
 Enumerating a Scalar Term _lbv0
 
 Type of the Scalar Term {v:Ty_int | 
 	 Conj <c 
 Disj <d  v > x0
 	,   v = x0>d 
 	 , Negation v > 3 >c }                                                                                                                                                                                                                                                                          
solver 
 (declare-sort T2817)
(declare-fun set169 (Bool) Bool)
(declare-fun slist (T2817 Bool) Bool)
(declare-fun nil () T2817)
(declare-fun slen (T2817) Int)
(declare-fun |0| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv5 () Int)
(declare-fun s () Int)
(declare-fun _lbv6 () Int)
(declare-fun _lbv7 () Int)
(declare-fun _lbv8 () Int)
(declare-fun |3| () Int)
(declare-fun _lbv10 () Int)
(declare-fun _lbv9 () Int)
(declare-fun _lbv12 () Int)
(declare-fun _lbv11 () Int)
(declare-fun set170 (Bool) Bool)
(declare-fun _lbv13 () T2817)
(declare-fun shd (T2817) Int)
(declare-fun set171 (Bool) Bool)
(declare-fun _lbv14 () T2817)
(declare-fun set172 (Bool) Bool)
(declare-fun _lbv15 () T2817)
(declare-fun set173 (Bool) Bool)
(declare-fun _lbv16 () T2817)
(declare-fun set174 (Bool) Bool)
(declare-fun _lbv17 () T2817)
(declare-fun set175 (Bool) Bool)
(declare-fun _lbv18 () T2817)
(declare-fun set176 (Bool) Bool)
(declare-fun _lbv19 () T2817)
(declare-fun set177 (Bool) Bool)
(declare-fun _lbv20 () T2817)
(assert (forall ((bv0 Bool)) (= (set169 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set169 bv0))))
(assert (= (slen nil) 0))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv5))
(assert (> s _lbv6))
(assert (> s _lbv7))
(assert (= _lbv8 (- s 1)))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv10 _lbv7) (= _lbv10 _lbv7)))
(assert (= |3| 3))
(assert (not (> _lbv10 |3|)))
(assert (or (> _lbv9 _lbv8) (= _lbv9 _lbv8)))
(assert (= |3| 3))
(assert (not (> _lbv9 |3|)))
(assert (or (> _lbv12 _lbv5) (= _lbv12 _lbv5)))
(assert (= |3| 3))
(assert (not (> _lbv12 |3|)))
(assert (or (> _lbv11 _lbv6) (= _lbv11 _lbv6)))
(assert (= |3| 3))
(assert (not (> _lbv11 |3|)))
(assert (forall ((bv0 Bool)) (= (set170 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv13 bv0) (set170 bv0))))
(assert (= (slen _lbv13) s))
(assert (=> (> (slen _lbv13) 0) (or (> (shd _lbv13) x0) (= (shd _lbv13) x0))))
(assert (forall ((bv0 Bool)) (= (set171 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv14 bv0) (set171 bv0))))
(assert (= (slen _lbv14) s))
(assert (=> (> (slen _lbv14) 0) (or (> (shd _lbv14) x0) (= (shd _lbv14) x0))))
(assert (forall ((bv0 Bool)) (= (set172 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv15 bv0) (set172 bv0))))
(assert (= (slen _lbv15) s))
(assert (=> (> (slen _lbv15) 0) (or (> (shd _lbv15) x0) (= (shd _lbv15) x0))))
(assert (forall ((bv0 Bool)) (= (set173 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv16 bv0) (set173 bv0))))
(assert (= (slen _lbv16) s))
(assert (=> (> (slen _lbv16) 0) (or (> (shd _lbv16) x0) (= (shd _lbv16) x0))))
(assert (forall ((bv0 Bool)) (= (set174 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv17 bv0) (set174 bv0))))
(assert (= (slen _lbv17) s))
(assert (=> (> (slen _lbv17) 0) (or (> (shd _lbv17) x0) (= (shd _lbv17) x0))))
(assert (forall ((bv0 Bool)) (= (set175 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv18 bv0) (set175 bv0))))
(assert (= (slen _lbv18) s))
(assert (=> (> (slen _lbv18) 0) (or (> (shd _lbv18) x0) (= (shd _lbv18) x0))))
(assert (forall ((bv0 Bool)) (= (set176 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv19 bv0) (set176 bv0))))
(assert (= (slen _lbv19) s))
(assert (=> (> (slen _lbv19) 0) (or (> (shd _lbv19) x0) (= (shd _lbv19) x0))))
(assert (forall ((bv0 Bool)) (= (set177 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv20 bv0) (set177 bv0))))
(assert (= (slen _lbv20) s))
(assert (=> (> (slen _lbv20) 0) (or (> (shd _lbv20) x0) (= (shd _lbv20) x0))))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (not true))

 
 Enumerating a Scalar Term _lbv10
 
 Type of the Scalar Term {v:Ty_int | 
 	 Conj <c 
 Disj <d  v > _lbv7
 	,   v = _lbv7>d 
 	 , Negation v > 3 >c }                                                                                                                                                                                                                                                                          
solver 
 (declare-sort T2859)
(declare-fun set178 (Bool) Bool)
(declare-fun slist (T2859 Bool) Bool)
(declare-fun nil () T2859)
(declare-fun slen (T2859) Int)
(declare-fun |0| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv5 () Int)
(declare-fun s () Int)
(declare-fun _lbv6 () Int)
(declare-fun _lbv7 () Int)
(declare-fun _lbv8 () Int)
(declare-fun |3| () Int)
(declare-fun _lbv9 () Int)
(declare-fun _lbv12 () Int)
(declare-fun _lbv11 () Int)
(declare-fun set179 (Bool) Bool)
(declare-fun _lbv13 () T2859)
(declare-fun shd (T2859) Int)
(declare-fun set180 (Bool) Bool)
(declare-fun _lbv14 () T2859)
(declare-fun set181 (Bool) Bool)
(declare-fun _lbv15 () T2859)
(declare-fun set182 (Bool) Bool)
(declare-fun _lbv16 () T2859)
(declare-fun set183 (Bool) Bool)
(declare-fun _lbv17 () T2859)
(declare-fun set184 (Bool) Bool)
(declare-fun _lbv18 () T2859)
(declare-fun set185 (Bool) Bool)
(declare-fun _lbv19 () T2859)
(declare-fun set186 (Bool) Bool)
(declare-fun _lbv20 () T2859)
(declare-fun _lbv10 () Int)
(assert (forall ((bv0 Bool)) (= (set178 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set178 bv0))))
(assert (= (slen nil) 0))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv5))
(assert (> s _lbv6))
(assert (> s _lbv7))
(assert (= _lbv8 (- s 1)))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (or (> _lbv9 _lbv8) (= _lbv9 _lbv8)))
(assert (= |3| 3))
(assert (not (> _lbv9 |3|)))
(assert (or (> _lbv12 _lbv5) (= _lbv12 _lbv5)))
(assert (= |3| 3))
(assert (not (> _lbv12 |3|)))
(assert (or (> _lbv11 _lbv6) (= _lbv11 _lbv6)))
(assert (= |3| 3))
(assert (not (> _lbv11 |3|)))
(assert (forall ((bv0 Bool)) (= (set179 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv13 bv0) (set179 bv0))))
(assert (= (slen _lbv13) s))
(assert (=> (> (slen _lbv13) 0) (or (> (shd _lbv13) x0) (= (shd _lbv13) x0))))
(assert (forall ((bv0 Bool)) (= (set180 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv14 bv0) (set180 bv0))))
(assert (= (slen _lbv14) s))
(assert (=> (> (slen _lbv14) 0) (or (> (shd _lbv14) x0) (= (shd _lbv14) x0))))
(assert (forall ((bv0 Bool)) (= (set181 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv15 bv0) (set181 bv0))))
(assert (= (slen _lbv15) s))
(assert (=> (> (slen _lbv15) 0) (or (> (shd _lbv15) x0) (= (shd _lbv15) x0))))
(assert (forall ((bv0 Bool)) (= (set182 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv16 bv0) (set182 bv0))))
(assert (= (slen _lbv16) s))
(assert (=> (> (slen _lbv16) 0) (or (> (shd _lbv16) x0) (= (shd _lbv16) x0))))
(assert (forall ((bv0 Bool)) (= (set183 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv17 bv0) (set183 bv0))))
(assert (= (slen _lbv17) s))
(assert (=> (> (slen _lbv17) 0) (or (> (shd _lbv17) x0) (= (shd _lbv17) x0))))
(assert (forall ((bv0 Bool)) (= (set184 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv18 bv0) (set184 bv0))))
(assert (= (slen _lbv18) s))
(assert (=> (> (slen _lbv18) 0) (or (> (shd _lbv18) x0) (= (shd _lbv18) x0))))
(assert (forall ((bv0 Bool)) (= (set185 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv19 bv0) (set185 bv0))))
(assert (= (slen _lbv19) s))
(assert (=> (> (slen _lbv19) 0) (or (> (shd _lbv19) x0) (= (shd _lbv19) x0))))
(assert (forall ((bv0 Bool)) (= (set186 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv20 bv0) (set186 bv0))))
(assert (= (slen _lbv20) s))
(assert (=> (> (slen _lbv20) 0) (or (> (shd _lbv20) x0) (= (shd _lbv20) x0))))
(assert (or (> _lbv10 _lbv7) (= _lbv10 _lbv7)))
(assert (= |3| 3))
(assert (not (> _lbv10 |3|)))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (or (> _lbv10 _lbv7) (= _lbv10 _lbv7)))
(assert (= |3| 3))
(assert (not (> _lbv10 |3|)))
(assert (not true))

 
 Enumerating a Scalar Term _lbv9
 
 Type of the Scalar Term {v:Ty_int | 
 	 Conj <c 
 Disj <d  v > _lbv8
 	,   v = _lbv8>d 
 	 , Negation v > 3 >c }                                                                                                                                                                                                                                                                          
solver 
 (declare-sort T2901)
(declare-fun set187 (Bool) Bool)
(declare-fun slist (T2901 Bool) Bool)
(declare-fun nil () T2901)
(declare-fun slen (T2901) Int)
(declare-fun |0| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv5 () Int)
(declare-fun s () Int)
(declare-fun _lbv6 () Int)
(declare-fun _lbv7 () Int)
(declare-fun _lbv8 () Int)
(declare-fun |3| () Int)
(declare-fun _lbv10 () Int)
(declare-fun _lbv12 () Int)
(declare-fun _lbv11 () Int)
(declare-fun set188 (Bool) Bool)
(declare-fun _lbv13 () T2901)
(declare-fun shd (T2901) Int)
(declare-fun set189 (Bool) Bool)
(declare-fun _lbv14 () T2901)
(declare-fun set190 (Bool) Bool)
(declare-fun _lbv15 () T2901)
(declare-fun set191 (Bool) Bool)
(declare-fun _lbv16 () T2901)
(declare-fun set192 (Bool) Bool)
(declare-fun _lbv17 () T2901)
(declare-fun set193 (Bool) Bool)
(declare-fun _lbv18 () T2901)
(declare-fun set194 (Bool) Bool)
(declare-fun _lbv19 () T2901)
(declare-fun set195 (Bool) Bool)
(declare-fun _lbv20 () T2901)
(declare-fun _lbv9 () Int)
(assert (forall ((bv0 Bool)) (= (set187 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set187 bv0))))
(assert (= (slen nil) 0))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv5))
(assert (> s _lbv6))
(assert (> s _lbv7))
(assert (= _lbv8 (- s 1)))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (or (> _lbv10 _lbv7) (= _lbv10 _lbv7)))
(assert (= |3| 3))
(assert (not (> _lbv10 |3|)))
(assert (or (> _lbv12 _lbv5) (= _lbv12 _lbv5)))
(assert (= |3| 3))
(assert (not (> _lbv12 |3|)))
(assert (or (> _lbv11 _lbv6) (= _lbv11 _lbv6)))
(assert (= |3| 3))
(assert (not (> _lbv11 |3|)))
(assert (forall ((bv0 Bool)) (= (set188 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv13 bv0) (set188 bv0))))
(assert (= (slen _lbv13) s))
(assert (=> (> (slen _lbv13) 0) (or (> (shd _lbv13) x0) (= (shd _lbv13) x0))))
(assert (forall ((bv0 Bool)) (= (set189 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv14 bv0) (set189 bv0))))
(assert (= (slen _lbv14) s))
(assert (=> (> (slen _lbv14) 0) (or (> (shd _lbv14) x0) (= (shd _lbv14) x0))))
(assert (forall ((bv0 Bool)) (= (set190 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv15 bv0) (set190 bv0))))
(assert (= (slen _lbv15) s))
(assert (=> (> (slen _lbv15) 0) (or (> (shd _lbv15) x0) (= (shd _lbv15) x0))))
(assert (forall ((bv0 Bool)) (= (set191 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv16 bv0) (set191 bv0))))
(assert (= (slen _lbv16) s))
(assert (=> (> (slen _lbv16) 0) (or (> (shd _lbv16) x0) (= (shd _lbv16) x0))))
(assert (forall ((bv0 Bool)) (= (set192 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv17 bv0) (set192 bv0))))
(assert (= (slen _lbv17) s))
(assert (=> (> (slen _lbv17) 0) (or (> (shd _lbv17) x0) (= (shd _lbv17) x0))))
(assert (forall ((bv0 Bool)) (= (set193 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv18 bv0) (set193 bv0))))
(assert (= (slen _lbv18) s))
(assert (=> (> (slen _lbv18) 0) (or (> (shd _lbv18) x0) (= (shd _lbv18) x0))))
(assert (forall ((bv0 Bool)) (= (set194 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv19 bv0) (set194 bv0))))
(assert (= (slen _lbv19) s))
(assert (=> (> (slen _lbv19) 0) (or (> (shd _lbv19) x0) (= (shd _lbv19) x0))))
(assert (forall ((bv0 Bool)) (= (set195 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv20 bv0) (set195 bv0))))
(assert (= (slen _lbv20) s))
(assert (=> (> (slen _lbv20) 0) (or (> (shd _lbv20) x0) (= (shd _lbv20) x0))))
(assert (or (> _lbv9 _lbv8) (= _lbv9 _lbv8)))
(assert (= |3| 3))
(assert (not (> _lbv9 |3|)))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (or (> _lbv9 _lbv8) (= _lbv9 _lbv8)))
(assert (= |3| 3))
(assert (not (> _lbv9 |3|)))
(assert (not true))

 
 Enumerating a Scalar Term _lbv12
 
 Type of the Scalar Term {v:Ty_int | 
 	 Conj <c 
 Disj <d  v > _lbv5
 	,   v = _lbv5>d 
 	 , Negation v > 3 >c }                                                                                                                                                                                                                                                                          
solver 
 (declare-sort T2943)
(declare-fun set196 (Bool) Bool)
(declare-fun slist (T2943 Bool) Bool)
(declare-fun nil () T2943)
(declare-fun slen (T2943) Int)
(declare-fun |0| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv5 () Int)
(declare-fun s () Int)
(declare-fun _lbv6 () Int)
(declare-fun _lbv7 () Int)
(declare-fun _lbv8 () Int)
(declare-fun |3| () Int)
(declare-fun _lbv10 () Int)
(declare-fun _lbv9 () Int)
(declare-fun _lbv11 () Int)
(declare-fun set197 (Bool) Bool)
(declare-fun _lbv13 () T2943)
(declare-fun shd (T2943) Int)
(declare-fun set198 (Bool) Bool)
(declare-fun _lbv14 () T2943)
(declare-fun set199 (Bool) Bool)
(declare-fun _lbv15 () T2943)
(declare-fun set200 (Bool) Bool)
(declare-fun _lbv16 () T2943)
(declare-fun set201 (Bool) Bool)
(declare-fun _lbv17 () T2943)
(declare-fun set202 (Bool) Bool)
(declare-fun _lbv18 () T2943)
(declare-fun set203 (Bool) Bool)
(declare-fun _lbv19 () T2943)
(declare-fun set204 (Bool) Bool)
(declare-fun _lbv20 () T2943)
(declare-fun _lbv12 () Int)
(assert (forall ((bv0 Bool)) (= (set196 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set196 bv0))))
(assert (= (slen nil) 0))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv5))
(assert (> s _lbv6))
(assert (> s _lbv7))
(assert (= _lbv8 (- s 1)))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (or (> _lbv10 _lbv7) (= _lbv10 _lbv7)))
(assert (= |3| 3))
(assert (not (> _lbv10 |3|)))
(assert (or (> _lbv9 _lbv8) (= _lbv9 _lbv8)))
(assert (= |3| 3))
(assert (not (> _lbv9 |3|)))
(assert (or (> _lbv11 _lbv6) (= _lbv11 _lbv6)))
(assert (= |3| 3))
(assert (not (> _lbv11 |3|)))
(assert (forall ((bv0 Bool)) (= (set197 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv13 bv0) (set197 bv0))))
(assert (= (slen _lbv13) s))
(assert (=> (> (slen _lbv13) 0) (or (> (shd _lbv13) x0) (= (shd _lbv13) x0))))
(assert (forall ((bv0 Bool)) (= (set198 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv14 bv0) (set198 bv0))))
(assert (= (slen _lbv14) s))
(assert (=> (> (slen _lbv14) 0) (or (> (shd _lbv14) x0) (= (shd _lbv14) x0))))
(assert (forall ((bv0 Bool)) (= (set199 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv15 bv0) (set199 bv0))))
(assert (= (slen _lbv15) s))
(assert (=> (> (slen _lbv15) 0) (or (> (shd _lbv15) x0) (= (shd _lbv15) x0))))
(assert (forall ((bv0 Bool)) (= (set200 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv16 bv0) (set200 bv0))))
(assert (= (slen _lbv16) s))
(assert (=> (> (slen _lbv16) 0) (or (> (shd _lbv16) x0) (= (shd _lbv16) x0))))
(assert (forall ((bv0 Bool)) (= (set201 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv17 bv0) (set201 bv0))))
(assert (= (slen _lbv17) s))
(assert (=> (> (slen _lbv17) 0) (or (> (shd _lbv17) x0) (= (shd _lbv17) x0))))
(assert (forall ((bv0 Bool)) (= (set202 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv18 bv0) (set202 bv0))))
(assert (= (slen _lbv18) s))
(assert (=> (> (slen _lbv18) 0) (or (> (shd _lbv18) x0) (= (shd _lbv18) x0))))
(assert (forall ((bv0 Bool)) (= (set203 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv19 bv0) (set203 bv0))))
(assert (= (slen _lbv19) s))
(assert (=> (> (slen _lbv19) 0) (or (> (shd _lbv19) x0) (= (shd _lbv19) x0))))
(assert (forall ((bv0 Bool)) (= (set204 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv20 bv0) (set204 bv0))))
(assert (= (slen _lbv20) s))
(assert (=> (> (slen _lbv20) 0) (or (> (shd _lbv20) x0) (= (shd _lbv20) x0))))
(assert (or (> _lbv12 _lbv5) (= _lbv12 _lbv5)))
(assert (= |3| 3))
(assert (not (> _lbv12 |3|)))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (or (> _lbv12 _lbv5) (= _lbv12 _lbv5)))
(assert (= |3| 3))
(assert (not (> _lbv12 |3|)))
(assert (not true))

 
 Enumerating a Scalar Term _lbv11
 
 Type of the Scalar Term {v:Ty_int | 
 	 Conj <c 
 Disj <d  v > _lbv6
 	,   v = _lbv6>d 
 	 , Negation v > 3 >c }                                                                                                                                                                                                                                                                          
solver 
 (declare-sort T2985)
(declare-fun set205 (Bool) Bool)
(declare-fun slist (T2985 Bool) Bool)
(declare-fun nil () T2985)
(declare-fun slen (T2985) Int)
(declare-fun |0| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv5 () Int)
(declare-fun s () Int)
(declare-fun _lbv6 () Int)
(declare-fun _lbv7 () Int)
(declare-fun _lbv8 () Int)
(declare-fun |3| () Int)
(declare-fun _lbv10 () Int)
(declare-fun _lbv9 () Int)
(declare-fun _lbv12 () Int)
(declare-fun set206 (Bool) Bool)
(declare-fun _lbv13 () T2985)
(declare-fun shd (T2985) Int)
(declare-fun set207 (Bool) Bool)
(declare-fun _lbv14 () T2985)
(declare-fun set208 (Bool) Bool)
(declare-fun _lbv15 () T2985)
(declare-fun set209 (Bool) Bool)
(declare-fun _lbv16 () T2985)
(declare-fun set210 (Bool) Bool)
(declare-fun _lbv17 () T2985)
(declare-fun set211 (Bool) Bool)
(declare-fun _lbv18 () T2985)
(declare-fun set212 (Bool) Bool)
(declare-fun _lbv19 () T2985)
(declare-fun set213 (Bool) Bool)
(declare-fun _lbv20 () T2985)
(declare-fun _lbv11 () Int)
(assert (forall ((bv0 Bool)) (= (set205 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set205 bv0))))
(assert (= (slen nil) 0))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv5))
(assert (> s _lbv6))
(assert (> s _lbv7))
(assert (= _lbv8 (- s 1)))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (or (> _lbv10 _lbv7) (= _lbv10 _lbv7)))
(assert (= |3| 3))
(assert (not (> _lbv10 |3|)))
(assert (or (> _lbv9 _lbv8) (= _lbv9 _lbv8)))
(assert (= |3| 3))
(assert (not (> _lbv9 |3|)))
(assert (or (> _lbv12 _lbv5) (= _lbv12 _lbv5)))
(assert (= |3| 3))
(assert (not (> _lbv12 |3|)))
(assert (forall ((bv0 Bool)) (= (set206 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv13 bv0) (set206 bv0))))
(assert (= (slen _lbv13) s))
(assert (=> (> (slen _lbv13) 0) (or (> (shd _lbv13) x0) (= (shd _lbv13) x0))))
(assert (forall ((bv0 Bool)) (= (set207 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv14 bv0) (set207 bv0))))
(assert (= (slen _lbv14) s))
(assert (=> (> (slen _lbv14) 0) (or (> (shd _lbv14) x0) (= (shd _lbv14) x0))))
(assert (forall ((bv0 Bool)) (= (set208 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv15 bv0) (set208 bv0))))
(assert (= (slen _lbv15) s))
(assert (=> (> (slen _lbv15) 0) (or (> (shd _lbv15) x0) (= (shd _lbv15) x0))))
(assert (forall ((bv0 Bool)) (= (set209 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv16 bv0) (set209 bv0))))
(assert (= (slen _lbv16) s))
(assert (=> (> (slen _lbv16) 0) (or (> (shd _lbv16) x0) (= (shd _lbv16) x0))))
(assert (forall ((bv0 Bool)) (= (set210 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv17 bv0) (set210 bv0))))
(assert (= (slen _lbv17) s))
(assert (=> (> (slen _lbv17) 0) (or (> (shd _lbv17) x0) (= (shd _lbv17) x0))))
(assert (forall ((bv0 Bool)) (= (set211 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv18 bv0) (set211 bv0))))
(assert (= (slen _lbv18) s))
(assert (=> (> (slen _lbv18) 0) (or (> (shd _lbv18) x0) (= (shd _lbv18) x0))))
(assert (forall ((bv0 Bool)) (= (set212 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv19 bv0) (set212 bv0))))
(assert (= (slen _lbv19) s))
(assert (=> (> (slen _lbv19) 0) (or (> (shd _lbv19) x0) (= (shd _lbv19) x0))))
(assert (forall ((bv0 Bool)) (= (set213 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv20 bv0) (set213 bv0))))
(assert (= (slen _lbv20) s))
(assert (=> (> (slen _lbv20) 0) (or (> (shd _lbv20) x0) (= (shd _lbv20) x0))))
(assert (or (> _lbv11 _lbv6) (= _lbv11 _lbv6)))
(assert (= |3| 3))
(assert (not (> _lbv11 |3|)))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (or (> _lbv11 _lbv6) (= _lbv11 _lbv6)))
(assert (= |3| 3))
(assert (not (> _lbv11 |3|)))
(assert (not true))

 Show :: Found a Few Macthing Scalars 
  Next Trying Arguments of the form f (ei...) 
  Pure Fun Application: esynthesizePureApp 
 Show Potential Functions
  , 
 int_gen, 
 subs
 ############################################################
  Trying Pure Component int_gen
  *************** Trying Arrow Component ************int_gen :  Arrow ( ( n3 : {var_v0:Ty_int | true} ) -> {v:Ty_int | 
 	 Conj <c 
 Disj <d  v > n3
 	,   v = n3>d 
 	 , Negation v > 3 >c }
  *************** Synthesizing Args ei : ti for ************int_gen
 ##################################################################################
  Synthesizing the 1th argument for Function int_gen
  Trying Arguments in Scalars 
 esynthesizeScalar for {var_v0:Ty_int | true}
  Enumeration for 
 spec 
 {var_v0:Ty_int | true}
 
 Enumerating a Scalar Term s
 
 Type of the Scalar Term {v:Ty_int | true}                                                                                                                                                                                                                                                          
solver 
 (declare-sort T3027)
(declare-fun set214 (Bool) Bool)
(declare-fun slist (T3027 Bool) Bool)
(declare-fun nil () T3027)
(declare-fun slen (T3027) Int)
(declare-fun |0| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv5 () Int)
(declare-fun s () Int)
(declare-fun _lbv6 () Int)
(declare-fun _lbv7 () Int)
(declare-fun _lbv8 () Int)
(declare-fun |3| () Int)
(declare-fun _lbv10 () Int)
(declare-fun _lbv9 () Int)
(declare-fun _lbv12 () Int)
(declare-fun _lbv11 () Int)
(declare-fun set215 (Bool) Bool)
(declare-fun _lbv13 () T3027)
(declare-fun shd (T3027) Int)
(declare-fun set216 (Bool) Bool)
(declare-fun _lbv14 () T3027)
(declare-fun set217 (Bool) Bool)
(declare-fun _lbv15 () T3027)
(declare-fun set218 (Bool) Bool)
(declare-fun _lbv16 () T3027)
(declare-fun set219 (Bool) Bool)
(declare-fun _lbv17 () T3027)
(declare-fun set220 (Bool) Bool)
(declare-fun _lbv18 () T3027)
(declare-fun set221 (Bool) Bool)
(declare-fun _lbv19 () T3027)
(declare-fun set222 (Bool) Bool)
(declare-fun _lbv20 () T3027)
(assert (forall ((bv0 Bool)) (= (set214 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set214 bv0))))
(assert (= (slen nil) 0))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv5))
(assert (> s _lbv6))
(assert (> s _lbv7))
(assert (= _lbv8 (- s 1)))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (or (> _lbv10 _lbv7) (= _lbv10 _lbv7)))
(assert (= |3| 3))
(assert (not (> _lbv10 |3|)))
(assert (or (> _lbv9 _lbv8) (= _lbv9 _lbv8)))
(assert (= |3| 3))
(assert (not (> _lbv9 |3|)))
(assert (or (> _lbv12 _lbv5) (= _lbv12 _lbv5)))
(assert (= |3| 3))
(assert (not (> _lbv12 |3|)))
(assert (or (> _lbv11 _lbv6) (= _lbv11 _lbv6)))
(assert (= |3| 3))
(assert (not (> _lbv11 |3|)))
(assert (forall ((bv0 Bool)) (= (set215 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv13 bv0) (set215 bv0))))
(assert (= (slen _lbv13) s))
(assert (=> (> (slen _lbv13) 0) (or (> (shd _lbv13) x0) (= (shd _lbv13) x0))))
(assert (forall ((bv0 Bool)) (= (set216 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv14 bv0) (set216 bv0))))
(assert (= (slen _lbv14) s))
(assert (=> (> (slen _lbv14) 0) (or (> (shd _lbv14) x0) (= (shd _lbv14) x0))))
(assert (forall ((bv0 Bool)) (= (set217 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv15 bv0) (set217 bv0))))
(assert (= (slen _lbv15) s))
(assert (=> (> (slen _lbv15) 0) (or (> (shd _lbv15) x0) (= (shd _lbv15) x0))))
(assert (forall ((bv0 Bool)) (= (set218 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv16 bv0) (set218 bv0))))
(assert (= (slen _lbv16) s))
(assert (=> (> (slen _lbv16) 0) (or (> (shd _lbv16) x0) (= (shd _lbv16) x0))))
(assert (forall ((bv0 Bool)) (= (set219 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv17 bv0) (set219 bv0))))
(assert (= (slen _lbv17) s))
(assert (=> (> (slen _lbv17) 0) (or (> (shd _lbv17) x0) (= (shd _lbv17) x0))))
(assert (forall ((bv0 Bool)) (= (set220 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv18 bv0) (set220 bv0))))
(assert (= (slen _lbv18) s))
(assert (=> (> (slen _lbv18) 0) (or (> (shd _lbv18) x0) (= (shd _lbv18) x0))))
(assert (forall ((bv0 Bool)) (= (set221 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv19 bv0) (set221 bv0))))
(assert (= (slen _lbv19) s))
(assert (=> (> (slen _lbv19) 0) (or (> (shd _lbv19) x0) (= (shd _lbv19) x0))))
(assert (forall ((bv0 Bool)) (= (set222 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv20 bv0) (set222 bv0))))
(assert (= (slen _lbv20) s))
(assert (=> (> (slen _lbv20) 0) (or (> (shd _lbv20) x0) (= (shd _lbv20) x0))))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (not true))

 
 Enumerating a Scalar Term x0
 
 Type of the Scalar Term {var_v3:Ty_int | true}                                                                                                                                                                                                                                                          
solver 
 (declare-sort T3069)
(declare-fun set223 (Bool) Bool)
(declare-fun slist (T3069 Bool) Bool)
(declare-fun nil () T3069)
(declare-fun slen (T3069) Int)
(declare-fun |0| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv5 () Int)
(declare-fun s () Int)
(declare-fun _lbv6 () Int)
(declare-fun _lbv7 () Int)
(declare-fun _lbv8 () Int)
(declare-fun |3| () Int)
(declare-fun _lbv10 () Int)
(declare-fun _lbv9 () Int)
(declare-fun _lbv12 () Int)
(declare-fun _lbv11 () Int)
(declare-fun set224 (Bool) Bool)
(declare-fun _lbv13 () T3069)
(declare-fun shd (T3069) Int)
(declare-fun set225 (Bool) Bool)
(declare-fun _lbv14 () T3069)
(declare-fun set226 (Bool) Bool)
(declare-fun _lbv15 () T3069)
(declare-fun set227 (Bool) Bool)
(declare-fun _lbv16 () T3069)
(declare-fun set228 (Bool) Bool)
(declare-fun _lbv17 () T3069)
(declare-fun set229 (Bool) Bool)
(declare-fun _lbv18 () T3069)
(declare-fun set230 (Bool) Bool)
(declare-fun _lbv19 () T3069)
(declare-fun set231 (Bool) Bool)
(declare-fun _lbv20 () T3069)
(assert (forall ((bv0 Bool)) (= (set223 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set223 bv0))))
(assert (= (slen nil) 0))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv5))
(assert (> s _lbv6))
(assert (> s _lbv7))
(assert (= _lbv8 (- s 1)))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (or (> _lbv10 _lbv7) (= _lbv10 _lbv7)))
(assert (= |3| 3))
(assert (not (> _lbv10 |3|)))
(assert (or (> _lbv9 _lbv8) (= _lbv9 _lbv8)))
(assert (= |3| 3))
(assert (not (> _lbv9 |3|)))
(assert (or (> _lbv12 _lbv5) (= _lbv12 _lbv5)))
(assert (= |3| 3))
(assert (not (> _lbv12 |3|)))
(assert (or (> _lbv11 _lbv6) (= _lbv11 _lbv6)))
(assert (= |3| 3))
(assert (not (> _lbv11 |3|)))
(assert (forall ((bv0 Bool)) (= (set224 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv13 bv0) (set224 bv0))))
(assert (= (slen _lbv13) s))
(assert (=> (> (slen _lbv13) 0) (or (> (shd _lbv13) x0) (= (shd _lbv13) x0))))
(assert (forall ((bv0 Bool)) (= (set225 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv14 bv0) (set225 bv0))))
(assert (= (slen _lbv14) s))
(assert (=> (> (slen _lbv14) 0) (or (> (shd _lbv14) x0) (= (shd _lbv14) x0))))
(assert (forall ((bv0 Bool)) (= (set226 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv15 bv0) (set226 bv0))))
(assert (= (slen _lbv15) s))
(assert (=> (> (slen _lbv15) 0) (or (> (shd _lbv15) x0) (= (shd _lbv15) x0))))
(assert (forall ((bv0 Bool)) (= (set227 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv16 bv0) (set227 bv0))))
(assert (= (slen _lbv16) s))
(assert (=> (> (slen _lbv16) 0) (or (> (shd _lbv16) x0) (= (shd _lbv16) x0))))
(assert (forall ((bv0 Bool)) (= (set228 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv17 bv0) (set228 bv0))))
(assert (= (slen _lbv17) s))
(assert (=> (> (slen _lbv17) 0) (or (> (shd _lbv17) x0) (= (shd _lbv17) x0))))
(assert (forall ((bv0 Bool)) (= (set229 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv18 bv0) (set229 bv0))))
(assert (= (slen _lbv18) s))
(assert (=> (> (slen _lbv18) 0) (or (> (shd _lbv18) x0) (= (shd _lbv18) x0))))
(assert (forall ((bv0 Bool)) (= (set230 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv19 bv0) (set230 bv0))))
(assert (= (slen _lbv19) s))
(assert (=> (> (slen _lbv19) 0) (or (> (shd _lbv19) x0) (= (shd _lbv19) x0))))
(assert (forall ((bv0 Bool)) (= (set231 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv20 bv0) (set231 bv0))))
(assert (= (slen _lbv20) s))
(assert (=> (> (slen _lbv20) 0) (or (> (shd _lbv20) x0) (= (shd _lbv20) x0))))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (not true))

 
 Enumerating a Scalar Term _lbv5
 
 Type of the Scalar Term {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c }                                                                                                                                                                                                                                                               
solver 
 (declare-sort T3111)
(declare-fun set232 (Bool) Bool)
(declare-fun slist (T3111 Bool) Bool)
(declare-fun nil () T3111)
(declare-fun slen (T3111) Int)
(declare-fun |0| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv6 () Int)
(declare-fun s () Int)
(declare-fun _lbv7 () Int)
(declare-fun _lbv8 () Int)
(declare-fun |3| () Int)
(declare-fun _lbv10 () Int)
(declare-fun _lbv9 () Int)
(declare-fun _lbv5 () Int)
(declare-fun _lbv12 () Int)
(declare-fun _lbv11 () Int)
(declare-fun set233 (Bool) Bool)
(declare-fun _lbv13 () T3111)
(declare-fun shd (T3111) Int)
(declare-fun set234 (Bool) Bool)
(declare-fun _lbv14 () T3111)
(declare-fun set235 (Bool) Bool)
(declare-fun _lbv15 () T3111)
(declare-fun set236 (Bool) Bool)
(declare-fun _lbv16 () T3111)
(declare-fun set237 (Bool) Bool)
(declare-fun _lbv17 () T3111)
(declare-fun set238 (Bool) Bool)
(declare-fun _lbv18 () T3111)
(declare-fun set239 (Bool) Bool)
(declare-fun _lbv19 () T3111)
(declare-fun set240 (Bool) Bool)
(declare-fun _lbv20 () T3111)
(assert (forall ((bv0 Bool)) (= (set232 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set232 bv0))))
(assert (= (slen nil) 0))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv6))
(assert (> s _lbv7))
(assert (= _lbv8 (- s 1)))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (or (> _lbv10 _lbv7) (= _lbv10 _lbv7)))
(assert (= |3| 3))
(assert (not (> _lbv10 |3|)))
(assert (or (> _lbv9 _lbv8) (= _lbv9 _lbv8)))
(assert (= |3| 3))
(assert (not (> _lbv9 |3|)))
(assert (or (> _lbv12 _lbv5) (= _lbv12 _lbv5)))
(assert (= |3| 3))
(assert (not (> _lbv12 |3|)))
(assert (or (> _lbv11 _lbv6) (= _lbv11 _lbv6)))
(assert (= |3| 3))
(assert (not (> _lbv11 |3|)))
(assert (forall ((bv0 Bool)) (= (set233 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv13 bv0) (set233 bv0))))
(assert (= (slen _lbv13) s))
(assert (=> (> (slen _lbv13) 0) (or (> (shd _lbv13) x0) (= (shd _lbv13) x0))))
(assert (forall ((bv0 Bool)) (= (set234 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv14 bv0) (set234 bv0))))
(assert (= (slen _lbv14) s))
(assert (=> (> (slen _lbv14) 0) (or (> (shd _lbv14) x0) (= (shd _lbv14) x0))))
(assert (forall ((bv0 Bool)) (= (set235 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv15 bv0) (set235 bv0))))
(assert (= (slen _lbv15) s))
(assert (=> (> (slen _lbv15) 0) (or (> (shd _lbv15) x0) (= (shd _lbv15) x0))))
(assert (forall ((bv0 Bool)) (= (set236 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv16 bv0) (set236 bv0))))
(assert (= (slen _lbv16) s))
(assert (=> (> (slen _lbv16) 0) (or (> (shd _lbv16) x0) (= (shd _lbv16) x0))))
(assert (forall ((bv0 Bool)) (= (set237 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv17 bv0) (set237 bv0))))
(assert (= (slen _lbv17) s))
(assert (=> (> (slen _lbv17) 0) (or (> (shd _lbv17) x0) (= (shd _lbv17) x0))))
(assert (forall ((bv0 Bool)) (= (set238 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv18 bv0) (set238 bv0))))
(assert (= (slen _lbv18) s))
(assert (=> (> (slen _lbv18) 0) (or (> (shd _lbv18) x0) (= (shd _lbv18) x0))))
(assert (forall ((bv0 Bool)) (= (set239 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv19 bv0) (set239 bv0))))
(assert (= (slen _lbv19) s))
(assert (=> (> (slen _lbv19) 0) (or (> (shd _lbv19) x0) (= (shd _lbv19) x0))))
(assert (forall ((bv0 Bool)) (= (set240 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv20 bv0) (set240 bv0))))
(assert (= (slen _lbv20) s))
(assert (=> (> (slen _lbv20) 0) (or (> (shd _lbv20) x0) (= (shd _lbv20) x0))))
(assert (> s _lbv5))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv5))
(assert (not true))

 
 Enumerating a Scalar Term _lbv6
 
 Type of the Scalar Term {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c }                                                                                                                                                                                                                                                               
solver 
 (declare-sort T3153)
(declare-fun set241 (Bool) Bool)
(declare-fun slist (T3153 Bool) Bool)
(declare-fun nil () T3153)
(declare-fun slen (T3153) Int)
(declare-fun |0| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv5 () Int)
(declare-fun s () Int)
(declare-fun _lbv7 () Int)
(declare-fun _lbv8 () Int)
(declare-fun |3| () Int)
(declare-fun _lbv10 () Int)
(declare-fun _lbv9 () Int)
(declare-fun _lbv12 () Int)
(declare-fun _lbv6 () Int)
(declare-fun _lbv11 () Int)
(declare-fun set242 (Bool) Bool)
(declare-fun _lbv13 () T3153)
(declare-fun shd (T3153) Int)
(declare-fun set243 (Bool) Bool)
(declare-fun _lbv14 () T3153)
(declare-fun set244 (Bool) Bool)
(declare-fun _lbv15 () T3153)
(declare-fun set245 (Bool) Bool)
(declare-fun _lbv16 () T3153)
(declare-fun set246 (Bool) Bool)
(declare-fun _lbv17 () T3153)
(declare-fun set247 (Bool) Bool)
(declare-fun _lbv18 () T3153)
(declare-fun set248 (Bool) Bool)
(declare-fun _lbv19 () T3153)
(declare-fun set249 (Bool) Bool)
(declare-fun _lbv20 () T3153)
(assert (forall ((bv0 Bool)) (= (set241 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set241 bv0))))
(assert (= (slen nil) 0))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv5))
(assert (> s _lbv7))
(assert (= _lbv8 (- s 1)))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (or (> _lbv10 _lbv7) (= _lbv10 _lbv7)))
(assert (= |3| 3))
(assert (not (> _lbv10 |3|)))
(assert (or (> _lbv9 _lbv8) (= _lbv9 _lbv8)))
(assert (= |3| 3))
(assert (not (> _lbv9 |3|)))
(assert (or (> _lbv12 _lbv5) (= _lbv12 _lbv5)))
(assert (= |3| 3))
(assert (not (> _lbv12 |3|)))
(assert (or (> _lbv11 _lbv6) (= _lbv11 _lbv6)))
(assert (= |3| 3))
(assert (not (> _lbv11 |3|)))
(assert (forall ((bv0 Bool)) (= (set242 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv13 bv0) (set242 bv0))))
(assert (= (slen _lbv13) s))
(assert (=> (> (slen _lbv13) 0) (or (> (shd _lbv13) x0) (= (shd _lbv13) x0))))
(assert (forall ((bv0 Bool)) (= (set243 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv14 bv0) (set243 bv0))))
(assert (= (slen _lbv14) s))
(assert (=> (> (slen _lbv14) 0) (or (> (shd _lbv14) x0) (= (shd _lbv14) x0))))
(assert (forall ((bv0 Bool)) (= (set244 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv15 bv0) (set244 bv0))))
(assert (= (slen _lbv15) s))
(assert (=> (> (slen _lbv15) 0) (or (> (shd _lbv15) x0) (= (shd _lbv15) x0))))
(assert (forall ((bv0 Bool)) (= (set245 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv16 bv0) (set245 bv0))))
(assert (= (slen _lbv16) s))
(assert (=> (> (slen _lbv16) 0) (or (> (shd _lbv16) x0) (= (shd _lbv16) x0))))
(assert (forall ((bv0 Bool)) (= (set246 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv17 bv0) (set246 bv0))))
(assert (= (slen _lbv17) s))
(assert (=> (> (slen _lbv17) 0) (or (> (shd _lbv17) x0) (= (shd _lbv17) x0))))
(assert (forall ((bv0 Bool)) (= (set247 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv18 bv0) (set247 bv0))))
(assert (= (slen _lbv18) s))
(assert (=> (> (slen _lbv18) 0) (or (> (shd _lbv18) x0) (= (shd _lbv18) x0))))
(assert (forall ((bv0 Bool)) (= (set248 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv19 bv0) (set248 bv0))))
(assert (= (slen _lbv19) s))
(assert (=> (> (slen _lbv19) 0) (or (> (shd _lbv19) x0) (= (shd _lbv19) x0))))
(assert (forall ((bv0 Bool)) (= (set249 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv20 bv0) (set249 bv0))))
(assert (= (slen _lbv20) s))
(assert (=> (> (slen _lbv20) 0) (or (> (shd _lbv20) x0) (= (shd _lbv20) x0))))
(assert (> s _lbv6))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv6))
(assert (not true))

 
 Enumerating a Scalar Term _lbv7
 
 Type of the Scalar Term {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c }                                                                                                                                                                                                                                                               
solver 
 (declare-sort T3195)
(declare-fun set250 (Bool) Bool)
(declare-fun slist (T3195 Bool) Bool)
(declare-fun nil () T3195)
(declare-fun slen (T3195) Int)
(declare-fun |0| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv5 () Int)
(declare-fun s () Int)
(declare-fun _lbv6 () Int)
(declare-fun _lbv8 () Int)
(declare-fun |3| () Int)
(declare-fun _lbv7 () Int)
(declare-fun _lbv10 () Int)
(declare-fun _lbv9 () Int)
(declare-fun _lbv12 () Int)
(declare-fun _lbv11 () Int)
(declare-fun set251 (Bool) Bool)
(declare-fun _lbv13 () T3195)
(declare-fun shd (T3195) Int)
(declare-fun set252 (Bool) Bool)
(declare-fun _lbv14 () T3195)
(declare-fun set253 (Bool) Bool)
(declare-fun _lbv15 () T3195)
(declare-fun set254 (Bool) Bool)
(declare-fun _lbv16 () T3195)
(declare-fun set255 (Bool) Bool)
(declare-fun _lbv17 () T3195)
(declare-fun set256 (Bool) Bool)
(declare-fun _lbv18 () T3195)
(declare-fun set257 (Bool) Bool)
(declare-fun _lbv19 () T3195)
(declare-fun set258 (Bool) Bool)
(declare-fun _lbv20 () T3195)
(assert (forall ((bv0 Bool)) (= (set250 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set250 bv0))))
(assert (= (slen nil) 0))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv5))
(assert (> s _lbv6))
(assert (= _lbv8 (- s 1)))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (or (> _lbv10 _lbv7) (= _lbv10 _lbv7)))
(assert (= |3| 3))
(assert (not (> _lbv10 |3|)))
(assert (or (> _lbv9 _lbv8) (= _lbv9 _lbv8)))
(assert (= |3| 3))
(assert (not (> _lbv9 |3|)))
(assert (or (> _lbv12 _lbv5) (= _lbv12 _lbv5)))
(assert (= |3| 3))
(assert (not (> _lbv12 |3|)))
(assert (or (> _lbv11 _lbv6) (= _lbv11 _lbv6)))
(assert (= |3| 3))
(assert (not (> _lbv11 |3|)))
(assert (forall ((bv0 Bool)) (= (set251 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv13 bv0) (set251 bv0))))
(assert (= (slen _lbv13) s))
(assert (=> (> (slen _lbv13) 0) (or (> (shd _lbv13) x0) (= (shd _lbv13) x0))))
(assert (forall ((bv0 Bool)) (= (set252 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv14 bv0) (set252 bv0))))
(assert (= (slen _lbv14) s))
(assert (=> (> (slen _lbv14) 0) (or (> (shd _lbv14) x0) (= (shd _lbv14) x0))))
(assert (forall ((bv0 Bool)) (= (set253 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv15 bv0) (set253 bv0))))
(assert (= (slen _lbv15) s))
(assert (=> (> (slen _lbv15) 0) (or (> (shd _lbv15) x0) (= (shd _lbv15) x0))))
(assert (forall ((bv0 Bool)) (= (set254 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv16 bv0) (set254 bv0))))
(assert (= (slen _lbv16) s))
(assert (=> (> (slen _lbv16) 0) (or (> (shd _lbv16) x0) (= (shd _lbv16) x0))))
(assert (forall ((bv0 Bool)) (= (set255 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv17 bv0) (set255 bv0))))
(assert (= (slen _lbv17) s))
(assert (=> (> (slen _lbv17) 0) (or (> (shd _lbv17) x0) (= (shd _lbv17) x0))))
(assert (forall ((bv0 Bool)) (= (set256 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv18 bv0) (set256 bv0))))
(assert (= (slen _lbv18) s))
(assert (=> (> (slen _lbv18) 0) (or (> (shd _lbv18) x0) (= (shd _lbv18) x0))))
(assert (forall ((bv0 Bool)) (= (set257 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv19 bv0) (set257 bv0))))
(assert (= (slen _lbv19) s))
(assert (=> (> (slen _lbv19) 0) (or (> (shd _lbv19) x0) (= (shd _lbv19) x0))))
(assert (forall ((bv0 Bool)) (= (set258 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv20 bv0) (set258 bv0))))
(assert (= (slen _lbv20) s))
(assert (=> (> (slen _lbv20) 0) (or (> (shd _lbv20) x0) (= (shd _lbv20) x0))))
(assert (> s _lbv7))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv7))
(assert (not true))

 
 Enumerating a Scalar Term _lbv8
 
 Type of the Scalar Term {v:Ty_int | (v) ==((s) -- (1))}                                                                                                                                                                                                                                                          
solver 
 (declare-sort T3237)
(declare-fun set259 (Bool) Bool)
(declare-fun slist (T3237 Bool) Bool)
(declare-fun nil () T3237)
(declare-fun slen (T3237) Int)
(declare-fun |0| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv5 () Int)
(declare-fun s () Int)
(declare-fun _lbv6 () Int)
(declare-fun _lbv7 () Int)
(declare-fun |3| () Int)
(declare-fun _lbv10 () Int)
(declare-fun _lbv8 () Int)
(declare-fun _lbv9 () Int)
(declare-fun _lbv12 () Int)
(declare-fun _lbv11 () Int)
(declare-fun set260 (Bool) Bool)
(declare-fun _lbv13 () T3237)
(declare-fun shd (T3237) Int)
(declare-fun set261 (Bool) Bool)
(declare-fun _lbv14 () T3237)
(declare-fun set262 (Bool) Bool)
(declare-fun _lbv15 () T3237)
(declare-fun set263 (Bool) Bool)
(declare-fun _lbv16 () T3237)
(declare-fun set264 (Bool) Bool)
(declare-fun _lbv17 () T3237)
(declare-fun set265 (Bool) Bool)
(declare-fun _lbv18 () T3237)
(declare-fun set266 (Bool) Bool)
(declare-fun _lbv19 () T3237)
(declare-fun set267 (Bool) Bool)
(declare-fun _lbv20 () T3237)
(assert (forall ((bv0 Bool)) (= (set259 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set259 bv0))))
(assert (= (slen nil) 0))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv5))
(assert (> s _lbv6))
(assert (> s _lbv7))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (or (> _lbv10 _lbv7) (= _lbv10 _lbv7)))
(assert (= |3| 3))
(assert (not (> _lbv10 |3|)))
(assert (or (> _lbv9 _lbv8) (= _lbv9 _lbv8)))
(assert (= |3| 3))
(assert (not (> _lbv9 |3|)))
(assert (or (> _lbv12 _lbv5) (= _lbv12 _lbv5)))
(assert (= |3| 3))
(assert (not (> _lbv12 |3|)))
(assert (or (> _lbv11 _lbv6) (= _lbv11 _lbv6)))
(assert (= |3| 3))
(assert (not (> _lbv11 |3|)))
(assert (forall ((bv0 Bool)) (= (set260 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv13 bv0) (set260 bv0))))
(assert (= (slen _lbv13) s))
(assert (=> (> (slen _lbv13) 0) (or (> (shd _lbv13) x0) (= (shd _lbv13) x0))))
(assert (forall ((bv0 Bool)) (= (set261 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv14 bv0) (set261 bv0))))
(assert (= (slen _lbv14) s))
(assert (=> (> (slen _lbv14) 0) (or (> (shd _lbv14) x0) (= (shd _lbv14) x0))))
(assert (forall ((bv0 Bool)) (= (set262 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv15 bv0) (set262 bv0))))
(assert (= (slen _lbv15) s))
(assert (=> (> (slen _lbv15) 0) (or (> (shd _lbv15) x0) (= (shd _lbv15) x0))))
(assert (forall ((bv0 Bool)) (= (set263 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv16 bv0) (set263 bv0))))
(assert (= (slen _lbv16) s))
(assert (=> (> (slen _lbv16) 0) (or (> (shd _lbv16) x0) (= (shd _lbv16) x0))))
(assert (forall ((bv0 Bool)) (= (set264 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv17 bv0) (set264 bv0))))
(assert (= (slen _lbv17) s))
(assert (=> (> (slen _lbv17) 0) (or (> (shd _lbv17) x0) (= (shd _lbv17) x0))))
(assert (forall ((bv0 Bool)) (= (set265 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv18 bv0) (set265 bv0))))
(assert (= (slen _lbv18) s))
(assert (=> (> (slen _lbv18) 0) (or (> (shd _lbv18) x0) (= (shd _lbv18) x0))))
(assert (forall ((bv0 Bool)) (= (set266 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv19 bv0) (set266 bv0))))
(assert (= (slen _lbv19) s))
(assert (=> (> (slen _lbv19) 0) (or (> (shd _lbv19) x0) (= (shd _lbv19) x0))))
(assert (forall ((bv0 Bool)) (= (set267 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv20 bv0) (set267 bv0))))
(assert (= (slen _lbv20) s))
(assert (=> (> (slen _lbv20) 0) (or (> (shd _lbv20) x0) (= (shd _lbv20) x0))))
(assert (= _lbv8 (- s 1)))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (= _lbv8 (- s 1)))
(assert (not true))

 
 Enumerating a Scalar Term _lbv1
 
 Type of the Scalar Term {v:Ty_int | 
 	 Conj <c 
 Disj <d  v > s
 	,   v = s>d 
 	 , Negation v > 3 >c }
 ################################################
 Skipping Variable _lbv1 As Outer Function Call is int_gen
 
 Enumerating a Scalar Term _lbv0
 
 Type of the Scalar Term {v:Ty_int | 
 	 Conj <c 
 Disj <d  v > x0
 	,   v = x0>d 
 	 , Negation v > 3 >c }
 ################################################
 Skipping Variable _lbv0 As Outer Function Call is int_gen
 
 Enumerating a Scalar Term _lbv10
 
 Type of the Scalar Term {v:Ty_int | 
 	 Conj <c 
 Disj <d  v > _lbv7
 	,   v = _lbv7>d 
 	 , Negation v > 3 >c }
 ################################################
 Skipping Variable _lbv10 As Outer Function Call is int_gen
 
 Enumerating a Scalar Term _lbv9
 
 Type of the Scalar Term {v:Ty_int | 
 	 Conj <c 
 Disj <d  v > _lbv8
 	,   v = _lbv8>d 
 	 , Negation v > 3 >c }
 ################################################
 Skipping Variable _lbv9 As Outer Function Call is int_gen
 
 Enumerating a Scalar Term _lbv12
 
 Type of the Scalar Term {v:Ty_int | 
 	 Conj <c 
 Disj <d  v > _lbv5
 	,   v = _lbv5>d 
 	 , Negation v > 3 >c }
 ################################################
 Skipping Variable _lbv12 As Outer Function Call is int_gen
 
 Enumerating a Scalar Term _lbv11
 
 Type of the Scalar Term {v:Ty_int | 
 	 Conj <c 
 Disj <d  v > _lbv6
 	,   v = _lbv6>d 
 	 , Negation v > 3 >c }
 ################################################
 Skipping Variable _lbv11 As Outer Function Call is int_gen
 Show :: Found a Few Macthing Scalars 
  Next Trying Arguments of the form f (ei...) 
  Pure Fun Application: esynthesizePureApp 
 ##################################################################################
  *************** Successfully Synthesized Args ei Forall i 
 # of Possible Argument Options for int_gen 6
 Possible Arg Options 
 EI _lbv8
 Possible Arg Options 
 EI _lbv7
 Possible Arg Options 
 EI _lbv6
 Possible Arg Options 
 EI _lbv5
 Possible Arg Options 
 EI x0
 Possible Arg Options 
 EI s
 Apply Single Argument Case : f (ei) Case int_gen
  Case : f (ei) Case int_gen _lbv8
 Finding Already seen tree for apply int_gen  (, _lbv8 )
 Found _lbv9
  Case : f (ei) Case int_gen _lbv7
 Finding Already seen tree for apply int_gen  (, _lbv7 )
 Found _lbv10
  Case : f (ei) Case int_gen _lbv6
 Finding Already seen tree for apply int_gen  (, _lbv6 )
 Found _lbv11
  Case : f (ei) Case int_gen _lbv5
 Finding Already seen tree for apply int_gen  (, _lbv5 )
 Found _lbv12
  Case : f (ei) Case int_gen x0
 Finding Already seen tree for apply int_gen  (, x0 )
 Found _lbv0
  Case : f (ei) Case int_gen s
 Finding Already seen tree for apply int_gen  (, s )
 Found _lbv1
  Sorted Exxpressions
 Non-Expanded _lbv1
 Program apply int_gen  (, s ) 
 Size 2
 Non-Expanded _lbv0
 Program apply int_gen  (, x0 ) 
 Size 2
 Non-Expanded _lbv10
 Program apply int_gen  (, apply subs  (, x0 ) ) 
 Size 3
 Non-Expanded _lbv9
 Program apply int_gen  (, apply subs  (, s ) ) 
 Size 3
 Non-Expanded _lbv12
 Program apply int_gen  (, apply subs  (, apply int_gen  (, x0 ) ) ) 
 Size 4
 Non-Expanded _lbv11
 Program apply int_gen  (, apply subs  (, apply int_gen  (, s ) ) ) 
 Size 4
 Typechecking apply int_gen  (, s )
 Against {var_v2:Ty_int | true}
 Typechecking apply int_gen  (, s )
 Against {var_v2:Ty_int | true}
 Argument s :: {v:Ty_int | true} | true                                                                                                                                                                                                                                                                                          
solver 
 (declare-sort T3279)
(declare-fun set268 (Bool) Bool)
(declare-fun slist (T3279 Bool) Bool)
(declare-fun nil () T3279)
(declare-fun slen (T3279) Int)
(declare-fun |0| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv5 () Int)
(declare-fun s () Int)
(declare-fun _lbv6 () Int)
(declare-fun _lbv7 () Int)
(declare-fun _lbv8 () Int)
(declare-fun |3| () Int)
(declare-fun _lbv10 () Int)
(declare-fun _lbv9 () Int)
(declare-fun _lbv12 () Int)
(declare-fun _lbv11 () Int)
(declare-fun set269 (Bool) Bool)
(declare-fun _lbv13 () T3279)
(declare-fun shd (T3279) Int)
(declare-fun set270 (Bool) Bool)
(declare-fun _lbv14 () T3279)
(declare-fun set271 (Bool) Bool)
(declare-fun _lbv15 () T3279)
(declare-fun set272 (Bool) Bool)
(declare-fun _lbv16 () T3279)
(declare-fun set273 (Bool) Bool)
(declare-fun _lbv17 () T3279)
(declare-fun set274 (Bool) Bool)
(declare-fun _lbv18 () T3279)
(declare-fun set275 (Bool) Bool)
(declare-fun _lbv19 () T3279)
(declare-fun set276 (Bool) Bool)
(declare-fun _lbv20 () T3279)
(declare-fun v () Int)
(assert (forall ((bv0 Bool)) (= (set268 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set268 bv0))))
(assert (= (slen nil) 0))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv5))
(assert (> s _lbv6))
(assert (> s _lbv7))
(assert (= _lbv8 (- s 1)))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (or (> _lbv10 _lbv7) (= _lbv10 _lbv7)))
(assert (= |3| 3))
(assert (not (> _lbv10 |3|)))
(assert (or (> _lbv9 _lbv8) (= _lbv9 _lbv8)))
(assert (= |3| 3))
(assert (not (> _lbv9 |3|)))
(assert (or (> _lbv12 _lbv5) (= _lbv12 _lbv5)))
(assert (= |3| 3))
(assert (not (> _lbv12 |3|)))
(assert (or (> _lbv11 _lbv6) (= _lbv11 _lbv6)))
(assert (= |3| 3))
(assert (not (> _lbv11 |3|)))
(assert (forall ((bv0 Bool)) (= (set269 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv13 bv0) (set269 bv0))))
(assert (= (slen _lbv13) s))
(assert (=> (> (slen _lbv13) 0) (or (> (shd _lbv13) x0) (= (shd _lbv13) x0))))
(assert (forall ((bv0 Bool)) (= (set270 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv14 bv0) (set270 bv0))))
(assert (= (slen _lbv14) s))
(assert (=> (> (slen _lbv14) 0) (or (> (shd _lbv14) x0) (= (shd _lbv14) x0))))
(assert (forall ((bv0 Bool)) (= (set271 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv15 bv0) (set271 bv0))))
(assert (= (slen _lbv15) s))
(assert (=> (> (slen _lbv15) 0) (or (> (shd _lbv15) x0) (= (shd _lbv15) x0))))
(assert (forall ((bv0 Bool)) (= (set272 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv16 bv0) (set272 bv0))))
(assert (= (slen _lbv16) s))
(assert (=> (> (slen _lbv16) 0) (or (> (shd _lbv16) x0) (= (shd _lbv16) x0))))
(assert (forall ((bv0 Bool)) (= (set273 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv17 bv0) (set273 bv0))))
(assert (= (slen _lbv17) s))
(assert (=> (> (slen _lbv17) 0) (or (> (shd _lbv17) x0) (= (shd _lbv17) x0))))
(assert (forall ((bv0 Bool)) (= (set274 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv18 bv0) (set274 bv0))))
(assert (= (slen _lbv18) s))
(assert (=> (> (slen _lbv18) 0) (or (> (shd _lbv18) x0) (= (shd _lbv18) x0))))
(assert (forall ((bv0 Bool)) (= (set275 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv19 bv0) (set275 bv0))))
(assert (= (slen _lbv19) s))
(assert (=> (> (slen _lbv19) 0) (or (> (shd _lbv19) x0) (= (shd _lbv19) x0))))
(assert (forall ((bv0 Bool)) (= (set276 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv20 bv0) (set276 bv0))))
(assert (= (slen _lbv20) s))
(assert (=> (> (slen _lbv20) 0) (or (> (shd _lbv20) x0) (= (shd _lbv20) x0))))
(assert (or (> v s) (= v s)))
(assert (= |3| 3))
(assert (not (> v |3|)))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (or (> v s) (= v s)))
(assert (= |3| 3))
(assert (not (> v |3|)))
(assert (not true))

  Show *************** TypeChecking Succsessful {v:Ty_int | 
 	 Conj <c 
 Disj <d  v > s
 	,   v = s>d 
 	 , Negation v > 3 >c }
 Typechecking apply int_gen  (, x0 )
 Against {var_v2:Ty_int | true}
 Typechecking apply int_gen  (, x0 )
 Against {var_v2:Ty_int | true}
 Argument x0 :: {var_v3:Ty_int | true} | true                                                                                                                                                                                                                                                                                          
solver 
 (declare-sort T3321)
(declare-fun set277 (Bool) Bool)
(declare-fun slist (T3321 Bool) Bool)
(declare-fun nil () T3321)
(declare-fun slen (T3321) Int)
(declare-fun |0| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv5 () Int)
(declare-fun s () Int)
(declare-fun _lbv6 () Int)
(declare-fun _lbv7 () Int)
(declare-fun _lbv8 () Int)
(declare-fun |3| () Int)
(declare-fun _lbv10 () Int)
(declare-fun _lbv9 () Int)
(declare-fun _lbv12 () Int)
(declare-fun _lbv11 () Int)
(declare-fun set278 (Bool) Bool)
(declare-fun _lbv13 () T3321)
(declare-fun shd (T3321) Int)
(declare-fun set279 (Bool) Bool)
(declare-fun _lbv14 () T3321)
(declare-fun set280 (Bool) Bool)
(declare-fun _lbv15 () T3321)
(declare-fun set281 (Bool) Bool)
(declare-fun _lbv16 () T3321)
(declare-fun set282 (Bool) Bool)
(declare-fun _lbv17 () T3321)
(declare-fun set283 (Bool) Bool)
(declare-fun _lbv18 () T3321)
(declare-fun set284 (Bool) Bool)
(declare-fun _lbv19 () T3321)
(declare-fun set285 (Bool) Bool)
(declare-fun _lbv20 () T3321)
(declare-fun v () Int)
(assert (forall ((bv0 Bool)) (= (set277 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set277 bv0))))
(assert (= (slen nil) 0))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv5))
(assert (> s _lbv6))
(assert (> s _lbv7))
(assert (= _lbv8 (- s 1)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (or (> _lbv10 _lbv7) (= _lbv10 _lbv7)))
(assert (= |3| 3))
(assert (not (> _lbv10 |3|)))
(assert (or (> _lbv9 _lbv8) (= _lbv9 _lbv8)))
(assert (= |3| 3))
(assert (not (> _lbv9 |3|)))
(assert (or (> _lbv12 _lbv5) (= _lbv12 _lbv5)))
(assert (= |3| 3))
(assert (not (> _lbv12 |3|)))
(assert (or (> _lbv11 _lbv6) (= _lbv11 _lbv6)))
(assert (= |3| 3))
(assert (not (> _lbv11 |3|)))
(assert (forall ((bv0 Bool)) (= (set278 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv13 bv0) (set278 bv0))))
(assert (= (slen _lbv13) s))
(assert (=> (> (slen _lbv13) 0) (or (> (shd _lbv13) x0) (= (shd _lbv13) x0))))
(assert (forall ((bv0 Bool)) (= (set279 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv14 bv0) (set279 bv0))))
(assert (= (slen _lbv14) s))
(assert (=> (> (slen _lbv14) 0) (or (> (shd _lbv14) x0) (= (shd _lbv14) x0))))
(assert (forall ((bv0 Bool)) (= (set280 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv15 bv0) (set280 bv0))))
(assert (= (slen _lbv15) s))
(assert (=> (> (slen _lbv15) 0) (or (> (shd _lbv15) x0) (= (shd _lbv15) x0))))
(assert (forall ((bv0 Bool)) (= (set281 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv16 bv0) (set281 bv0))))
(assert (= (slen _lbv16) s))
(assert (=> (> (slen _lbv16) 0) (or (> (shd _lbv16) x0) (= (shd _lbv16) x0))))
(assert (forall ((bv0 Bool)) (= (set282 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv17 bv0) (set282 bv0))))
(assert (= (slen _lbv17) s))
(assert (=> (> (slen _lbv17) 0) (or (> (shd _lbv17) x0) (= (shd _lbv17) x0))))
(assert (forall ((bv0 Bool)) (= (set283 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv18 bv0) (set283 bv0))))
(assert (= (slen _lbv18) s))
(assert (=> (> (slen _lbv18) 0) (or (> (shd _lbv18) x0) (= (shd _lbv18) x0))))
(assert (forall ((bv0 Bool)) (= (set284 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv19 bv0) (set284 bv0))))
(assert (= (slen _lbv19) s))
(assert (=> (> (slen _lbv19) 0) (or (> (shd _lbv19) x0) (= (shd _lbv19) x0))))
(assert (forall ((bv0 Bool)) (= (set285 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv20 bv0) (set285 bv0))))
(assert (= (slen _lbv20) s))
(assert (=> (> (slen _lbv20) 0) (or (> (shd _lbv20) x0) (= (shd _lbv20) x0))))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> v x0) (= v x0)))
(assert (= |3| 3))
(assert (not (> v |3|)))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (or (> v x0) (= v x0)))
(assert (= |3| 3))
(assert (not (> v |3|)))
(assert (not true))

  Show *************** TypeChecking Succsessful {v:Ty_int | 
 	 Conj <c 
 Disj <d  v > x0
 	,   v = x0>d 
 	 , Negation v > 3 >c }
 Typechecking apply int_gen  (, _lbv7 )
 Against {var_v2:Ty_int | true}
 Typechecking apply int_gen  (, _lbv7 )
 Against {var_v2:Ty_int | true}
 Argument _lbv7 :: {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c } | 
 	 Conj <c true
 	 , s > _lbv7 >c                                                                                                                                                                                                                                                                                                
solver 
 (declare-sort T3363)
(declare-fun set286 (Bool) Bool)
(declare-fun slist (T3363 Bool) Bool)
(declare-fun nil () T3363)
(declare-fun slen (T3363) Int)
(declare-fun |0| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv5 () Int)
(declare-fun s () Int)
(declare-fun _lbv6 () Int)
(declare-fun _lbv7 () Int)
(declare-fun _lbv8 () Int)
(declare-fun _lbv10 () Int)
(declare-fun |3| () Int)
(declare-fun _lbv9 () Int)
(declare-fun _lbv12 () Int)
(declare-fun _lbv11 () Int)
(declare-fun set287 (Bool) Bool)
(declare-fun _lbv13 () T3363)
(declare-fun shd (T3363) Int)
(declare-fun set288 (Bool) Bool)
(declare-fun _lbv14 () T3363)
(declare-fun set289 (Bool) Bool)
(declare-fun _lbv15 () T3363)
(declare-fun set290 (Bool) Bool)
(declare-fun _lbv16 () T3363)
(declare-fun set291 (Bool) Bool)
(declare-fun _lbv17 () T3363)
(declare-fun set292 (Bool) Bool)
(declare-fun _lbv18 () T3363)
(declare-fun set293 (Bool) Bool)
(declare-fun _lbv19 () T3363)
(declare-fun set294 (Bool) Bool)
(declare-fun _lbv20 () T3363)
(declare-fun v () Int)
(assert (forall ((bv0 Bool)) (= (set286 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set286 bv0))))
(assert (= (slen nil) 0))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv5))
(assert (> s _lbv6))
(assert (> s _lbv7))
(assert (= _lbv8 (- s 1)))
(assert (or (> _lbv10 _lbv7) (= _lbv10 _lbv7)))
(assert (= |3| 3))
(assert (not (> _lbv10 |3|)))
(assert (or (> _lbv9 _lbv8) (= _lbv9 _lbv8)))
(assert (= |3| 3))
(assert (not (> _lbv9 |3|)))
(assert (or (> _lbv12 _lbv5) (= _lbv12 _lbv5)))
(assert (= |3| 3))
(assert (not (> _lbv12 |3|)))
(assert (or (> _lbv11 _lbv6) (= _lbv11 _lbv6)))
(assert (= |3| 3))
(assert (not (> _lbv11 |3|)))
(assert (forall ((bv0 Bool)) (= (set287 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv13 bv0) (set287 bv0))))
(assert (= (slen _lbv13) s))
(assert (=> (> (slen _lbv13) 0) (or (> (shd _lbv13) x0) (= (shd _lbv13) x0))))
(assert (forall ((bv0 Bool)) (= (set288 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv14 bv0) (set288 bv0))))
(assert (= (slen _lbv14) s))
(assert (=> (> (slen _lbv14) 0) (or (> (shd _lbv14) x0) (= (shd _lbv14) x0))))
(assert (forall ((bv0 Bool)) (= (set289 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv15 bv0) (set289 bv0))))
(assert (= (slen _lbv15) s))
(assert (=> (> (slen _lbv15) 0) (or (> (shd _lbv15) x0) (= (shd _lbv15) x0))))
(assert (forall ((bv0 Bool)) (= (set290 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv16 bv0) (set290 bv0))))
(assert (= (slen _lbv16) s))
(assert (=> (> (slen _lbv16) 0) (or (> (shd _lbv16) x0) (= (shd _lbv16) x0))))
(assert (forall ((bv0 Bool)) (= (set291 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv17 bv0) (set291 bv0))))
(assert (= (slen _lbv17) s))
(assert (=> (> (slen _lbv17) 0) (or (> (shd _lbv17) x0) (= (shd _lbv17) x0))))
(assert (forall ((bv0 Bool)) (= (set292 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv18 bv0) (set292 bv0))))
(assert (= (slen _lbv18) s))
(assert (=> (> (slen _lbv18) 0) (or (> (shd _lbv18) x0) (= (shd _lbv18) x0))))
(assert (forall ((bv0 Bool)) (= (set293 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv19 bv0) (set293 bv0))))
(assert (= (slen _lbv19) s))
(assert (=> (> (slen _lbv19) 0) (or (> (shd _lbv19) x0) (= (shd _lbv19) x0))))
(assert (forall ((bv0 Bool)) (= (set294 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv20 bv0) (set294 bv0))))
(assert (= (slen _lbv20) s))
(assert (=> (> (slen _lbv20) 0) (or (> (shd _lbv20) x0) (= (shd _lbv20) x0))))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (or (> v _lbv7) (= v _lbv7)))
(assert (= |3| 3))
(assert (not (> v |3|)))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv7))
(assert (or (> v _lbv7) (= v _lbv7)))
(assert (= |3| 3))
(assert (not (> v |3|)))
(assert (not true))

  Show *************** TypeChecking Succsessful {v:Ty_int | 
 	 Conj <c 
 Disj <d  v > _lbv7
 	,   v = _lbv7>d 
 	 , Negation v > 3 >c }
 Typechecking apply int_gen  (, _lbv8 )
 Against {var_v2:Ty_int | true}
 Typechecking apply int_gen  (, _lbv8 )
 Against {var_v2:Ty_int | true}
 Argument _lbv8 :: {v:Ty_int | (v) ==((s) -- (1))} | (_lbv8) ==((s) -- (1))                                                                                                                                                                                                                                                                                          
solver 
 (declare-sort T3405)
(declare-fun set295 (Bool) Bool)
(declare-fun slist (T3405 Bool) Bool)
(declare-fun nil () T3405)
(declare-fun slen (T3405) Int)
(declare-fun |0| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv5 () Int)
(declare-fun s () Int)
(declare-fun _lbv6 () Int)
(declare-fun _lbv7 () Int)
(declare-fun _lbv8 () Int)
(declare-fun _lbv9 () Int)
(declare-fun |3| () Int)
(declare-fun _lbv12 () Int)
(declare-fun _lbv11 () Int)
(declare-fun set296 (Bool) Bool)
(declare-fun _lbv13 () T3405)
(declare-fun shd (T3405) Int)
(declare-fun set297 (Bool) Bool)
(declare-fun _lbv14 () T3405)
(declare-fun set298 (Bool) Bool)
(declare-fun _lbv15 () T3405)
(declare-fun set299 (Bool) Bool)
(declare-fun _lbv16 () T3405)
(declare-fun set300 (Bool) Bool)
(declare-fun _lbv17 () T3405)
(declare-fun set301 (Bool) Bool)
(declare-fun _lbv18 () T3405)
(declare-fun set302 (Bool) Bool)
(declare-fun _lbv19 () T3405)
(declare-fun set303 (Bool) Bool)
(declare-fun _lbv20 () T3405)
(declare-fun _lbv10 () Int)
(declare-fun v () Int)
(assert (forall ((bv0 Bool)) (= (set295 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set295 bv0))))
(assert (= (slen nil) 0))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv5))
(assert (> s _lbv6))
(assert (> s _lbv7))
(assert (= _lbv8 (- s 1)))
(assert (or (> _lbv9 _lbv8) (= _lbv9 _lbv8)))
(assert (= |3| 3))
(assert (not (> _lbv9 |3|)))
(assert (or (> _lbv12 _lbv5) (= _lbv12 _lbv5)))
(assert (= |3| 3))
(assert (not (> _lbv12 |3|)))
(assert (or (> _lbv11 _lbv6) (= _lbv11 _lbv6)))
(assert (= |3| 3))
(assert (not (> _lbv11 |3|)))
(assert (forall ((bv0 Bool)) (= (set296 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv13 bv0) (set296 bv0))))
(assert (= (slen _lbv13) s))
(assert (=> (> (slen _lbv13) 0) (or (> (shd _lbv13) x0) (= (shd _lbv13) x0))))
(assert (forall ((bv0 Bool)) (= (set297 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv14 bv0) (set297 bv0))))
(assert (= (slen _lbv14) s))
(assert (=> (> (slen _lbv14) 0) (or (> (shd _lbv14) x0) (= (shd _lbv14) x0))))
(assert (forall ((bv0 Bool)) (= (set298 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv15 bv0) (set298 bv0))))
(assert (= (slen _lbv15) s))
(assert (=> (> (slen _lbv15) 0) (or (> (shd _lbv15) x0) (= (shd _lbv15) x0))))
(assert (forall ((bv0 Bool)) (= (set299 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv16 bv0) (set299 bv0))))
(assert (= (slen _lbv16) s))
(assert (=> (> (slen _lbv16) 0) (or (> (shd _lbv16) x0) (= (shd _lbv16) x0))))
(assert (forall ((bv0 Bool)) (= (set300 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv17 bv0) (set300 bv0))))
(assert (= (slen _lbv17) s))
(assert (=> (> (slen _lbv17) 0) (or (> (shd _lbv17) x0) (= (shd _lbv17) x0))))
(assert (forall ((bv0 Bool)) (= (set301 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv18 bv0) (set301 bv0))))
(assert (= (slen _lbv18) s))
(assert (=> (> (slen _lbv18) 0) (or (> (shd _lbv18) x0) (= (shd _lbv18) x0))))
(assert (forall ((bv0 Bool)) (= (set302 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv19 bv0) (set302 bv0))))
(assert (= (slen _lbv19) s))
(assert (=> (> (slen _lbv19) 0) (or (> (shd _lbv19) x0) (= (shd _lbv19) x0))))
(assert (forall ((bv0 Bool)) (= (set303 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv20 bv0) (set303 bv0))))
(assert (= (slen _lbv20) s))
(assert (=> (> (slen _lbv20) 0) (or (> (shd _lbv20) x0) (= (shd _lbv20) x0))))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (or (> _lbv10 _lbv7) (= _lbv10 _lbv7)))
(assert (= |3| 3))
(assert (not (> _lbv10 |3|)))
(assert (or (> v _lbv8) (= v _lbv8)))
(assert (= |3| 3))
(assert (not (> v |3|)))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (= _lbv8 (- s 1)))
(assert (or (> v _lbv8) (= v _lbv8)))
(assert (= |3| 3))
(assert (not (> v |3|)))
(assert (not true))

  Show *************** TypeChecking Succsessful {v:Ty_int | 
 	 Conj <c 
 Disj <d  v > _lbv8
 	,   v = _lbv8>d 
 	 , Negation v > 3 >c }
 Typechecking apply int_gen  (, _lbv5 )
 Against {var_v2:Ty_int | true}
 Typechecking apply int_gen  (, _lbv5 )
 Against {var_v2:Ty_int | true}
 Argument _lbv5 :: {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c } | 
 	 Conj <c true
 	 , s > _lbv5 >c                                                                                                                                                                                                                                                                                                
solver 
 (declare-sort T3447)
(declare-fun set304 (Bool) Bool)
(declare-fun slist (T3447 Bool) Bool)
(declare-fun nil () T3447)
(declare-fun slen (T3447) Int)
(declare-fun |0| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv5 () Int)
(declare-fun s () Int)
(declare-fun _lbv6 () Int)
(declare-fun _lbv7 () Int)
(declare-fun _lbv8 () Int)
(declare-fun _lbv12 () Int)
(declare-fun |3| () Int)
(declare-fun _lbv11 () Int)
(declare-fun set305 (Bool) Bool)
(declare-fun _lbv13 () T3447)
(declare-fun shd (T3447) Int)
(declare-fun set306 (Bool) Bool)
(declare-fun _lbv14 () T3447)
(declare-fun set307 (Bool) Bool)
(declare-fun _lbv15 () T3447)
(declare-fun set308 (Bool) Bool)
(declare-fun _lbv16 () T3447)
(declare-fun set309 (Bool) Bool)
(declare-fun _lbv17 () T3447)
(declare-fun set310 (Bool) Bool)
(declare-fun _lbv18 () T3447)
(declare-fun set311 (Bool) Bool)
(declare-fun _lbv19 () T3447)
(declare-fun set312 (Bool) Bool)
(declare-fun _lbv20 () T3447)
(declare-fun _lbv10 () Int)
(declare-fun _lbv9 () Int)
(declare-fun v () Int)
(assert (forall ((bv0 Bool)) (= (set304 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set304 bv0))))
(assert (= (slen nil) 0))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv5))
(assert (> s _lbv6))
(assert (> s _lbv7))
(assert (= _lbv8 (- s 1)))
(assert (or (> _lbv12 _lbv5) (= _lbv12 _lbv5)))
(assert (= |3| 3))
(assert (not (> _lbv12 |3|)))
(assert (or (> _lbv11 _lbv6) (= _lbv11 _lbv6)))
(assert (= |3| 3))
(assert (not (> _lbv11 |3|)))
(assert (forall ((bv0 Bool)) (= (set305 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv13 bv0) (set305 bv0))))
(assert (= (slen _lbv13) s))
(assert (=> (> (slen _lbv13) 0) (or (> (shd _lbv13) x0) (= (shd _lbv13) x0))))
(assert (forall ((bv0 Bool)) (= (set306 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv14 bv0) (set306 bv0))))
(assert (= (slen _lbv14) s))
(assert (=> (> (slen _lbv14) 0) (or (> (shd _lbv14) x0) (= (shd _lbv14) x0))))
(assert (forall ((bv0 Bool)) (= (set307 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv15 bv0) (set307 bv0))))
(assert (= (slen _lbv15) s))
(assert (=> (> (slen _lbv15) 0) (or (> (shd _lbv15) x0) (= (shd _lbv15) x0))))
(assert (forall ((bv0 Bool)) (= (set308 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv16 bv0) (set308 bv0))))
(assert (= (slen _lbv16) s))
(assert (=> (> (slen _lbv16) 0) (or (> (shd _lbv16) x0) (= (shd _lbv16) x0))))
(assert (forall ((bv0 Bool)) (= (set309 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv17 bv0) (set309 bv0))))
(assert (= (slen _lbv17) s))
(assert (=> (> (slen _lbv17) 0) (or (> (shd _lbv17) x0) (= (shd _lbv17) x0))))
(assert (forall ((bv0 Bool)) (= (set310 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv18 bv0) (set310 bv0))))
(assert (= (slen _lbv18) s))
(assert (=> (> (slen _lbv18) 0) (or (> (shd _lbv18) x0) (= (shd _lbv18) x0))))
(assert (forall ((bv0 Bool)) (= (set311 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv19 bv0) (set311 bv0))))
(assert (= (slen _lbv19) s))
(assert (=> (> (slen _lbv19) 0) (or (> (shd _lbv19) x0) (= (shd _lbv19) x0))))
(assert (forall ((bv0 Bool)) (= (set312 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv20 bv0) (set312 bv0))))
(assert (= (slen _lbv20) s))
(assert (=> (> (slen _lbv20) 0) (or (> (shd _lbv20) x0) (= (shd _lbv20) x0))))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (or (> _lbv10 _lbv7) (= _lbv10 _lbv7)))
(assert (= |3| 3))
(assert (not (> _lbv10 |3|)))
(assert (or (> _lbv9 _lbv8) (= _lbv9 _lbv8)))
(assert (= |3| 3))
(assert (not (> _lbv9 |3|)))
(assert (or (> v _lbv5) (= v _lbv5)))
(assert (= |3| 3))
(assert (not (> v |3|)))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv5))
(assert (or (> v _lbv5) (= v _lbv5)))
(assert (= |3| 3))
(assert (not (> v |3|)))
(assert (not true))

  Show *************** TypeChecking Succsessful {v:Ty_int | 
 	 Conj <c 
 Disj <d  v > _lbv5
 	,   v = _lbv5>d 
 	 , Negation v > 3 >c }
 Typechecking apply int_gen  (, _lbv6 )
 Against {var_v2:Ty_int | true}
 Typechecking apply int_gen  (, _lbv6 )
 Against {var_v2:Ty_int | true}
 Argument _lbv6 :: {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c } | 
 	 Conj <c true
 	 , s > _lbv6 >c                                                                                                                                                                                                                                                                                                
solver 
 (declare-sort T3489)
(declare-fun set313 (Bool) Bool)
(declare-fun slist (T3489 Bool) Bool)
(declare-fun nil () T3489)
(declare-fun slen (T3489) Int)
(declare-fun |0| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv5 () Int)
(declare-fun s () Int)
(declare-fun _lbv6 () Int)
(declare-fun _lbv7 () Int)
(declare-fun _lbv8 () Int)
(declare-fun _lbv11 () Int)
(declare-fun |3| () Int)
(declare-fun set314 (Bool) Bool)
(declare-fun _lbv13 () T3489)
(declare-fun shd (T3489) Int)
(declare-fun set315 (Bool) Bool)
(declare-fun _lbv14 () T3489)
(declare-fun set316 (Bool) Bool)
(declare-fun _lbv15 () T3489)
(declare-fun set317 (Bool) Bool)
(declare-fun _lbv16 () T3489)
(declare-fun set318 (Bool) Bool)
(declare-fun _lbv17 () T3489)
(declare-fun set319 (Bool) Bool)
(declare-fun _lbv18 () T3489)
(declare-fun set320 (Bool) Bool)
(declare-fun _lbv19 () T3489)
(declare-fun set321 (Bool) Bool)
(declare-fun _lbv20 () T3489)
(declare-fun _lbv10 () Int)
(declare-fun _lbv9 () Int)
(declare-fun _lbv12 () Int)
(declare-fun v () Int)
(assert (forall ((bv0 Bool)) (= (set313 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set313 bv0))))
(assert (= (slen nil) 0))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv5))
(assert (> s _lbv6))
(assert (> s _lbv7))
(assert (= _lbv8 (- s 1)))
(assert (or (> _lbv11 _lbv6) (= _lbv11 _lbv6)))
(assert (= |3| 3))
(assert (not (> _lbv11 |3|)))
(assert (forall ((bv0 Bool)) (= (set314 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv13 bv0) (set314 bv0))))
(assert (= (slen _lbv13) s))
(assert (=> (> (slen _lbv13) 0) (or (> (shd _lbv13) x0) (= (shd _lbv13) x0))))
(assert (forall ((bv0 Bool)) (= (set315 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv14 bv0) (set315 bv0))))
(assert (= (slen _lbv14) s))
(assert (=> (> (slen _lbv14) 0) (or (> (shd _lbv14) x0) (= (shd _lbv14) x0))))
(assert (forall ((bv0 Bool)) (= (set316 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv15 bv0) (set316 bv0))))
(assert (= (slen _lbv15) s))
(assert (=> (> (slen _lbv15) 0) (or (> (shd _lbv15) x0) (= (shd _lbv15) x0))))
(assert (forall ((bv0 Bool)) (= (set317 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv16 bv0) (set317 bv0))))
(assert (= (slen _lbv16) s))
(assert (=> (> (slen _lbv16) 0) (or (> (shd _lbv16) x0) (= (shd _lbv16) x0))))
(assert (forall ((bv0 Bool)) (= (set318 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv17 bv0) (set318 bv0))))
(assert (= (slen _lbv17) s))
(assert (=> (> (slen _lbv17) 0) (or (> (shd _lbv17) x0) (= (shd _lbv17) x0))))
(assert (forall ((bv0 Bool)) (= (set319 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv18 bv0) (set319 bv0))))
(assert (= (slen _lbv18) s))
(assert (=> (> (slen _lbv18) 0) (or (> (shd _lbv18) x0) (= (shd _lbv18) x0))))
(assert (forall ((bv0 Bool)) (= (set320 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv19 bv0) (set320 bv0))))
(assert (= (slen _lbv19) s))
(assert (=> (> (slen _lbv19) 0) (or (> (shd _lbv19) x0) (= (shd _lbv19) x0))))
(assert (forall ((bv0 Bool)) (= (set321 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv20 bv0) (set321 bv0))))
(assert (= (slen _lbv20) s))
(assert (=> (> (slen _lbv20) 0) (or (> (shd _lbv20) x0) (= (shd _lbv20) x0))))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (or (> _lbv10 _lbv7) (= _lbv10 _lbv7)))
(assert (= |3| 3))
(assert (not (> _lbv10 |3|)))
(assert (or (> _lbv9 _lbv8) (= _lbv9 _lbv8)))
(assert (= |3| 3))
(assert (not (> _lbv9 |3|)))
(assert (or (> _lbv12 _lbv5) (= _lbv12 _lbv5)))
(assert (= |3| 3))
(assert (not (> _lbv12 |3|)))
(assert (or (> v _lbv6) (= v _lbv6)))
(assert (= |3| 3))
(assert (not (> v |3|)))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv6))
(assert (or (> v _lbv6) (= v _lbv6)))
(assert (= |3| 3))
(assert (not (> v |3|)))
(assert (not true))

  Show *************** TypeChecking Succsessful {v:Ty_int | 
 	 Conj <c 
 Disj <d  v > _lbv6
 	,   v = _lbv6>d 
 	 , Negation v > 3 >c }
 ##################################################################################
  Synthesizing the 2th argument for Function cons
  Trying Arguments in Scalars 
 esynthesizeScalar for {v:Ty_alphalist | (slist)(v) = (true)}
  Enumeration for 
 spec 
 {v:Ty_alphalist | (slist)(v) = (true)}
 
 Enumerating a Scalar Term nil
 
 Type of the Scalar Term {v:Ty_alphalist | 
 	 Conj <c (slist)(v) = (true)
 	 , (slen)(v) ==(0) >c }                                                                                                                                                                                                                                                              
solver 
 (declare-sort T3532)
(declare-fun |0| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv5 () Int)
(declare-fun s () Int)
(declare-fun _lbv6 () Int)
(declare-fun _lbv7 () Int)
(declare-fun _lbv8 () Int)
(declare-fun set322 (Bool) Bool)
(declare-fun slist (T3532 Bool) Bool)
(declare-fun _lbv13 () T3532)
(declare-fun slen (T3532) Int)
(declare-fun shd (T3532) Int)
(declare-fun set323 (Bool) Bool)
(declare-fun _lbv14 () T3532)
(declare-fun set324 (Bool) Bool)
(declare-fun _lbv15 () T3532)
(declare-fun set325 (Bool) Bool)
(declare-fun _lbv16 () T3532)
(declare-fun set326 (Bool) Bool)
(declare-fun _lbv17 () T3532)
(declare-fun set327 (Bool) Bool)
(declare-fun _lbv18 () T3532)
(declare-fun set328 (Bool) Bool)
(declare-fun _lbv19 () T3532)
(declare-fun set329 (Bool) Bool)
(declare-fun _lbv20 () T3532)
(declare-fun |3| () Int)
(declare-fun _lbv10 () Int)
(declare-fun _lbv9 () Int)
(declare-fun _lbv12 () Int)
(declare-fun _lbv11 () Int)
(declare-fun set330 (Bool) Bool)
(declare-fun nil () T3532)
(declare-fun set331 (Bool) Bool)
(declare-fun set332 (Bool) Bool)
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv5))
(assert (> s _lbv6))
(assert (> s _lbv7))
(assert (= _lbv8 (- s 1)))
(assert (forall ((bv0 Bool)) (= (set322 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv13 bv0) (set322 bv0))))
(assert (= (slen _lbv13) s))
(assert (=> (> (slen _lbv13) 0) (or (> (shd _lbv13) x0) (= (shd _lbv13) x0))))
(assert (forall ((bv0 Bool)) (= (set323 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv14 bv0) (set323 bv0))))
(assert (= (slen _lbv14) s))
(assert (=> (> (slen _lbv14) 0) (or (> (shd _lbv14) x0) (= (shd _lbv14) x0))))
(assert (forall ((bv0 Bool)) (= (set324 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv15 bv0) (set324 bv0))))
(assert (= (slen _lbv15) s))
(assert (=> (> (slen _lbv15) 0) (or (> (shd _lbv15) x0) (= (shd _lbv15) x0))))
(assert (forall ((bv0 Bool)) (= (set325 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv16 bv0) (set325 bv0))))
(assert (= (slen _lbv16) s))
(assert (=> (> (slen _lbv16) 0) (or (> (shd _lbv16) x0) (= (shd _lbv16) x0))))
(assert (forall ((bv0 Bool)) (= (set326 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv17 bv0) (set326 bv0))))
(assert (= (slen _lbv17) s))
(assert (=> (> (slen _lbv17) 0) (or (> (shd _lbv17) x0) (= (shd _lbv17) x0))))
(assert (forall ((bv0 Bool)) (= (set327 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv18 bv0) (set327 bv0))))
(assert (= (slen _lbv18) s))
(assert (=> (> (slen _lbv18) 0) (or (> (shd _lbv18) x0) (= (shd _lbv18) x0))))
(assert (forall ((bv0 Bool)) (= (set328 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv19 bv0) (set328 bv0))))
(assert (= (slen _lbv19) s))
(assert (=> (> (slen _lbv19) 0) (or (> (shd _lbv19) x0) (= (shd _lbv19) x0))))
(assert (forall ((bv0 Bool)) (= (set329 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv20 bv0) (set329 bv0))))
(assert (= (slen _lbv20) s))
(assert (=> (> (slen _lbv20) 0) (or (> (shd _lbv20) x0) (= (shd _lbv20) x0))))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (or (> _lbv10 _lbv7) (= _lbv10 _lbv7)))
(assert (= |3| 3))
(assert (not (> _lbv10 |3|)))
(assert (or (> _lbv9 _lbv8) (= _lbv9 _lbv8)))
(assert (= |3| 3))
(assert (not (> _lbv9 |3|)))
(assert (or (> _lbv12 _lbv5) (= _lbv12 _lbv5)))
(assert (= |3| 3))
(assert (not (> _lbv12 |3|)))
(assert (or (> _lbv11 _lbv6) (= _lbv11 _lbv6)))
(assert (= |3| 3))
(assert (not (> _lbv11 |3|)))
(assert (forall ((bv0 Bool)) (= (set330 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set330 bv0))))
(assert (= (slen nil) 0))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (forall ((bv0 Bool)) (= (set331 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set331 bv0))))
(assert (= (slen nil) 0))
(assert (forall ((bv0 Bool)) (= (set332 bv0) (and (= bv0 true)))))
(assert (not (forall ((bv0 Bool)) (= (slist nil bv0) (set332 bv0)))))

 
 Timeout the subtype check T_vi <: T_goal
 
 Enumerating a Scalar Term _lbv13
 
 Type of the Scalar Term {v:Ty_alphalist | 
 	 Conj <c (slist)(v) = (true)
 	 , 
 	 Conj <c (slen)(v) ==(s)
 	 , 
 	 Impl < (slen)(v) > (0)
 	 
 Disj <d  (shd)(v) > (x0)
 	,   (shd)(v) ==(x0)>d  > >c  >c }                                                                                                                                                                                                                                                              
solver 
 (declare-sort T3573)
(declare-fun set333 (Bool) Bool)
(declare-fun slist (T3573 Bool) Bool)
(declare-fun nil () T3573)
(declare-fun slen (T3573) Int)
(declare-fun |0| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv5 () Int)
(declare-fun s () Int)
(declare-fun _lbv6 () Int)
(declare-fun _lbv7 () Int)
(declare-fun _lbv8 () Int)
(declare-fun set334 (Bool) Bool)
(declare-fun _lbv14 () T3573)
(declare-fun shd (T3573) Int)
(declare-fun set335 (Bool) Bool)
(declare-fun _lbv15 () T3573)
(declare-fun set336 (Bool) Bool)
(declare-fun _lbv16 () T3573)
(declare-fun set337 (Bool) Bool)
(declare-fun _lbv17 () T3573)
(declare-fun set338 (Bool) Bool)
(declare-fun _lbv18 () T3573)
(declare-fun set339 (Bool) Bool)
(declare-fun _lbv19 () T3573)
(declare-fun set340 (Bool) Bool)
(declare-fun _lbv20 () T3573)
(declare-fun |3| () Int)
(declare-fun _lbv10 () Int)
(declare-fun _lbv9 () Int)
(declare-fun _lbv12 () Int)
(declare-fun _lbv11 () Int)
(declare-fun set341 (Bool) Bool)
(declare-fun _lbv13 () T3573)
(declare-fun set342 (Bool) Bool)
(declare-fun set343 (Bool) Bool)
(assert (forall ((bv0 Bool)) (= (set333 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set333 bv0))))
(assert (= (slen nil) 0))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv5))
(assert (> s _lbv6))
(assert (> s _lbv7))
(assert (= _lbv8 (- s 1)))
(assert (forall ((bv0 Bool)) (= (set334 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv14 bv0) (set334 bv0))))
(assert (= (slen _lbv14) s))
(assert (=> (> (slen _lbv14) 0) (or (> (shd _lbv14) x0) (= (shd _lbv14) x0))))
(assert (forall ((bv0 Bool)) (= (set335 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv15 bv0) (set335 bv0))))
(assert (= (slen _lbv15) s))
(assert (=> (> (slen _lbv15) 0) (or (> (shd _lbv15) x0) (= (shd _lbv15) x0))))
(assert (forall ((bv0 Bool)) (= (set336 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv16 bv0) (set336 bv0))))
(assert (= (slen _lbv16) s))
(assert (=> (> (slen _lbv16) 0) (or (> (shd _lbv16) x0) (= (shd _lbv16) x0))))
(assert (forall ((bv0 Bool)) (= (set337 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv17 bv0) (set337 bv0))))
(assert (= (slen _lbv17) s))
(assert (=> (> (slen _lbv17) 0) (or (> (shd _lbv17) x0) (= (shd _lbv17) x0))))
(assert (forall ((bv0 Bool)) (= (set338 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv18 bv0) (set338 bv0))))
(assert (= (slen _lbv18) s))
(assert (=> (> (slen _lbv18) 0) (or (> (shd _lbv18) x0) (= (shd _lbv18) x0))))
(assert (forall ((bv0 Bool)) (= (set339 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv19 bv0) (set339 bv0))))
(assert (= (slen _lbv19) s))
(assert (=> (> (slen _lbv19) 0) (or (> (shd _lbv19) x0) (= (shd _lbv19) x0))))
(assert (forall ((bv0 Bool)) (= (set340 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv20 bv0) (set340 bv0))))
(assert (= (slen _lbv20) s))
(assert (=> (> (slen _lbv20) 0) (or (> (shd _lbv20) x0) (= (shd _lbv20) x0))))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (or (> _lbv10 _lbv7) (= _lbv10 _lbv7)))
(assert (= |3| 3))
(assert (not (> _lbv10 |3|)))
(assert (or (> _lbv9 _lbv8) (= _lbv9 _lbv8)))
(assert (= |3| 3))
(assert (not (> _lbv9 |3|)))
(assert (or (> _lbv12 _lbv5) (= _lbv12 _lbv5)))
(assert (= |3| 3))
(assert (not (> _lbv12 |3|)))
(assert (or (> _lbv11 _lbv6) (= _lbv11 _lbv6)))
(assert (= |3| 3))
(assert (not (> _lbv11 |3|)))
(assert (forall ((bv0 Bool)) (= (set341 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv13 bv0) (set341 bv0))))
(assert (= (slen _lbv13) s))
(assert (=> (> (slen _lbv13) 0) (or (> (shd _lbv13) x0) (= (shd _lbv13) x0))))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (forall ((bv0 Bool)) (= (set342 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv13 bv0) (set342 bv0))))
(assert (= (slen _lbv13) s))
(assert (=> (> (slen _lbv13) 0) (or (> (shd _lbv13) x0) (= (shd _lbv13) x0))))
(assert (forall ((bv0 Bool)) (= (set343 bv0) (and (= bv0 true)))))
(assert (not (forall ((bv0 Bool)) (= (slist _lbv13 bv0) (set343 bv0)))))

 
 Timedout the subtype check T_vi <: T_goal
 
 Enumerating a Scalar Term _lbv14
 
 Type of the Scalar Term {v:Ty_alphalist | 
 	 Conj <c (slist)(v) = (true)
 	 , 
 	 Conj <c (slen)(v) ==(s)
 	 , 
 	 Impl < (slen)(v) > (0)
 	 
 Disj <d  (shd)(v) > (x0)
 	,   (shd)(v) ==(x0)>d  > >c  >c }                                                                                                                                                                                                                                                              
solver 
 (declare-sort T3615)
(declare-fun set344 (Bool) Bool)
(declare-fun slist (T3615 Bool) Bool)
(declare-fun nil () T3615)
(declare-fun slen (T3615) Int)
(declare-fun |0| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv5 () Int)
(declare-fun s () Int)
(declare-fun _lbv6 () Int)
(declare-fun _lbv7 () Int)
(declare-fun _lbv8 () Int)
(declare-fun set345 (Bool) Bool)
(declare-fun _lbv13 () T3615)
(declare-fun shd (T3615) Int)
(declare-fun set346 (Bool) Bool)
(declare-fun _lbv15 () T3615)
(declare-fun set347 (Bool) Bool)
(declare-fun _lbv16 () T3615)
(declare-fun set348 (Bool) Bool)
(declare-fun _lbv17 () T3615)
(declare-fun set349 (Bool) Bool)
(declare-fun _lbv18 () T3615)
(declare-fun set350 (Bool) Bool)
(declare-fun _lbv19 () T3615)
(declare-fun set351 (Bool) Bool)
(declare-fun _lbv20 () T3615)
(declare-fun |3| () Int)
(declare-fun _lbv10 () Int)
(declare-fun _lbv9 () Int)
(declare-fun _lbv12 () Int)
(declare-fun _lbv11 () Int)
(declare-fun set352 (Bool) Bool)
(declare-fun _lbv14 () T3615)
(declare-fun set353 (Bool) Bool)
(declare-fun set354 (Bool) Bool)
(assert (forall ((bv0 Bool)) (= (set344 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set344 bv0))))
(assert (= (slen nil) 0))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv5))
(assert (> s _lbv6))
(assert (> s _lbv7))
(assert (= _lbv8 (- s 1)))
(assert (forall ((bv0 Bool)) (= (set345 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv13 bv0) (set345 bv0))))
(assert (= (slen _lbv13) s))
(assert (=> (> (slen _lbv13) 0) (or (> (shd _lbv13) x0) (= (shd _lbv13) x0))))
(assert (forall ((bv0 Bool)) (= (set346 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv15 bv0) (set346 bv0))))
(assert (= (slen _lbv15) s))
(assert (=> (> (slen _lbv15) 0) (or (> (shd _lbv15) x0) (= (shd _lbv15) x0))))
(assert (forall ((bv0 Bool)) (= (set347 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv16 bv0) (set347 bv0))))
(assert (= (slen _lbv16) s))
(assert (=> (> (slen _lbv16) 0) (or (> (shd _lbv16) x0) (= (shd _lbv16) x0))))
(assert (forall ((bv0 Bool)) (= (set348 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv17 bv0) (set348 bv0))))
(assert (= (slen _lbv17) s))
(assert (=> (> (slen _lbv17) 0) (or (> (shd _lbv17) x0) (= (shd _lbv17) x0))))
(assert (forall ((bv0 Bool)) (= (set349 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv18 bv0) (set349 bv0))))
(assert (= (slen _lbv18) s))
(assert (=> (> (slen _lbv18) 0) (or (> (shd _lbv18) x0) (= (shd _lbv18) x0))))
(assert (forall ((bv0 Bool)) (= (set350 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv19 bv0) (set350 bv0))))
(assert (= (slen _lbv19) s))
(assert (=> (> (slen _lbv19) 0) (or (> (shd _lbv19) x0) (= (shd _lbv19) x0))))
(assert (forall ((bv0 Bool)) (= (set351 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv20 bv0) (set351 bv0))))
(assert (= (slen _lbv20) s))
(assert (=> (> (slen _lbv20) 0) (or (> (shd _lbv20) x0) (= (shd _lbv20) x0))))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (or (> _lbv10 _lbv7) (= _lbv10 _lbv7)))
(assert (= |3| 3))
(assert (not (> _lbv10 |3|)))
(assert (or (> _lbv9 _lbv8) (= _lbv9 _lbv8)))
(assert (= |3| 3))
(assert (not (> _lbv9 |3|)))
(assert (or (> _lbv12 _lbv5) (= _lbv12 _lbv5)))
(assert (= |3| 3))
(assert (not (> _lbv12 |3|)))
(assert (or (> _lbv11 _lbv6) (= _lbv11 _lbv6)))
(assert (= |3| 3))
(assert (not (> _lbv11 |3|)))
(assert (forall ((bv0 Bool)) (= (set352 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv14 bv0) (set352 bv0))))
(assert (= (slen _lbv14) s))
(assert (=> (> (slen _lbv14) 0) (or (> (shd _lbv14) x0) (= (shd _lbv14) x0))))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (forall ((bv0 Bool)) (= (set353 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv14 bv0) (set353 bv0))))
(assert (= (slen _lbv14) s))
(assert (=> (> (slen _lbv14) 0) (or (> (shd _lbv14) x0) (= (shd _lbv14) x0))))
(assert (forall ((bv0 Bool)) (= (set354 bv0) (and (= bv0 true)))))
(assert (not (forall ((bv0 Bool)) (= (slist _lbv14 bv0) (set354 bv0)))))

 
 Timedout the subtype check T_vi <: T_goal
 
 Enumerating a Scalar Term _lbv15
 
 Type of the Scalar Term {v:Ty_alphalist | 
 	 Conj <c (slist)(v) = (true)
 	 , 
 	 Conj <c (slen)(v) ==(s)
 	 , 
 	 Impl < (slen)(v) > (0)
 	 
 Disj <d  (shd)(v) > (x0)
 	,   (shd)(v) ==(x0)>d  > >c  >c }                                                                                                                                                                                                                                                              
solver 
 (declare-sort T3657)
(declare-fun set355 (Bool) Bool)
(declare-fun slist (T3657 Bool) Bool)
(declare-fun nil () T3657)
(declare-fun slen (T3657) Int)
(declare-fun |0| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv5 () Int)
(declare-fun s () Int)
(declare-fun _lbv6 () Int)
(declare-fun _lbv7 () Int)
(declare-fun _lbv8 () Int)
(declare-fun set356 (Bool) Bool)
(declare-fun _lbv13 () T3657)
(declare-fun shd (T3657) Int)
(declare-fun set357 (Bool) Bool)
(declare-fun _lbv14 () T3657)
(declare-fun set358 (Bool) Bool)
(declare-fun _lbv16 () T3657)
(declare-fun set359 (Bool) Bool)
(declare-fun _lbv17 () T3657)
(declare-fun set360 (Bool) Bool)
(declare-fun _lbv18 () T3657)
(declare-fun set361 (Bool) Bool)
(declare-fun _lbv19 () T3657)
(declare-fun set362 (Bool) Bool)
(declare-fun _lbv20 () T3657)
(declare-fun |3| () Int)
(declare-fun _lbv10 () Int)
(declare-fun _lbv9 () Int)
(declare-fun _lbv12 () Int)
(declare-fun _lbv11 () Int)
(declare-fun set363 (Bool) Bool)
(declare-fun _lbv15 () T3657)
(declare-fun set364 (Bool) Bool)
(declare-fun set365 (Bool) Bool)
(assert (forall ((bv0 Bool)) (= (set355 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set355 bv0))))
(assert (= (slen nil) 0))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv5))
(assert (> s _lbv6))
(assert (> s _lbv7))
(assert (= _lbv8 (- s 1)))
(assert (forall ((bv0 Bool)) (= (set356 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv13 bv0) (set356 bv0))))
(assert (= (slen _lbv13) s))
(assert (=> (> (slen _lbv13) 0) (or (> (shd _lbv13) x0) (= (shd _lbv13) x0))))
(assert (forall ((bv0 Bool)) (= (set357 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv14 bv0) (set357 bv0))))
(assert (= (slen _lbv14) s))
(assert (=> (> (slen _lbv14) 0) (or (> (shd _lbv14) x0) (= (shd _lbv14) x0))))
(assert (forall ((bv0 Bool)) (= (set358 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv16 bv0) (set358 bv0))))
(assert (= (slen _lbv16) s))
(assert (=> (> (slen _lbv16) 0) (or (> (shd _lbv16) x0) (= (shd _lbv16) x0))))
(assert (forall ((bv0 Bool)) (= (set359 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv17 bv0) (set359 bv0))))
(assert (= (slen _lbv17) s))
(assert (=> (> (slen _lbv17) 0) (or (> (shd _lbv17) x0) (= (shd _lbv17) x0))))
(assert (forall ((bv0 Bool)) (= (set360 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv18 bv0) (set360 bv0))))
(assert (= (slen _lbv18) s))
(assert (=> (> (slen _lbv18) 0) (or (> (shd _lbv18) x0) (= (shd _lbv18) x0))))
(assert (forall ((bv0 Bool)) (= (set361 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv19 bv0) (set361 bv0))))
(assert (= (slen _lbv19) s))
(assert (=> (> (slen _lbv19) 0) (or (> (shd _lbv19) x0) (= (shd _lbv19) x0))))
(assert (forall ((bv0 Bool)) (= (set362 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv20 bv0) (set362 bv0))))
(assert (= (slen _lbv20) s))
(assert (=> (> (slen _lbv20) 0) (or (> (shd _lbv20) x0) (= (shd _lbv20) x0))))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (or (> _lbv10 _lbv7) (= _lbv10 _lbv7)))
(assert (= |3| 3))
(assert (not (> _lbv10 |3|)))
(assert (or (> _lbv9 _lbv8) (= _lbv9 _lbv8)))
(assert (= |3| 3))
(assert (not (> _lbv9 |3|)))
(assert (or (> _lbv12 _lbv5) (= _lbv12 _lbv5)))
(assert (= |3| 3))
(assert (not (> _lbv12 |3|)))
(assert (or (> _lbv11 _lbv6) (= _lbv11 _lbv6)))
(assert (= |3| 3))
(assert (not (> _lbv11 |3|)))
(assert (forall ((bv0 Bool)) (= (set363 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv15 bv0) (set363 bv0))))
(assert (= (slen _lbv15) s))
(assert (=> (> (slen _lbv15) 0) (or (> (shd _lbv15) x0) (= (shd _lbv15) x0))))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (forall ((bv0 Bool)) (= (set364 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv15 bv0) (set364 bv0))))
(assert (= (slen _lbv15) s))
(assert (=> (> (slen _lbv15) 0) (or (> (shd _lbv15) x0) (= (shd _lbv15) x0))))
(assert (forall ((bv0 Bool)) (= (set365 bv0) (and (= bv0 true)))))
(assert (not (forall ((bv0 Bool)) (= (slist _lbv15 bv0) (set365 bv0)))))

 
 Timedout the subtype check T_vi <: T_goal
 
 Enumerating a Scalar Term _lbv16
 
 Type of the Scalar Term {v:Ty_alphalist | 
 	 Conj <c (slist)(v) = (true)
 	 , 
 	 Conj <c (slen)(v) ==(s)
 	 , 
 	 Impl < (slen)(v) > (0)
 	 
 Disj <d  (shd)(v) > (x0)
 	,   (shd)(v) ==(x0)>d  > >c  >c }                                                                                                                                                                                                                                                              
solver 
 (declare-sort T3699)
(declare-fun set366 (Bool) Bool)
(declare-fun slist (T3699 Bool) Bool)
(declare-fun nil () T3699)
(declare-fun slen (T3699) Int)
(declare-fun |0| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv5 () Int)
(declare-fun s () Int)
(declare-fun _lbv6 () Int)
(declare-fun _lbv7 () Int)
(declare-fun _lbv8 () Int)
(declare-fun set367 (Bool) Bool)
(declare-fun _lbv13 () T3699)
(declare-fun shd (T3699) Int)
(declare-fun set368 (Bool) Bool)
(declare-fun _lbv14 () T3699)
(declare-fun set369 (Bool) Bool)
(declare-fun _lbv15 () T3699)
(declare-fun set370 (Bool) Bool)
(declare-fun _lbv17 () T3699)
(declare-fun set371 (Bool) Bool)
(declare-fun _lbv18 () T3699)
(declare-fun set372 (Bool) Bool)
(declare-fun _lbv19 () T3699)
(declare-fun set373 (Bool) Bool)
(declare-fun _lbv20 () T3699)
(declare-fun |3| () Int)
(declare-fun _lbv10 () Int)
(declare-fun _lbv9 () Int)
(declare-fun _lbv12 () Int)
(declare-fun _lbv11 () Int)
(declare-fun set374 (Bool) Bool)
(declare-fun _lbv16 () T3699)
(declare-fun set375 (Bool) Bool)
(declare-fun set376 (Bool) Bool)
(assert (forall ((bv0 Bool)) (= (set366 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set366 bv0))))
(assert (= (slen nil) 0))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv5))
(assert (> s _lbv6))
(assert (> s _lbv7))
(assert (= _lbv8 (- s 1)))
(assert (forall ((bv0 Bool)) (= (set367 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv13 bv0) (set367 bv0))))
(assert (= (slen _lbv13) s))
(assert (=> (> (slen _lbv13) 0) (or (> (shd _lbv13) x0) (= (shd _lbv13) x0))))
(assert (forall ((bv0 Bool)) (= (set368 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv14 bv0) (set368 bv0))))
(assert (= (slen _lbv14) s))
(assert (=> (> (slen _lbv14) 0) (or (> (shd _lbv14) x0) (= (shd _lbv14) x0))))
(assert (forall ((bv0 Bool)) (= (set369 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv15 bv0) (set369 bv0))))
(assert (= (slen _lbv15) s))
(assert (=> (> (slen _lbv15) 0) (or (> (shd _lbv15) x0) (= (shd _lbv15) x0))))
(assert (forall ((bv0 Bool)) (= (set370 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv17 bv0) (set370 bv0))))
(assert (= (slen _lbv17) s))
(assert (=> (> (slen _lbv17) 0) (or (> (shd _lbv17) x0) (= (shd _lbv17) x0))))
(assert (forall ((bv0 Bool)) (= (set371 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv18 bv0) (set371 bv0))))
(assert (= (slen _lbv18) s))
(assert (=> (> (slen _lbv18) 0) (or (> (shd _lbv18) x0) (= (shd _lbv18) x0))))
(assert (forall ((bv0 Bool)) (= (set372 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv19 bv0) (set372 bv0))))
(assert (= (slen _lbv19) s))
(assert (=> (> (slen _lbv19) 0) (or (> (shd _lbv19) x0) (= (shd _lbv19) x0))))
(assert (forall ((bv0 Bool)) (= (set373 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv20 bv0) (set373 bv0))))
(assert (= (slen _lbv20) s))
(assert (=> (> (slen _lbv20) 0) (or (> (shd _lbv20) x0) (= (shd _lbv20) x0))))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (or (> _lbv10 _lbv7) (= _lbv10 _lbv7)))
(assert (= |3| 3))
(assert (not (> _lbv10 |3|)))
(assert (or (> _lbv9 _lbv8) (= _lbv9 _lbv8)))
(assert (= |3| 3))
(assert (not (> _lbv9 |3|)))
(assert (or (> _lbv12 _lbv5) (= _lbv12 _lbv5)))
(assert (= |3| 3))
(assert (not (> _lbv12 |3|)))
(assert (or (> _lbv11 _lbv6) (= _lbv11 _lbv6)))
(assert (= |3| 3))
(assert (not (> _lbv11 |3|)))
(assert (forall ((bv0 Bool)) (= (set374 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv16 bv0) (set374 bv0))))
(assert (= (slen _lbv16) s))
(assert (=> (> (slen _lbv16) 0) (or (> (shd _lbv16) x0) (= (shd _lbv16) x0))))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (forall ((bv0 Bool)) (= (set375 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv16 bv0) (set375 bv0))))
(assert (= (slen _lbv16) s))
(assert (=> (> (slen _lbv16) 0) (or (> (shd _lbv16) x0) (= (shd _lbv16) x0))))
(assert (forall ((bv0 Bool)) (= (set376 bv0) (and (= bv0 true)))))
(assert (not (forall ((bv0 Bool)) (= (slist _lbv16 bv0) (set376 bv0)))))

 
 Timedout the subtype check T_vi <: T_goal
 
 Enumerating a Scalar Term _lbv17
 
 Type of the Scalar Term {v:Ty_alphalist | 
 	 Conj <c (slist)(v) = (true)
 	 , 
 	 Conj <c (slen)(v) ==(s)
 	 , 
 	 Impl < (slen)(v) > (0)
 	 
 Disj <d  (shd)(v) > (x0)
 	,   (shd)(v) ==(x0)>d  > >c  >c }                                                                                                                                                                                                                                                              
solver 
 (declare-sort T3741)
(declare-fun set377 (Bool) Bool)
(declare-fun slist (T3741 Bool) Bool)
(declare-fun nil () T3741)
(declare-fun slen (T3741) Int)
(declare-fun |0| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv5 () Int)
(declare-fun s () Int)
(declare-fun _lbv6 () Int)
(declare-fun _lbv7 () Int)
(declare-fun _lbv8 () Int)
(declare-fun set378 (Bool) Bool)
(declare-fun _lbv13 () T3741)
(declare-fun shd (T3741) Int)
(declare-fun set379 (Bool) Bool)
(declare-fun _lbv14 () T3741)
(declare-fun set380 (Bool) Bool)
(declare-fun _lbv15 () T3741)
(declare-fun set381 (Bool) Bool)
(declare-fun _lbv16 () T3741)
(declare-fun set382 (Bool) Bool)
(declare-fun _lbv18 () T3741)
(declare-fun set383 (Bool) Bool)
(declare-fun _lbv19 () T3741)
(declare-fun set384 (Bool) Bool)
(declare-fun _lbv20 () T3741)
(declare-fun |3| () Int)
(declare-fun _lbv10 () Int)
(declare-fun _lbv9 () Int)
(declare-fun _lbv12 () Int)
(declare-fun _lbv11 () Int)
(declare-fun set385 (Bool) Bool)
(declare-fun _lbv17 () T3741)
(declare-fun set386 (Bool) Bool)
(declare-fun set387 (Bool) Bool)
(assert (forall ((bv0 Bool)) (= (set377 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set377 bv0))))
(assert (= (slen nil) 0))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv5))
(assert (> s _lbv6))
(assert (> s _lbv7))
(assert (= _lbv8 (- s 1)))
(assert (forall ((bv0 Bool)) (= (set378 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv13 bv0) (set378 bv0))))
(assert (= (slen _lbv13) s))
(assert (=> (> (slen _lbv13) 0) (or (> (shd _lbv13) x0) (= (shd _lbv13) x0))))
(assert (forall ((bv0 Bool)) (= (set379 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv14 bv0) (set379 bv0))))
(assert (= (slen _lbv14) s))
(assert (=> (> (slen _lbv14) 0) (or (> (shd _lbv14) x0) (= (shd _lbv14) x0))))
(assert (forall ((bv0 Bool)) (= (set380 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv15 bv0) (set380 bv0))))
(assert (= (slen _lbv15) s))
(assert (=> (> (slen _lbv15) 0) (or (> (shd _lbv15) x0) (= (shd _lbv15) x0))))
(assert (forall ((bv0 Bool)) (= (set381 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv16 bv0) (set381 bv0))))
(assert (= (slen _lbv16) s))
(assert (=> (> (slen _lbv16) 0) (or (> (shd _lbv16) x0) (= (shd _lbv16) x0))))
(assert (forall ((bv0 Bool)) (= (set382 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv18 bv0) (set382 bv0))))
(assert (= (slen _lbv18) s))
(assert (=> (> (slen _lbv18) 0) (or (> (shd _lbv18) x0) (= (shd _lbv18) x0))))
(assert (forall ((bv0 Bool)) (= (set383 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv19 bv0) (set383 bv0))))
(assert (= (slen _lbv19) s))
(assert (=> (> (slen _lbv19) 0) (or (> (shd _lbv19) x0) (= (shd _lbv19) x0))))
(assert (forall ((bv0 Bool)) (= (set384 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv20 bv0) (set384 bv0))))
(assert (= (slen _lbv20) s))
(assert (=> (> (slen _lbv20) 0) (or (> (shd _lbv20) x0) (= (shd _lbv20) x0))))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (or (> _lbv10 _lbv7) (= _lbv10 _lbv7)))
(assert (= |3| 3))
(assert (not (> _lbv10 |3|)))
(assert (or (> _lbv9 _lbv8) (= _lbv9 _lbv8)))
(assert (= |3| 3))
(assert (not (> _lbv9 |3|)))
(assert (or (> _lbv12 _lbv5) (= _lbv12 _lbv5)))
(assert (= |3| 3))
(assert (not (> _lbv12 |3|)))
(assert (or (> _lbv11 _lbv6) (= _lbv11 _lbv6)))
(assert (= |3| 3))
(assert (not (> _lbv11 |3|)))
(assert (forall ((bv0 Bool)) (= (set385 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv17 bv0) (set385 bv0))))
(assert (= (slen _lbv17) s))
(assert (=> (> (slen _lbv17) 0) (or (> (shd _lbv17) x0) (= (shd _lbv17) x0))))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (forall ((bv0 Bool)) (= (set386 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv17 bv0) (set386 bv0))))
(assert (= (slen _lbv17) s))
(assert (=> (> (slen _lbv17) 0) (or (> (shd _lbv17) x0) (= (shd _lbv17) x0))))
(assert (forall ((bv0 Bool)) (= (set387 bv0) (and (= bv0 true)))))
(assert (not (forall ((bv0 Bool)) (= (slist _lbv17 bv0) (set387 bv0)))))

 
 Timedout the subtype check T_vi <: T_goal
 
 Enumerating a Scalar Term _lbv18
 
 Type of the Scalar Term {v:Ty_alphalist | 
 	 Conj <c (slist)(v) = (true)
 	 , 
 	 Conj <c (slen)(v) ==(s)
 	 , 
 	 Impl < (slen)(v) > (0)
 	 
 Disj <d  (shd)(v) > (x0)
 	,   (shd)(v) ==(x0)>d  > >c  >c }                                                                                                                                                                                                                                                              
solver 
 (declare-sort T3783)
(declare-fun set388 (Bool) Bool)
(declare-fun slist (T3783 Bool) Bool)
(declare-fun nil () T3783)
(declare-fun slen (T3783) Int)
(declare-fun |0| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv5 () Int)
(declare-fun s () Int)
(declare-fun _lbv6 () Int)
(declare-fun _lbv7 () Int)
(declare-fun _lbv8 () Int)
(declare-fun set389 (Bool) Bool)
(declare-fun _lbv13 () T3783)
(declare-fun shd (T3783) Int)
(declare-fun set390 (Bool) Bool)
(declare-fun _lbv14 () T3783)
(declare-fun set391 (Bool) Bool)
(declare-fun _lbv15 () T3783)
(declare-fun set392 (Bool) Bool)
(declare-fun _lbv16 () T3783)
(declare-fun set393 (Bool) Bool)
(declare-fun _lbv17 () T3783)
(declare-fun set394 (Bool) Bool)
(declare-fun _lbv19 () T3783)
(declare-fun set395 (Bool) Bool)
(declare-fun _lbv20 () T3783)
(declare-fun |3| () Int)
(declare-fun _lbv10 () Int)
(declare-fun _lbv9 () Int)
(declare-fun _lbv12 () Int)
(declare-fun _lbv11 () Int)
(declare-fun set396 (Bool) Bool)
(declare-fun _lbv18 () T3783)
(declare-fun set397 (Bool) Bool)
(declare-fun set398 (Bool) Bool)
(assert (forall ((bv0 Bool)) (= (set388 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set388 bv0))))
(assert (= (slen nil) 0))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv5))
(assert (> s _lbv6))
(assert (> s _lbv7))
(assert (= _lbv8 (- s 1)))
(assert (forall ((bv0 Bool)) (= (set389 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv13 bv0) (set389 bv0))))
(assert (= (slen _lbv13) s))
(assert (=> (> (slen _lbv13) 0) (or (> (shd _lbv13) x0) (= (shd _lbv13) x0))))
(assert (forall ((bv0 Bool)) (= (set390 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv14 bv0) (set390 bv0))))
(assert (= (slen _lbv14) s))
(assert (=> (> (slen _lbv14) 0) (or (> (shd _lbv14) x0) (= (shd _lbv14) x0))))
(assert (forall ((bv0 Bool)) (= (set391 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv15 bv0) (set391 bv0))))
(assert (= (slen _lbv15) s))
(assert (=> (> (slen _lbv15) 0) (or (> (shd _lbv15) x0) (= (shd _lbv15) x0))))
(assert (forall ((bv0 Bool)) (= (set392 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv16 bv0) (set392 bv0))))
(assert (= (slen _lbv16) s))
(assert (=> (> (slen _lbv16) 0) (or (> (shd _lbv16) x0) (= (shd _lbv16) x0))))
(assert (forall ((bv0 Bool)) (= (set393 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv17 bv0) (set393 bv0))))
(assert (= (slen _lbv17) s))
(assert (=> (> (slen _lbv17) 0) (or (> (shd _lbv17) x0) (= (shd _lbv17) x0))))
(assert (forall ((bv0 Bool)) (= (set394 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv19 bv0) (set394 bv0))))
(assert (= (slen _lbv19) s))
(assert (=> (> (slen _lbv19) 0) (or (> (shd _lbv19) x0) (= (shd _lbv19) x0))))
(assert (forall ((bv0 Bool)) (= (set395 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv20 bv0) (set395 bv0))))
(assert (= (slen _lbv20) s))
(assert (=> (> (slen _lbv20) 0) (or (> (shd _lbv20) x0) (= (shd _lbv20) x0))))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (or (> _lbv10 _lbv7) (= _lbv10 _lbv7)))
(assert (= |3| 3))
(assert (not (> _lbv10 |3|)))
(assert (or (> _lbv9 _lbv8) (= _lbv9 _lbv8)))
(assert (= |3| 3))
(assert (not (> _lbv9 |3|)))
(assert (or (> _lbv12 _lbv5) (= _lbv12 _lbv5)))
(assert (= |3| 3))
(assert (not (> _lbv12 |3|)))
(assert (or (> _lbv11 _lbv6) (= _lbv11 _lbv6)))
(assert (= |3| 3))
(assert (not (> _lbv11 |3|)))
(assert (forall ((bv0 Bool)) (= (set396 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv18 bv0) (set396 bv0))))
(assert (= (slen _lbv18) s))
(assert (=> (> (slen _lbv18) 0) (or (> (shd _lbv18) x0) (= (shd _lbv18) x0))))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (forall ((bv0 Bool)) (= (set397 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv18 bv0) (set397 bv0))))
(assert (= (slen _lbv18) s))
(assert (=> (> (slen _lbv18) 0) (or (> (shd _lbv18) x0) (= (shd _lbv18) x0))))
(assert (forall ((bv0 Bool)) (= (set398 bv0) (and (= bv0 true)))))
(assert (not (forall ((bv0 Bool)) (= (slist _lbv18 bv0) (set398 bv0)))))

 
 Timedout the subtype check T_vi <: T_goal
 
 Enumerating a Scalar Term _lbv19
 
 Type of the Scalar Term {v:Ty_alphalist | 
 	 Conj <c (slist)(v) = (true)
 	 , 
 	 Conj <c (slen)(v) ==(s)
 	 , 
 	 Impl < (slen)(v) > (0)
 	 
 Disj <d  (shd)(v) > (x0)
 	,   (shd)(v) ==(x0)>d  > >c  >c }                                                                                                                                                                                                                                                              
solver 
 (declare-sort T3825)
(declare-fun set399 (Bool) Bool)
(declare-fun slist (T3825 Bool) Bool)
(declare-fun nil () T3825)
(declare-fun slen (T3825) Int)
(declare-fun |0| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv5 () Int)
(declare-fun s () Int)
(declare-fun _lbv6 () Int)
(declare-fun _lbv7 () Int)
(declare-fun _lbv8 () Int)
(declare-fun set400 (Bool) Bool)
(declare-fun _lbv13 () T3825)
(declare-fun shd (T3825) Int)
(declare-fun set401 (Bool) Bool)
(declare-fun _lbv14 () T3825)
(declare-fun set402 (Bool) Bool)
(declare-fun _lbv15 () T3825)
(declare-fun set403 (Bool) Bool)
(declare-fun _lbv16 () T3825)
(declare-fun set404 (Bool) Bool)
(declare-fun _lbv17 () T3825)
(declare-fun set405 (Bool) Bool)
(declare-fun _lbv18 () T3825)
(declare-fun set406 (Bool) Bool)
(declare-fun _lbv20 () T3825)
(declare-fun |3| () Int)
(declare-fun _lbv10 () Int)
(declare-fun _lbv9 () Int)
(declare-fun _lbv12 () Int)
(declare-fun _lbv11 () Int)
(declare-fun set407 (Bool) Bool)
(declare-fun _lbv19 () T3825)
(declare-fun set408 (Bool) Bool)
(declare-fun set409 (Bool) Bool)
(assert (forall ((bv0 Bool)) (= (set399 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set399 bv0))))
(assert (= (slen nil) 0))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv5))
(assert (> s _lbv6))
(assert (> s _lbv7))
(assert (= _lbv8 (- s 1)))
(assert (forall ((bv0 Bool)) (= (set400 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv13 bv0) (set400 bv0))))
(assert (= (slen _lbv13) s))
(assert (=> (> (slen _lbv13) 0) (or (> (shd _lbv13) x0) (= (shd _lbv13) x0))))
(assert (forall ((bv0 Bool)) (= (set401 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv14 bv0) (set401 bv0))))
(assert (= (slen _lbv14) s))
(assert (=> (> (slen _lbv14) 0) (or (> (shd _lbv14) x0) (= (shd _lbv14) x0))))
(assert (forall ((bv0 Bool)) (= (set402 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv15 bv0) (set402 bv0))))
(assert (= (slen _lbv15) s))
(assert (=> (> (slen _lbv15) 0) (or (> (shd _lbv15) x0) (= (shd _lbv15) x0))))
(assert (forall ((bv0 Bool)) (= (set403 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv16 bv0) (set403 bv0))))
(assert (= (slen _lbv16) s))
(assert (=> (> (slen _lbv16) 0) (or (> (shd _lbv16) x0) (= (shd _lbv16) x0))))
(assert (forall ((bv0 Bool)) (= (set404 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv17 bv0) (set404 bv0))))
(assert (= (slen _lbv17) s))
(assert (=> (> (slen _lbv17) 0) (or (> (shd _lbv17) x0) (= (shd _lbv17) x0))))
(assert (forall ((bv0 Bool)) (= (set405 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv18 bv0) (set405 bv0))))
(assert (= (slen _lbv18) s))
(assert (=> (> (slen _lbv18) 0) (or (> (shd _lbv18) x0) (= (shd _lbv18) x0))))
(assert (forall ((bv0 Bool)) (= (set406 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv20 bv0) (set406 bv0))))
(assert (= (slen _lbv20) s))
(assert (=> (> (slen _lbv20) 0) (or (> (shd _lbv20) x0) (= (shd _lbv20) x0))))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (or (> _lbv10 _lbv7) (= _lbv10 _lbv7)))
(assert (= |3| 3))
(assert (not (> _lbv10 |3|)))
(assert (or (> _lbv9 _lbv8) (= _lbv9 _lbv8)))
(assert (= |3| 3))
(assert (not (> _lbv9 |3|)))
(assert (or (> _lbv12 _lbv5) (= _lbv12 _lbv5)))
(assert (= |3| 3))
(assert (not (> _lbv12 |3|)))
(assert (or (> _lbv11 _lbv6) (= _lbv11 _lbv6)))
(assert (= |3| 3))
(assert (not (> _lbv11 |3|)))
(assert (forall ((bv0 Bool)) (= (set407 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv19 bv0) (set407 bv0))))
(assert (= (slen _lbv19) s))
(assert (=> (> (slen _lbv19) 0) (or (> (shd _lbv19) x0) (= (shd _lbv19) x0))))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (forall ((bv0 Bool)) (= (set408 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv19 bv0) (set408 bv0))))
(assert (= (slen _lbv19) s))
(assert (=> (> (slen _lbv19) 0) (or (> (shd _lbv19) x0) (= (shd _lbv19) x0))))
(assert (forall ((bv0 Bool)) (= (set409 bv0) (and (= bv0 true)))))
(assert (not (forall ((bv0 Bool)) (= (slist _lbv19 bv0) (set409 bv0)))))

 
 Timedout the subtype check T_vi <: T_goal
 
 Enumerating a Scalar Term _lbv20
 
 Type of the Scalar Term {v:Ty_alphalist | 
 	 Conj <c (slist)(v) = (true)
 	 , 
 	 Conj <c (slen)(v) ==(s)
 	 , 
 	 Impl < (slen)(v) > (0)
 	 
 Disj <d  (shd)(v) > (x0)
 	,   (shd)(v) ==(x0)>d  > >c  >c }                                                                                                                                                                                                                                                              
solver 
 (declare-sort T3867)
(declare-fun set410 (Bool) Bool)
(declare-fun slist (T3867 Bool) Bool)
(declare-fun nil () T3867)
(declare-fun slen (T3867) Int)
(declare-fun |0| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv5 () Int)
(declare-fun s () Int)
(declare-fun _lbv6 () Int)
(declare-fun _lbv7 () Int)
(declare-fun _lbv8 () Int)
(declare-fun set411 (Bool) Bool)
(declare-fun _lbv13 () T3867)
(declare-fun shd (T3867) Int)
(declare-fun set412 (Bool) Bool)
(declare-fun _lbv14 () T3867)
(declare-fun set413 (Bool) Bool)
(declare-fun _lbv15 () T3867)
(declare-fun set414 (Bool) Bool)
(declare-fun _lbv16 () T3867)
(declare-fun set415 (Bool) Bool)
(declare-fun _lbv17 () T3867)
(declare-fun set416 (Bool) Bool)
(declare-fun _lbv18 () T3867)
(declare-fun set417 (Bool) Bool)
(declare-fun _lbv19 () T3867)
(declare-fun |3| () Int)
(declare-fun _lbv10 () Int)
(declare-fun _lbv9 () Int)
(declare-fun _lbv12 () Int)
(declare-fun _lbv11 () Int)
(declare-fun set418 (Bool) Bool)
(declare-fun _lbv20 () T3867)
(declare-fun set419 (Bool) Bool)
(declare-fun set420 (Bool) Bool)
(assert (forall ((bv0 Bool)) (= (set410 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set410 bv0))))
(assert (= (slen nil) 0))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv5))
(assert (> s _lbv6))
(assert (> s _lbv7))
(assert (= _lbv8 (- s 1)))
(assert (forall ((bv0 Bool)) (= (set411 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv13 bv0) (set411 bv0))))
(assert (= (slen _lbv13) s))
(assert (=> (> (slen _lbv13) 0) (or (> (shd _lbv13) x0) (= (shd _lbv13) x0))))
(assert (forall ((bv0 Bool)) (= (set412 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv14 bv0) (set412 bv0))))
(assert (= (slen _lbv14) s))
(assert (=> (> (slen _lbv14) 0) (or (> (shd _lbv14) x0) (= (shd _lbv14) x0))))
(assert (forall ((bv0 Bool)) (= (set413 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv15 bv0) (set413 bv0))))
(assert (= (slen _lbv15) s))
(assert (=> (> (slen _lbv15) 0) (or (> (shd _lbv15) x0) (= (shd _lbv15) x0))))
(assert (forall ((bv0 Bool)) (= (set414 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv16 bv0) (set414 bv0))))
(assert (= (slen _lbv16) s))
(assert (=> (> (slen _lbv16) 0) (or (> (shd _lbv16) x0) (= (shd _lbv16) x0))))
(assert (forall ((bv0 Bool)) (= (set415 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv17 bv0) (set415 bv0))))
(assert (= (slen _lbv17) s))
(assert (=> (> (slen _lbv17) 0) (or (> (shd _lbv17) x0) (= (shd _lbv17) x0))))
(assert (forall ((bv0 Bool)) (= (set416 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv18 bv0) (set416 bv0))))
(assert (= (slen _lbv18) s))
(assert (=> (> (slen _lbv18) 0) (or (> (shd _lbv18) x0) (= (shd _lbv18) x0))))
(assert (forall ((bv0 Bool)) (= (set417 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv19 bv0) (set417 bv0))))
(assert (= (slen _lbv19) s))
(assert (=> (> (slen _lbv19) 0) (or (> (shd _lbv19) x0) (= (shd _lbv19) x0))))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (or (> _lbv10 _lbv7) (= _lbv10 _lbv7)))
(assert (= |3| 3))
(assert (not (> _lbv10 |3|)))
(assert (or (> _lbv9 _lbv8) (= _lbv9 _lbv8)))
(assert (= |3| 3))
(assert (not (> _lbv9 |3|)))
(assert (or (> _lbv12 _lbv5) (= _lbv12 _lbv5)))
(assert (= |3| 3))
(assert (not (> _lbv12 |3|)))
(assert (or (> _lbv11 _lbv6) (= _lbv11 _lbv6)))
(assert (= |3| 3))
(assert (not (> _lbv11 |3|)))
(assert (forall ((bv0 Bool)) (= (set418 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv20 bv0) (set418 bv0))))
(assert (= (slen _lbv20) s))
(assert (=> (> (slen _lbv20) 0) (or (> (shd _lbv20) x0) (= (shd _lbv20) x0))))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (forall ((bv0 Bool)) (= (set419 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv20 bv0) (set419 bv0))))
(assert (= (slen _lbv20) s))
(assert (=> (> (slen _lbv20) 0) (or (> (shd _lbv20) x0) (= (shd _lbv20) x0))))
(assert (forall ((bv0 Bool)) (= (set420 bv0) (and (= bv0 true)))))
(assert (not (forall ((bv0 Bool)) (= (slist _lbv20 bv0) (set420 bv0)))))

 
 Timedout the subtype check T_vi <: T_goal
 >>>>>>>>>>>>>>>>>> No Scalar found in Environment, Trying esynthesizePureApp <<<<<<<<<<<<<<<<<< 
  Pure Fun Application: esynthesizePureApp 
 Show Potential Functions
  , 
 goal, 
 cons
 ############################################################
  Trying Pure Component goal
  *************** Trying Arrow Component ************goal :  Arrow ( ( s1 : {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c } ) ->  Arrow ( ( x0 : {var_v3:Ty_int | true} ) -> {v:Ty_alphalist | 
 	 Conj <c (slist)(v) = (true)
 	 , 
 	 Conj <c (slen)(v) ==(s1)
 	 , 
 	 Impl < (slen)(v) > (0)
 	 
 Disj <d  (shd)(v) > (x0)
 	,   (shd)(v) ==(x0)>d  > >c  >c }
  *************** Synthesizing Args ei : ti for ************goal
 ##################################################################################
  Synthesizing the 1th argument for Function goal
  Trying Arguments in Scalars 
 esynthesizeScalar for {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c }
  Enumeration for 
 spec 
 {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c }
 
 Enumerating a Scalar Term s
 
 Type of the Scalar Term {v:Ty_int | true}                                                                                                                                                                                                                                                               
solver 
 (declare-sort T3909)
(declare-fun set421 (Bool) Bool)
(declare-fun slist (T3909 Bool) Bool)
(declare-fun nil () T3909)
(declare-fun slen (T3909) Int)
(declare-fun |0| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv5 () Int)
(declare-fun s () Int)
(declare-fun _lbv6 () Int)
(declare-fun _lbv7 () Int)
(declare-fun _lbv8 () Int)
(declare-fun set422 (Bool) Bool)
(declare-fun _lbv13 () T3909)
(declare-fun shd (T3909) Int)
(declare-fun set423 (Bool) Bool)
(declare-fun _lbv14 () T3909)
(declare-fun set424 (Bool) Bool)
(declare-fun _lbv15 () T3909)
(declare-fun set425 (Bool) Bool)
(declare-fun _lbv16 () T3909)
(declare-fun set426 (Bool) Bool)
(declare-fun _lbv17 () T3909)
(declare-fun set427 (Bool) Bool)
(declare-fun _lbv18 () T3909)
(declare-fun set428 (Bool) Bool)
(declare-fun _lbv19 () T3909)
(declare-fun set429 (Bool) Bool)
(declare-fun _lbv20 () T3909)
(declare-fun |3| () Int)
(declare-fun _lbv10 () Int)
(declare-fun _lbv9 () Int)
(declare-fun _lbv12 () Int)
(declare-fun _lbv11 () Int)
(assert (forall ((bv0 Bool)) (= (set421 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set421 bv0))))
(assert (= (slen nil) 0))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv5))
(assert (> s _lbv6))
(assert (> s _lbv7))
(assert (= _lbv8 (- s 1)))
(assert (forall ((bv0 Bool)) (= (set422 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv13 bv0) (set422 bv0))))
(assert (= (slen _lbv13) s))
(assert (=> (> (slen _lbv13) 0) (or (> (shd _lbv13) x0) (= (shd _lbv13) x0))))
(assert (forall ((bv0 Bool)) (= (set423 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv14 bv0) (set423 bv0))))
(assert (= (slen _lbv14) s))
(assert (=> (> (slen _lbv14) 0) (or (> (shd _lbv14) x0) (= (shd _lbv14) x0))))
(assert (forall ((bv0 Bool)) (= (set424 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv15 bv0) (set424 bv0))))
(assert (= (slen _lbv15) s))
(assert (=> (> (slen _lbv15) 0) (or (> (shd _lbv15) x0) (= (shd _lbv15) x0))))
(assert (forall ((bv0 Bool)) (= (set425 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv16 bv0) (set425 bv0))))
(assert (= (slen _lbv16) s))
(assert (=> (> (slen _lbv16) 0) (or (> (shd _lbv16) x0) (= (shd _lbv16) x0))))
(assert (forall ((bv0 Bool)) (= (set426 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv17 bv0) (set426 bv0))))
(assert (= (slen _lbv17) s))
(assert (=> (> (slen _lbv17) 0) (or (> (shd _lbv17) x0) (= (shd _lbv17) x0))))
(assert (forall ((bv0 Bool)) (= (set427 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv18 bv0) (set427 bv0))))
(assert (= (slen _lbv18) s))
(assert (=> (> (slen _lbv18) 0) (or (> (shd _lbv18) x0) (= (shd _lbv18) x0))))
(assert (forall ((bv0 Bool)) (= (set428 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv19 bv0) (set428 bv0))))
(assert (= (slen _lbv19) s))
(assert (=> (> (slen _lbv19) 0) (or (> (shd _lbv19) x0) (= (shd _lbv19) x0))))
(assert (forall ((bv0 Bool)) (= (set429 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv20 bv0) (set429 bv0))))
(assert (= (slen _lbv20) s))
(assert (=> (> (slen _lbv20) 0) (or (> (shd _lbv20) x0) (= (shd _lbv20) x0))))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (or (> _lbv10 _lbv7) (= _lbv10 _lbv7)))
(assert (= |3| 3))
(assert (not (> _lbv10 |3|)))
(assert (or (> _lbv9 _lbv8) (= _lbv9 _lbv8)))
(assert (= |3| 3))
(assert (not (> _lbv9 |3|)))
(assert (or (> _lbv12 _lbv5) (= _lbv12 _lbv5)))
(assert (= |3| 3))
(assert (not (> _lbv12 |3|)))
(assert (or (> _lbv11 _lbv6) (= _lbv11 _lbv6)))
(assert (= |3| 3))
(assert (not (> _lbv11 |3|)))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (not (> s s)))

 
 Timeout the subtype check T_vi <: T_goal
 
 Enumerating a Scalar Term x0
 
 Type of the Scalar Term {var_v3:Ty_int | true}                                                                                                                                                                                                                                                               
solver 
 (declare-sort T3951)
(declare-fun set430 (Bool) Bool)
(declare-fun slist (T3951 Bool) Bool)
(declare-fun nil () T3951)
(declare-fun slen (T3951) Int)
(declare-fun |0| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv5 () Int)
(declare-fun s () Int)
(declare-fun _lbv6 () Int)
(declare-fun _lbv7 () Int)
(declare-fun _lbv8 () Int)
(declare-fun set431 (Bool) Bool)
(declare-fun _lbv13 () T3951)
(declare-fun shd (T3951) Int)
(declare-fun set432 (Bool) Bool)
(declare-fun _lbv14 () T3951)
(declare-fun set433 (Bool) Bool)
(declare-fun _lbv15 () T3951)
(declare-fun set434 (Bool) Bool)
(declare-fun _lbv16 () T3951)
(declare-fun set435 (Bool) Bool)
(declare-fun _lbv17 () T3951)
(declare-fun set436 (Bool) Bool)
(declare-fun _lbv18 () T3951)
(declare-fun set437 (Bool) Bool)
(declare-fun _lbv19 () T3951)
(declare-fun set438 (Bool) Bool)
(declare-fun _lbv20 () T3951)
(declare-fun |3| () Int)
(declare-fun _lbv10 () Int)
(declare-fun _lbv9 () Int)
(declare-fun _lbv12 () Int)
(declare-fun _lbv11 () Int)
(assert (forall ((bv0 Bool)) (= (set430 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set430 bv0))))
(assert (= (slen nil) 0))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv5))
(assert (> s _lbv6))
(assert (> s _lbv7))
(assert (= _lbv8 (- s 1)))
(assert (forall ((bv0 Bool)) (= (set431 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv13 bv0) (set431 bv0))))
(assert (= (slen _lbv13) s))
(assert (=> (> (slen _lbv13) 0) (or (> (shd _lbv13) x0) (= (shd _lbv13) x0))))
(assert (forall ((bv0 Bool)) (= (set432 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv14 bv0) (set432 bv0))))
(assert (= (slen _lbv14) s))
(assert (=> (> (slen _lbv14) 0) (or (> (shd _lbv14) x0) (= (shd _lbv14) x0))))
(assert (forall ((bv0 Bool)) (= (set433 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv15 bv0) (set433 bv0))))
(assert (= (slen _lbv15) s))
(assert (=> (> (slen _lbv15) 0) (or (> (shd _lbv15) x0) (= (shd _lbv15) x0))))
(assert (forall ((bv0 Bool)) (= (set434 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv16 bv0) (set434 bv0))))
(assert (= (slen _lbv16) s))
(assert (=> (> (slen _lbv16) 0) (or (> (shd _lbv16) x0) (= (shd _lbv16) x0))))
(assert (forall ((bv0 Bool)) (= (set435 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv17 bv0) (set435 bv0))))
(assert (= (slen _lbv17) s))
(assert (=> (> (slen _lbv17) 0) (or (> (shd _lbv17) x0) (= (shd _lbv17) x0))))
(assert (forall ((bv0 Bool)) (= (set436 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv18 bv0) (set436 bv0))))
(assert (= (slen _lbv18) s))
(assert (=> (> (slen _lbv18) 0) (or (> (shd _lbv18) x0) (= (shd _lbv18) x0))))
(assert (forall ((bv0 Bool)) (= (set437 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv19 bv0) (set437 bv0))))
(assert (= (slen _lbv19) s))
(assert (=> (> (slen _lbv19) 0) (or (> (shd _lbv19) x0) (= (shd _lbv19) x0))))
(assert (forall ((bv0 Bool)) (= (set438 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv20 bv0) (set438 bv0))))
(assert (= (slen _lbv20) s))
(assert (=> (> (slen _lbv20) 0) (or (> (shd _lbv20) x0) (= (shd _lbv20) x0))))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (or (> _lbv10 _lbv7) (= _lbv10 _lbv7)))
(assert (= |3| 3))
(assert (not (> _lbv10 |3|)))
(assert (or (> _lbv9 _lbv8) (= _lbv9 _lbv8)))
(assert (= |3| 3))
(assert (not (> _lbv9 |3|)))
(assert (or (> _lbv12 _lbv5) (= _lbv12 _lbv5)))
(assert (= |3| 3))
(assert (not (> _lbv12 |3|)))
(assert (or (> _lbv11 _lbv6) (= _lbv11 _lbv6)))
(assert (= |3| 3))
(assert (not (> _lbv11 |3|)))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (not (> s x0)))

 
 Timeout the subtype check T_vi <: T_goal
 
 Enumerating a Scalar Term _lbv5
 
 Type of the Scalar Term {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c }                                                                                                                                                                                                                                                                    
solver 
 (declare-sort T3993)
(declare-fun set439 (Bool) Bool)
(declare-fun slist (T3993 Bool) Bool)
(declare-fun nil () T3993)
(declare-fun slen (T3993) Int)
(declare-fun |0| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv6 () Int)
(declare-fun s () Int)
(declare-fun _lbv7 () Int)
(declare-fun _lbv8 () Int)
(declare-fun set440 (Bool) Bool)
(declare-fun _lbv13 () T3993)
(declare-fun shd (T3993) Int)
(declare-fun set441 (Bool) Bool)
(declare-fun _lbv14 () T3993)
(declare-fun set442 (Bool) Bool)
(declare-fun _lbv15 () T3993)
(declare-fun set443 (Bool) Bool)
(declare-fun _lbv16 () T3993)
(declare-fun set444 (Bool) Bool)
(declare-fun _lbv17 () T3993)
(declare-fun set445 (Bool) Bool)
(declare-fun _lbv18 () T3993)
(declare-fun set446 (Bool) Bool)
(declare-fun _lbv19 () T3993)
(declare-fun set447 (Bool) Bool)
(declare-fun _lbv20 () T3993)
(declare-fun |3| () Int)
(declare-fun _lbv10 () Int)
(declare-fun _lbv9 () Int)
(declare-fun _lbv5 () Int)
(declare-fun _lbv12 () Int)
(declare-fun _lbv11 () Int)
(assert (forall ((bv0 Bool)) (= (set439 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set439 bv0))))
(assert (= (slen nil) 0))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv6))
(assert (> s _lbv7))
(assert (= _lbv8 (- s 1)))
(assert (forall ((bv0 Bool)) (= (set440 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv13 bv0) (set440 bv0))))
(assert (= (slen _lbv13) s))
(assert (=> (> (slen _lbv13) 0) (or (> (shd _lbv13) x0) (= (shd _lbv13) x0))))
(assert (forall ((bv0 Bool)) (= (set441 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv14 bv0) (set441 bv0))))
(assert (= (slen _lbv14) s))
(assert (=> (> (slen _lbv14) 0) (or (> (shd _lbv14) x0) (= (shd _lbv14) x0))))
(assert (forall ((bv0 Bool)) (= (set442 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv15 bv0) (set442 bv0))))
(assert (= (slen _lbv15) s))
(assert (=> (> (slen _lbv15) 0) (or (> (shd _lbv15) x0) (= (shd _lbv15) x0))))
(assert (forall ((bv0 Bool)) (= (set443 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv16 bv0) (set443 bv0))))
(assert (= (slen _lbv16) s))
(assert (=> (> (slen _lbv16) 0) (or (> (shd _lbv16) x0) (= (shd _lbv16) x0))))
(assert (forall ((bv0 Bool)) (= (set444 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv17 bv0) (set444 bv0))))
(assert (= (slen _lbv17) s))
(assert (=> (> (slen _lbv17) 0) (or (> (shd _lbv17) x0) (= (shd _lbv17) x0))))
(assert (forall ((bv0 Bool)) (= (set445 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv18 bv0) (set445 bv0))))
(assert (= (slen _lbv18) s))
(assert (=> (> (slen _lbv18) 0) (or (> (shd _lbv18) x0) (= (shd _lbv18) x0))))
(assert (forall ((bv0 Bool)) (= (set446 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv19 bv0) (set446 bv0))))
(assert (= (slen _lbv19) s))
(assert (=> (> (slen _lbv19) 0) (or (> (shd _lbv19) x0) (= (shd _lbv19) x0))))
(assert (forall ((bv0 Bool)) (= (set447 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv20 bv0) (set447 bv0))))
(assert (= (slen _lbv20) s))
(assert (=> (> (slen _lbv20) 0) (or (> (shd _lbv20) x0) (= (shd _lbv20) x0))))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (or (> _lbv10 _lbv7) (= _lbv10 _lbv7)))
(assert (= |3| 3))
(assert (not (> _lbv10 |3|)))
(assert (or (> _lbv9 _lbv8) (= _lbv9 _lbv8)))
(assert (= |3| 3))
(assert (not (> _lbv9 |3|)))
(assert (or (> _lbv12 _lbv5) (= _lbv12 _lbv5)))
(assert (= |3| 3))
(assert (not (> _lbv12 |3|)))
(assert (or (> _lbv11 _lbv6) (= _lbv11 _lbv6)))
(assert (= |3| 3))
(assert (not (> _lbv11 |3|)))
(assert (> s _lbv5))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv5))
(assert (not (> s _lbv5)))

 
 Enumerating a Scalar Term _lbv6
 
 Type of the Scalar Term {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c }                                                                                                                                                                                                                                                                    
solver 
 (declare-sort T4035)
(declare-fun set448 (Bool) Bool)
(declare-fun slist (T4035 Bool) Bool)
(declare-fun nil () T4035)
(declare-fun slen (T4035) Int)
(declare-fun |0| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv5 () Int)
(declare-fun s () Int)
(declare-fun _lbv7 () Int)
(declare-fun _lbv8 () Int)
(declare-fun set449 (Bool) Bool)
(declare-fun _lbv13 () T4035)
(declare-fun shd (T4035) Int)
(declare-fun set450 (Bool) Bool)
(declare-fun _lbv14 () T4035)
(declare-fun set451 (Bool) Bool)
(declare-fun _lbv15 () T4035)
(declare-fun set452 (Bool) Bool)
(declare-fun _lbv16 () T4035)
(declare-fun set453 (Bool) Bool)
(declare-fun _lbv17 () T4035)
(declare-fun set454 (Bool) Bool)
(declare-fun _lbv18 () T4035)
(declare-fun set455 (Bool) Bool)
(declare-fun _lbv19 () T4035)
(declare-fun set456 (Bool) Bool)
(declare-fun _lbv20 () T4035)
(declare-fun |3| () Int)
(declare-fun _lbv10 () Int)
(declare-fun _lbv9 () Int)
(declare-fun _lbv12 () Int)
(declare-fun _lbv6 () Int)
(declare-fun _lbv11 () Int)
(assert (forall ((bv0 Bool)) (= (set448 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set448 bv0))))
(assert (= (slen nil) 0))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv5))
(assert (> s _lbv7))
(assert (= _lbv8 (- s 1)))
(assert (forall ((bv0 Bool)) (= (set449 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv13 bv0) (set449 bv0))))
(assert (= (slen _lbv13) s))
(assert (=> (> (slen _lbv13) 0) (or (> (shd _lbv13) x0) (= (shd _lbv13) x0))))
(assert (forall ((bv0 Bool)) (= (set450 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv14 bv0) (set450 bv0))))
(assert (= (slen _lbv14) s))
(assert (=> (> (slen _lbv14) 0) (or (> (shd _lbv14) x0) (= (shd _lbv14) x0))))
(assert (forall ((bv0 Bool)) (= (set451 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv15 bv0) (set451 bv0))))
(assert (= (slen _lbv15) s))
(assert (=> (> (slen _lbv15) 0) (or (> (shd _lbv15) x0) (= (shd _lbv15) x0))))
(assert (forall ((bv0 Bool)) (= (set452 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv16 bv0) (set452 bv0))))
(assert (= (slen _lbv16) s))
(assert (=> (> (slen _lbv16) 0) (or (> (shd _lbv16) x0) (= (shd _lbv16) x0))))
(assert (forall ((bv0 Bool)) (= (set453 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv17 bv0) (set453 bv0))))
(assert (= (slen _lbv17) s))
(assert (=> (> (slen _lbv17) 0) (or (> (shd _lbv17) x0) (= (shd _lbv17) x0))))
(assert (forall ((bv0 Bool)) (= (set454 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv18 bv0) (set454 bv0))))
(assert (= (slen _lbv18) s))
(assert (=> (> (slen _lbv18) 0) (or (> (shd _lbv18) x0) (= (shd _lbv18) x0))))
(assert (forall ((bv0 Bool)) (= (set455 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv19 bv0) (set455 bv0))))
(assert (= (slen _lbv19) s))
(assert (=> (> (slen _lbv19) 0) (or (> (shd _lbv19) x0) (= (shd _lbv19) x0))))
(assert (forall ((bv0 Bool)) (= (set456 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv20 bv0) (set456 bv0))))
(assert (= (slen _lbv20) s))
(assert (=> (> (slen _lbv20) 0) (or (> (shd _lbv20) x0) (= (shd _lbv20) x0))))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (or (> _lbv10 _lbv7) (= _lbv10 _lbv7)))
(assert (= |3| 3))
(assert (not (> _lbv10 |3|)))
(assert (or (> _lbv9 _lbv8) (= _lbv9 _lbv8)))
(assert (= |3| 3))
(assert (not (> _lbv9 |3|)))
(assert (or (> _lbv12 _lbv5) (= _lbv12 _lbv5)))
(assert (= |3| 3))
(assert (not (> _lbv12 |3|)))
(assert (or (> _lbv11 _lbv6) (= _lbv11 _lbv6)))
(assert (= |3| 3))
(assert (not (> _lbv11 |3|)))
(assert (> s _lbv6))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv6))
(assert (not (> s _lbv6)))

 
 Enumerating a Scalar Term _lbv7
 
 Type of the Scalar Term {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c }                                                                                                                                                                                                                                                                    
solver 
 (declare-sort T4077)
(declare-fun set457 (Bool) Bool)
(declare-fun slist (T4077 Bool) Bool)
(declare-fun nil () T4077)
(declare-fun slen (T4077) Int)
(declare-fun |0| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv5 () Int)
(declare-fun s () Int)
(declare-fun _lbv6 () Int)
(declare-fun _lbv8 () Int)
(declare-fun set458 (Bool) Bool)
(declare-fun _lbv13 () T4077)
(declare-fun shd (T4077) Int)
(declare-fun set459 (Bool) Bool)
(declare-fun _lbv14 () T4077)
(declare-fun set460 (Bool) Bool)
(declare-fun _lbv15 () T4077)
(declare-fun set461 (Bool) Bool)
(declare-fun _lbv16 () T4077)
(declare-fun set462 (Bool) Bool)
(declare-fun _lbv17 () T4077)
(declare-fun set463 (Bool) Bool)
(declare-fun _lbv18 () T4077)
(declare-fun set464 (Bool) Bool)
(declare-fun _lbv19 () T4077)
(declare-fun set465 (Bool) Bool)
(declare-fun _lbv20 () T4077)
(declare-fun |3| () Int)
(declare-fun _lbv7 () Int)
(declare-fun _lbv10 () Int)
(declare-fun _lbv9 () Int)
(declare-fun _lbv12 () Int)
(declare-fun _lbv11 () Int)
(assert (forall ((bv0 Bool)) (= (set457 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set457 bv0))))
(assert (= (slen nil) 0))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv5))
(assert (> s _lbv6))
(assert (= _lbv8 (- s 1)))
(assert (forall ((bv0 Bool)) (= (set458 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv13 bv0) (set458 bv0))))
(assert (= (slen _lbv13) s))
(assert (=> (> (slen _lbv13) 0) (or (> (shd _lbv13) x0) (= (shd _lbv13) x0))))
(assert (forall ((bv0 Bool)) (= (set459 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv14 bv0) (set459 bv0))))
(assert (= (slen _lbv14) s))
(assert (=> (> (slen _lbv14) 0) (or (> (shd _lbv14) x0) (= (shd _lbv14) x0))))
(assert (forall ((bv0 Bool)) (= (set460 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv15 bv0) (set460 bv0))))
(assert (= (slen _lbv15) s))
(assert (=> (> (slen _lbv15) 0) (or (> (shd _lbv15) x0) (= (shd _lbv15) x0))))
(assert (forall ((bv0 Bool)) (= (set461 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv16 bv0) (set461 bv0))))
(assert (= (slen _lbv16) s))
(assert (=> (> (slen _lbv16) 0) (or (> (shd _lbv16) x0) (= (shd _lbv16) x0))))
(assert (forall ((bv0 Bool)) (= (set462 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv17 bv0) (set462 bv0))))
(assert (= (slen _lbv17) s))
(assert (=> (> (slen _lbv17) 0) (or (> (shd _lbv17) x0) (= (shd _lbv17) x0))))
(assert (forall ((bv0 Bool)) (= (set463 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv18 bv0) (set463 bv0))))
(assert (= (slen _lbv18) s))
(assert (=> (> (slen _lbv18) 0) (or (> (shd _lbv18) x0) (= (shd _lbv18) x0))))
(assert (forall ((bv0 Bool)) (= (set464 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv19 bv0) (set464 bv0))))
(assert (= (slen _lbv19) s))
(assert (=> (> (slen _lbv19) 0) (or (> (shd _lbv19) x0) (= (shd _lbv19) x0))))
(assert (forall ((bv0 Bool)) (= (set465 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv20 bv0) (set465 bv0))))
(assert (= (slen _lbv20) s))
(assert (=> (> (slen _lbv20) 0) (or (> (shd _lbv20) x0) (= (shd _lbv20) x0))))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (or (> _lbv10 _lbv7) (= _lbv10 _lbv7)))
(assert (= |3| 3))
(assert (not (> _lbv10 |3|)))
(assert (or (> _lbv9 _lbv8) (= _lbv9 _lbv8)))
(assert (= |3| 3))
(assert (not (> _lbv9 |3|)))
(assert (or (> _lbv12 _lbv5) (= _lbv12 _lbv5)))
(assert (= |3| 3))
(assert (not (> _lbv12 |3|)))
(assert (or (> _lbv11 _lbv6) (= _lbv11 _lbv6)))
(assert (= |3| 3))
(assert (not (> _lbv11 |3|)))
(assert (> s _lbv7))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv7))
(assert (not (> s _lbv7)))

 
 Enumerating a Scalar Term _lbv8
 
 Type of the Scalar Term {v:Ty_int | (v) ==((s) -- (1))}                                                                                                                                                                                                                                                               
solver 
 (declare-sort T4119)
(declare-fun set466 (Bool) Bool)
(declare-fun slist (T4119 Bool) Bool)
(declare-fun nil () T4119)
(declare-fun slen (T4119) Int)
(declare-fun |0| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv5 () Int)
(declare-fun s () Int)
(declare-fun _lbv6 () Int)
(declare-fun _lbv7 () Int)
(declare-fun set467 (Bool) Bool)
(declare-fun _lbv13 () T4119)
(declare-fun shd (T4119) Int)
(declare-fun set468 (Bool) Bool)
(declare-fun _lbv14 () T4119)
(declare-fun set469 (Bool) Bool)
(declare-fun _lbv15 () T4119)
(declare-fun set470 (Bool) Bool)
(declare-fun _lbv16 () T4119)
(declare-fun set471 (Bool) Bool)
(declare-fun _lbv17 () T4119)
(declare-fun set472 (Bool) Bool)
(declare-fun _lbv18 () T4119)
(declare-fun set473 (Bool) Bool)
(declare-fun _lbv19 () T4119)
(declare-fun set474 (Bool) Bool)
(declare-fun _lbv20 () T4119)
(declare-fun |3| () Int)
(declare-fun _lbv10 () Int)
(declare-fun _lbv8 () Int)
(declare-fun _lbv9 () Int)
(declare-fun _lbv12 () Int)
(declare-fun _lbv11 () Int)
(assert (forall ((bv0 Bool)) (= (set466 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set466 bv0))))
(assert (= (slen nil) 0))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv5))
(assert (> s _lbv6))
(assert (> s _lbv7))
(assert (forall ((bv0 Bool)) (= (set467 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv13 bv0) (set467 bv0))))
(assert (= (slen _lbv13) s))
(assert (=> (> (slen _lbv13) 0) (or (> (shd _lbv13) x0) (= (shd _lbv13) x0))))
(assert (forall ((bv0 Bool)) (= (set468 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv14 bv0) (set468 bv0))))
(assert (= (slen _lbv14) s))
(assert (=> (> (slen _lbv14) 0) (or (> (shd _lbv14) x0) (= (shd _lbv14) x0))))
(assert (forall ((bv0 Bool)) (= (set469 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv15 bv0) (set469 bv0))))
(assert (= (slen _lbv15) s))
(assert (=> (> (slen _lbv15) 0) (or (> (shd _lbv15) x0) (= (shd _lbv15) x0))))
(assert (forall ((bv0 Bool)) (= (set470 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv16 bv0) (set470 bv0))))
(assert (= (slen _lbv16) s))
(assert (=> (> (slen _lbv16) 0) (or (> (shd _lbv16) x0) (= (shd _lbv16) x0))))
(assert (forall ((bv0 Bool)) (= (set471 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv17 bv0) (set471 bv0))))
(assert (= (slen _lbv17) s))
(assert (=> (> (slen _lbv17) 0) (or (> (shd _lbv17) x0) (= (shd _lbv17) x0))))
(assert (forall ((bv0 Bool)) (= (set472 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv18 bv0) (set472 bv0))))
(assert (= (slen _lbv18) s))
(assert (=> (> (slen _lbv18) 0) (or (> (shd _lbv18) x0) (= (shd _lbv18) x0))))
(assert (forall ((bv0 Bool)) (= (set473 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv19 bv0) (set473 bv0))))
(assert (= (slen _lbv19) s))
(assert (=> (> (slen _lbv19) 0) (or (> (shd _lbv19) x0) (= (shd _lbv19) x0))))
(assert (forall ((bv0 Bool)) (= (set474 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv20 bv0) (set474 bv0))))
(assert (= (slen _lbv20) s))
(assert (=> (> (slen _lbv20) 0) (or (> (shd _lbv20) x0) (= (shd _lbv20) x0))))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (or (> _lbv10 _lbv7) (= _lbv10 _lbv7)))
(assert (= |3| 3))
(assert (not (> _lbv10 |3|)))
(assert (or (> _lbv9 _lbv8) (= _lbv9 _lbv8)))
(assert (= |3| 3))
(assert (not (> _lbv9 |3|)))
(assert (or (> _lbv12 _lbv5) (= _lbv12 _lbv5)))
(assert (= |3| 3))
(assert (not (> _lbv12 |3|)))
(assert (or (> _lbv11 _lbv6) (= _lbv11 _lbv6)))
(assert (= |3| 3))
(assert (not (> _lbv11 |3|)))
(assert (= _lbv8 (- s 1)))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (= _lbv8 (- s 1)))
(assert (not (> s _lbv8)))

 
 Enumerating a Scalar Term _lbv1
 
 Type of the Scalar Term {v:Ty_int | 
 	 Conj <c 
 Disj <d  v > s
 	,   v = s>d 
 	 , Negation v > 3 >c }                                                                                                                                                                                                                                                                               
solver 
 (declare-sort T4161)
(declare-fun set475 (Bool) Bool)
(declare-fun slist (T4161 Bool) Bool)
(declare-fun nil () T4161)
(declare-fun slen (T4161) Int)
(declare-fun |0| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv5 () Int)
(declare-fun s () Int)
(declare-fun _lbv6 () Int)
(declare-fun _lbv7 () Int)
(declare-fun _lbv8 () Int)
(declare-fun set476 (Bool) Bool)
(declare-fun _lbv13 () T4161)
(declare-fun shd (T4161) Int)
(declare-fun set477 (Bool) Bool)
(declare-fun _lbv14 () T4161)
(declare-fun set478 (Bool) Bool)
(declare-fun _lbv15 () T4161)
(declare-fun set479 (Bool) Bool)
(declare-fun _lbv16 () T4161)
(declare-fun set480 (Bool) Bool)
(declare-fun _lbv17 () T4161)
(declare-fun set481 (Bool) Bool)
(declare-fun _lbv18 () T4161)
(declare-fun set482 (Bool) Bool)
(declare-fun _lbv19 () T4161)
(declare-fun set483 (Bool) Bool)
(declare-fun _lbv20 () T4161)
(declare-fun |3| () Int)
(declare-fun _lbv10 () Int)
(declare-fun _lbv9 () Int)
(declare-fun _lbv12 () Int)
(declare-fun _lbv11 () Int)
(assert (forall ((bv0 Bool)) (= (set475 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set475 bv0))))
(assert (= (slen nil) 0))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv5))
(assert (> s _lbv6))
(assert (> s _lbv7))
(assert (= _lbv8 (- s 1)))
(assert (forall ((bv0 Bool)) (= (set476 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv13 bv0) (set476 bv0))))
(assert (= (slen _lbv13) s))
(assert (=> (> (slen _lbv13) 0) (or (> (shd _lbv13) x0) (= (shd _lbv13) x0))))
(assert (forall ((bv0 Bool)) (= (set477 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv14 bv0) (set477 bv0))))
(assert (= (slen _lbv14) s))
(assert (=> (> (slen _lbv14) 0) (or (> (shd _lbv14) x0) (= (shd _lbv14) x0))))
(assert (forall ((bv0 Bool)) (= (set478 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv15 bv0) (set478 bv0))))
(assert (= (slen _lbv15) s))
(assert (=> (> (slen _lbv15) 0) (or (> (shd _lbv15) x0) (= (shd _lbv15) x0))))
(assert (forall ((bv0 Bool)) (= (set479 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv16 bv0) (set479 bv0))))
(assert (= (slen _lbv16) s))
(assert (=> (> (slen _lbv16) 0) (or (> (shd _lbv16) x0) (= (shd _lbv16) x0))))
(assert (forall ((bv0 Bool)) (= (set480 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv17 bv0) (set480 bv0))))
(assert (= (slen _lbv17) s))
(assert (=> (> (slen _lbv17) 0) (or (> (shd _lbv17) x0) (= (shd _lbv17) x0))))
(assert (forall ((bv0 Bool)) (= (set481 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv18 bv0) (set481 bv0))))
(assert (= (slen _lbv18) s))
(assert (=> (> (slen _lbv18) 0) (or (> (shd _lbv18) x0) (= (shd _lbv18) x0))))
(assert (forall ((bv0 Bool)) (= (set482 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv19 bv0) (set482 bv0))))
(assert (= (slen _lbv19) s))
(assert (=> (> (slen _lbv19) 0) (or (> (shd _lbv19) x0) (= (shd _lbv19) x0))))
(assert (forall ((bv0 Bool)) (= (set483 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv20 bv0) (set483 bv0))))
(assert (= (slen _lbv20) s))
(assert (=> (> (slen _lbv20) 0) (or (> (shd _lbv20) x0) (= (shd _lbv20) x0))))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (or (> _lbv10 _lbv7) (= _lbv10 _lbv7)))
(assert (= |3| 3))
(assert (not (> _lbv10 |3|)))
(assert (or (> _lbv9 _lbv8) (= _lbv9 _lbv8)))
(assert (= |3| 3))
(assert (not (> _lbv9 |3|)))
(assert (or (> _lbv12 _lbv5) (= _lbv12 _lbv5)))
(assert (= |3| 3))
(assert (not (> _lbv12 |3|)))
(assert (or (> _lbv11 _lbv6) (= _lbv11 _lbv6)))
(assert (= |3| 3))
(assert (not (> _lbv11 |3|)))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (not (> s _lbv1)))

 
 Timedout the subtype check T_vi <: T_goal
 
 Enumerating a Scalar Term _lbv0
 
 Type of the Scalar Term {v:Ty_int | 
 	 Conj <c 
 Disj <d  v > x0
 	,   v = x0>d 
 	 , Negation v > 3 >c }                                                                                                                                                                                                                                                                               
solver 
 (declare-sort T4203)
(declare-fun set484 (Bool) Bool)
(declare-fun slist (T4203 Bool) Bool)
(declare-fun nil () T4203)
(declare-fun slen (T4203) Int)
(declare-fun |0| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv5 () Int)
(declare-fun s () Int)
(declare-fun _lbv6 () Int)
(declare-fun _lbv7 () Int)
(declare-fun _lbv8 () Int)
(declare-fun set485 (Bool) Bool)
(declare-fun _lbv13 () T4203)
(declare-fun shd (T4203) Int)
(declare-fun set486 (Bool) Bool)
(declare-fun _lbv14 () T4203)
(declare-fun set487 (Bool) Bool)
(declare-fun _lbv15 () T4203)
(declare-fun set488 (Bool) Bool)
(declare-fun _lbv16 () T4203)
(declare-fun set489 (Bool) Bool)
(declare-fun _lbv17 () T4203)
(declare-fun set490 (Bool) Bool)
(declare-fun _lbv18 () T4203)
(declare-fun set491 (Bool) Bool)
(declare-fun _lbv19 () T4203)
(declare-fun set492 (Bool) Bool)
(declare-fun _lbv20 () T4203)
(declare-fun |3| () Int)
(declare-fun _lbv10 () Int)
(declare-fun _lbv9 () Int)
(declare-fun _lbv12 () Int)
(declare-fun _lbv11 () Int)
(assert (forall ((bv0 Bool)) (= (set484 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set484 bv0))))
(assert (= (slen nil) 0))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv5))
(assert (> s _lbv6))
(assert (> s _lbv7))
(assert (= _lbv8 (- s 1)))
(assert (forall ((bv0 Bool)) (= (set485 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv13 bv0) (set485 bv0))))
(assert (= (slen _lbv13) s))
(assert (=> (> (slen _lbv13) 0) (or (> (shd _lbv13) x0) (= (shd _lbv13) x0))))
(assert (forall ((bv0 Bool)) (= (set486 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv14 bv0) (set486 bv0))))
(assert (= (slen _lbv14) s))
(assert (=> (> (slen _lbv14) 0) (or (> (shd _lbv14) x0) (= (shd _lbv14) x0))))
(assert (forall ((bv0 Bool)) (= (set487 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv15 bv0) (set487 bv0))))
(assert (= (slen _lbv15) s))
(assert (=> (> (slen _lbv15) 0) (or (> (shd _lbv15) x0) (= (shd _lbv15) x0))))
(assert (forall ((bv0 Bool)) (= (set488 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv16 bv0) (set488 bv0))))
(assert (= (slen _lbv16) s))
(assert (=> (> (slen _lbv16) 0) (or (> (shd _lbv16) x0) (= (shd _lbv16) x0))))
(assert (forall ((bv0 Bool)) (= (set489 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv17 bv0) (set489 bv0))))
(assert (= (slen _lbv17) s))
(assert (=> (> (slen _lbv17) 0) (or (> (shd _lbv17) x0) (= (shd _lbv17) x0))))
(assert (forall ((bv0 Bool)) (= (set490 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv18 bv0) (set490 bv0))))
(assert (= (slen _lbv18) s))
(assert (=> (> (slen _lbv18) 0) (or (> (shd _lbv18) x0) (= (shd _lbv18) x0))))
(assert (forall ((bv0 Bool)) (= (set491 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv19 bv0) (set491 bv0))))
(assert (= (slen _lbv19) s))
(assert (=> (> (slen _lbv19) 0) (or (> (shd _lbv19) x0) (= (shd _lbv19) x0))))
(assert (forall ((bv0 Bool)) (= (set492 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv20 bv0) (set492 bv0))))
(assert (= (slen _lbv20) s))
(assert (=> (> (slen _lbv20) 0) (or (> (shd _lbv20) x0) (= (shd _lbv20) x0))))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv10 _lbv7) (= _lbv10 _lbv7)))
(assert (= |3| 3))
(assert (not (> _lbv10 |3|)))
(assert (or (> _lbv9 _lbv8) (= _lbv9 _lbv8)))
(assert (= |3| 3))
(assert (not (> _lbv9 |3|)))
(assert (or (> _lbv12 _lbv5) (= _lbv12 _lbv5)))
(assert (= |3| 3))
(assert (not (> _lbv12 |3|)))
(assert (or (> _lbv11 _lbv6) (= _lbv11 _lbv6)))
(assert (= |3| 3))
(assert (not (> _lbv11 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (not (> s _lbv0)))

 
 Timedout the subtype check T_vi <: T_goal
 
 Enumerating a Scalar Term _lbv10
 
 Type of the Scalar Term {v:Ty_int | 
 	 Conj <c 
 Disj <d  v > _lbv7
 	,   v = _lbv7>d 
 	 , Negation v > 3 >c }                                                                                                                                                                                                                                                                               
solver 
 (declare-sort T4245)
(declare-fun set493 (Bool) Bool)
(declare-fun slist (T4245 Bool) Bool)
(declare-fun nil () T4245)
(declare-fun slen (T4245) Int)
(declare-fun |0| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv5 () Int)
(declare-fun s () Int)
(declare-fun _lbv6 () Int)
(declare-fun _lbv7 () Int)
(declare-fun _lbv8 () Int)
(declare-fun set494 (Bool) Bool)
(declare-fun _lbv13 () T4245)
(declare-fun shd (T4245) Int)
(declare-fun set495 (Bool) Bool)
(declare-fun _lbv14 () T4245)
(declare-fun set496 (Bool) Bool)
(declare-fun _lbv15 () T4245)
(declare-fun set497 (Bool) Bool)
(declare-fun _lbv16 () T4245)
(declare-fun set498 (Bool) Bool)
(declare-fun _lbv17 () T4245)
(declare-fun set499 (Bool) Bool)
(declare-fun _lbv18 () T4245)
(declare-fun set500 (Bool) Bool)
(declare-fun _lbv19 () T4245)
(declare-fun set501 (Bool) Bool)
(declare-fun _lbv20 () T4245)
(declare-fun |3| () Int)
(declare-fun _lbv9 () Int)
(declare-fun _lbv12 () Int)
(declare-fun _lbv11 () Int)
(declare-fun _lbv10 () Int)
(assert (forall ((bv0 Bool)) (= (set493 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set493 bv0))))
(assert (= (slen nil) 0))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv5))
(assert (> s _lbv6))
(assert (> s _lbv7))
(assert (= _lbv8 (- s 1)))
(assert (forall ((bv0 Bool)) (= (set494 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv13 bv0) (set494 bv0))))
(assert (= (slen _lbv13) s))
(assert (=> (> (slen _lbv13) 0) (or (> (shd _lbv13) x0) (= (shd _lbv13) x0))))
(assert (forall ((bv0 Bool)) (= (set495 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv14 bv0) (set495 bv0))))
(assert (= (slen _lbv14) s))
(assert (=> (> (slen _lbv14) 0) (or (> (shd _lbv14) x0) (= (shd _lbv14) x0))))
(assert (forall ((bv0 Bool)) (= (set496 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv15 bv0) (set496 bv0))))
(assert (= (slen _lbv15) s))
(assert (=> (> (slen _lbv15) 0) (or (> (shd _lbv15) x0) (= (shd _lbv15) x0))))
(assert (forall ((bv0 Bool)) (= (set497 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv16 bv0) (set497 bv0))))
(assert (= (slen _lbv16) s))
(assert (=> (> (slen _lbv16) 0) (or (> (shd _lbv16) x0) (= (shd _lbv16) x0))))
(assert (forall ((bv0 Bool)) (= (set498 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv17 bv0) (set498 bv0))))
(assert (= (slen _lbv17) s))
(assert (=> (> (slen _lbv17) 0) (or (> (shd _lbv17) x0) (= (shd _lbv17) x0))))
(assert (forall ((bv0 Bool)) (= (set499 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv18 bv0) (set499 bv0))))
(assert (= (slen _lbv18) s))
(assert (=> (> (slen _lbv18) 0) (or (> (shd _lbv18) x0) (= (shd _lbv18) x0))))
(assert (forall ((bv0 Bool)) (= (set500 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv19 bv0) (set500 bv0))))
(assert (= (slen _lbv19) s))
(assert (=> (> (slen _lbv19) 0) (or (> (shd _lbv19) x0) (= (shd _lbv19) x0))))
(assert (forall ((bv0 Bool)) (= (set501 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv20 bv0) (set501 bv0))))
(assert (= (slen _lbv20) s))
(assert (=> (> (slen _lbv20) 0) (or (> (shd _lbv20) x0) (= (shd _lbv20) x0))))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (or (> _lbv9 _lbv8) (= _lbv9 _lbv8)))
(assert (= |3| 3))
(assert (not (> _lbv9 |3|)))
(assert (or (> _lbv12 _lbv5) (= _lbv12 _lbv5)))
(assert (= |3| 3))
(assert (not (> _lbv12 |3|)))
(assert (or (> _lbv11 _lbv6) (= _lbv11 _lbv6)))
(assert (= |3| 3))
(assert (not (> _lbv11 |3|)))
(assert (or (> _lbv10 _lbv7) (= _lbv10 _lbv7)))
(assert (= |3| 3))
(assert (not (> _lbv10 |3|)))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (or (> _lbv10 _lbv7) (= _lbv10 _lbv7)))
(assert (= |3| 3))
(assert (not (> _lbv10 |3|)))
(assert (not (> s _lbv10)))

 
 Timedout the subtype check T_vi <: T_goal
 
 Enumerating a Scalar Term _lbv9
 
 Type of the Scalar Term {v:Ty_int | 
 	 Conj <c 
 Disj <d  v > _lbv8
 	,   v = _lbv8>d 
 	 , Negation v > 3 >c }                                                                                                                                                                                                                                                                               
solver 
 (declare-sort T4287)
(declare-fun set502 (Bool) Bool)
(declare-fun slist (T4287 Bool) Bool)
(declare-fun nil () T4287)
(declare-fun slen (T4287) Int)
(declare-fun |0| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv5 () Int)
(declare-fun s () Int)
(declare-fun _lbv6 () Int)
(declare-fun _lbv7 () Int)
(declare-fun _lbv8 () Int)
(declare-fun set503 (Bool) Bool)
(declare-fun _lbv13 () T4287)
(declare-fun shd (T4287) Int)
(declare-fun set504 (Bool) Bool)
(declare-fun _lbv14 () T4287)
(declare-fun set505 (Bool) Bool)
(declare-fun _lbv15 () T4287)
(declare-fun set506 (Bool) Bool)
(declare-fun _lbv16 () T4287)
(declare-fun set507 (Bool) Bool)
(declare-fun _lbv17 () T4287)
(declare-fun set508 (Bool) Bool)
(declare-fun _lbv18 () T4287)
(declare-fun set509 (Bool) Bool)
(declare-fun _lbv19 () T4287)
(declare-fun set510 (Bool) Bool)
(declare-fun _lbv20 () T4287)
(declare-fun |3| () Int)
(declare-fun _lbv10 () Int)
(declare-fun _lbv12 () Int)
(declare-fun _lbv11 () Int)
(declare-fun _lbv9 () Int)
(assert (forall ((bv0 Bool)) (= (set502 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set502 bv0))))
(assert (= (slen nil) 0))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv5))
(assert (> s _lbv6))
(assert (> s _lbv7))
(assert (= _lbv8 (- s 1)))
(assert (forall ((bv0 Bool)) (= (set503 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv13 bv0) (set503 bv0))))
(assert (= (slen _lbv13) s))
(assert (=> (> (slen _lbv13) 0) (or (> (shd _lbv13) x0) (= (shd _lbv13) x0))))
(assert (forall ((bv0 Bool)) (= (set504 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv14 bv0) (set504 bv0))))
(assert (= (slen _lbv14) s))
(assert (=> (> (slen _lbv14) 0) (or (> (shd _lbv14) x0) (= (shd _lbv14) x0))))
(assert (forall ((bv0 Bool)) (= (set505 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv15 bv0) (set505 bv0))))
(assert (= (slen _lbv15) s))
(assert (=> (> (slen _lbv15) 0) (or (> (shd _lbv15) x0) (= (shd _lbv15) x0))))
(assert (forall ((bv0 Bool)) (= (set506 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv16 bv0) (set506 bv0))))
(assert (= (slen _lbv16) s))
(assert (=> (> (slen _lbv16) 0) (or (> (shd _lbv16) x0) (= (shd _lbv16) x0))))
(assert (forall ((bv0 Bool)) (= (set507 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv17 bv0) (set507 bv0))))
(assert (= (slen _lbv17) s))
(assert (=> (> (slen _lbv17) 0) (or (> (shd _lbv17) x0) (= (shd _lbv17) x0))))
(assert (forall ((bv0 Bool)) (= (set508 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv18 bv0) (set508 bv0))))
(assert (= (slen _lbv18) s))
(assert (=> (> (slen _lbv18) 0) (or (> (shd _lbv18) x0) (= (shd _lbv18) x0))))
(assert (forall ((bv0 Bool)) (= (set509 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv19 bv0) (set509 bv0))))
(assert (= (slen _lbv19) s))
(assert (=> (> (slen _lbv19) 0) (or (> (shd _lbv19) x0) (= (shd _lbv19) x0))))
(assert (forall ((bv0 Bool)) (= (set510 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv20 bv0) (set510 bv0))))
(assert (= (slen _lbv20) s))
(assert (=> (> (slen _lbv20) 0) (or (> (shd _lbv20) x0) (= (shd _lbv20) x0))))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (or (> _lbv10 _lbv7) (= _lbv10 _lbv7)))
(assert (= |3| 3))
(assert (not (> _lbv10 |3|)))
(assert (or (> _lbv12 _lbv5) (= _lbv12 _lbv5)))
(assert (= |3| 3))
(assert (not (> _lbv12 |3|)))
(assert (or (> _lbv11 _lbv6) (= _lbv11 _lbv6)))
(assert (= |3| 3))
(assert (not (> _lbv11 |3|)))
(assert (or (> _lbv9 _lbv8) (= _lbv9 _lbv8)))
(assert (= |3| 3))
(assert (not (> _lbv9 |3|)))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (or (> _lbv9 _lbv8) (= _lbv9 _lbv8)))
(assert (= |3| 3))
(assert (not (> _lbv9 |3|)))
(assert (not (> s _lbv9)))

 
 Timedout the subtype check T_vi <: T_goal
 
 Enumerating a Scalar Term _lbv12
 
 Type of the Scalar Term {v:Ty_int | 
 	 Conj <c 
 Disj <d  v > _lbv5
 	,   v = _lbv5>d 
 	 , Negation v > 3 >c }                                                                                                                                                                                                                                                                               
solver 
 (declare-sort T4329)
(declare-fun set511 (Bool) Bool)
(declare-fun slist (T4329 Bool) Bool)
(declare-fun nil () T4329)
(declare-fun slen (T4329) Int)
(declare-fun |0| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv5 () Int)
(declare-fun s () Int)
(declare-fun _lbv6 () Int)
(declare-fun _lbv7 () Int)
(declare-fun _lbv8 () Int)
(declare-fun set512 (Bool) Bool)
(declare-fun _lbv13 () T4329)
(declare-fun shd (T4329) Int)
(declare-fun set513 (Bool) Bool)
(declare-fun _lbv14 () T4329)
(declare-fun set514 (Bool) Bool)
(declare-fun _lbv15 () T4329)
(declare-fun set515 (Bool) Bool)
(declare-fun _lbv16 () T4329)
(declare-fun set516 (Bool) Bool)
(declare-fun _lbv17 () T4329)
(declare-fun set517 (Bool) Bool)
(declare-fun _lbv18 () T4329)
(declare-fun set518 (Bool) Bool)
(declare-fun _lbv19 () T4329)
(declare-fun set519 (Bool) Bool)
(declare-fun _lbv20 () T4329)
(declare-fun |3| () Int)
(declare-fun _lbv10 () Int)
(declare-fun _lbv9 () Int)
(declare-fun _lbv11 () Int)
(declare-fun _lbv12 () Int)
(assert (forall ((bv0 Bool)) (= (set511 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set511 bv0))))
(assert (= (slen nil) 0))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv5))
(assert (> s _lbv6))
(assert (> s _lbv7))
(assert (= _lbv8 (- s 1)))
(assert (forall ((bv0 Bool)) (= (set512 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv13 bv0) (set512 bv0))))
(assert (= (slen _lbv13) s))
(assert (=> (> (slen _lbv13) 0) (or (> (shd _lbv13) x0) (= (shd _lbv13) x0))))
(assert (forall ((bv0 Bool)) (= (set513 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv14 bv0) (set513 bv0))))
(assert (= (slen _lbv14) s))
(assert (=> (> (slen _lbv14) 0) (or (> (shd _lbv14) x0) (= (shd _lbv14) x0))))
(assert (forall ((bv0 Bool)) (= (set514 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv15 bv0) (set514 bv0))))
(assert (= (slen _lbv15) s))
(assert (=> (> (slen _lbv15) 0) (or (> (shd _lbv15) x0) (= (shd _lbv15) x0))))
(assert (forall ((bv0 Bool)) (= (set515 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv16 bv0) (set515 bv0))))
(assert (= (slen _lbv16) s))
(assert (=> (> (slen _lbv16) 0) (or (> (shd _lbv16) x0) (= (shd _lbv16) x0))))
(assert (forall ((bv0 Bool)) (= (set516 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv17 bv0) (set516 bv0))))
(assert (= (slen _lbv17) s))
(assert (=> (> (slen _lbv17) 0) (or (> (shd _lbv17) x0) (= (shd _lbv17) x0))))
(assert (forall ((bv0 Bool)) (= (set517 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv18 bv0) (set517 bv0))))
(assert (= (slen _lbv18) s))
(assert (=> (> (slen _lbv18) 0) (or (> (shd _lbv18) x0) (= (shd _lbv18) x0))))
(assert (forall ((bv0 Bool)) (= (set518 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv19 bv0) (set518 bv0))))
(assert (= (slen _lbv19) s))
(assert (=> (> (slen _lbv19) 0) (or (> (shd _lbv19) x0) (= (shd _lbv19) x0))))
(assert (forall ((bv0 Bool)) (= (set519 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv20 bv0) (set519 bv0))))
(assert (= (slen _lbv20) s))
(assert (=> (> (slen _lbv20) 0) (or (> (shd _lbv20) x0) (= (shd _lbv20) x0))))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (or (> _lbv10 _lbv7) (= _lbv10 _lbv7)))
(assert (= |3| 3))
(assert (not (> _lbv10 |3|)))
(assert (or (> _lbv9 _lbv8) (= _lbv9 _lbv8)))
(assert (= |3| 3))
(assert (not (> _lbv9 |3|)))
(assert (or (> _lbv11 _lbv6) (= _lbv11 _lbv6)))
(assert (= |3| 3))
(assert (not (> _lbv11 |3|)))
(assert (or (> _lbv12 _lbv5) (= _lbv12 _lbv5)))
(assert (= |3| 3))
(assert (not (> _lbv12 |3|)))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (or (> _lbv12 _lbv5) (= _lbv12 _lbv5)))
(assert (= |3| 3))
(assert (not (> _lbv12 |3|)))
(assert (not (> s _lbv12)))

 
 Timedout the subtype check T_vi <: T_goal
 
 Enumerating a Scalar Term _lbv11
 
 Type of the Scalar Term {v:Ty_int | 
 	 Conj <c 
 Disj <d  v > _lbv6
 	,   v = _lbv6>d 
 	 , Negation v > 3 >c }                                                                                                                                                                                                                                                                               
solver 
 (declare-sort T4371)
(declare-fun set520 (Bool) Bool)
(declare-fun slist (T4371 Bool) Bool)
(declare-fun nil () T4371)
(declare-fun slen (T4371) Int)
(declare-fun |0| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv5 () Int)
(declare-fun s () Int)
(declare-fun _lbv6 () Int)
(declare-fun _lbv7 () Int)
(declare-fun _lbv8 () Int)
(declare-fun set521 (Bool) Bool)
(declare-fun _lbv13 () T4371)
(declare-fun shd (T4371) Int)
(declare-fun set522 (Bool) Bool)
(declare-fun _lbv14 () T4371)
(declare-fun set523 (Bool) Bool)
(declare-fun _lbv15 () T4371)
(declare-fun set524 (Bool) Bool)
(declare-fun _lbv16 () T4371)
(declare-fun set525 (Bool) Bool)
(declare-fun _lbv17 () T4371)
(declare-fun set526 (Bool) Bool)
(declare-fun _lbv18 () T4371)
(declare-fun set527 (Bool) Bool)
(declare-fun _lbv19 () T4371)
(declare-fun set528 (Bool) Bool)
(declare-fun _lbv20 () T4371)
(declare-fun |3| () Int)
(declare-fun _lbv10 () Int)
(declare-fun _lbv9 () Int)
(declare-fun _lbv12 () Int)
(declare-fun _lbv11 () Int)
(assert (forall ((bv0 Bool)) (= (set520 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set520 bv0))))
(assert (= (slen nil) 0))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv5))
(assert (> s _lbv6))
(assert (> s _lbv7))
(assert (= _lbv8 (- s 1)))
(assert (forall ((bv0 Bool)) (= (set521 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv13 bv0) (set521 bv0))))
(assert (= (slen _lbv13) s))
(assert (=> (> (slen _lbv13) 0) (or (> (shd _lbv13) x0) (= (shd _lbv13) x0))))
(assert (forall ((bv0 Bool)) (= (set522 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv14 bv0) (set522 bv0))))
(assert (= (slen _lbv14) s))
(assert (=> (> (slen _lbv14) 0) (or (> (shd _lbv14) x0) (= (shd _lbv14) x0))))
(assert (forall ((bv0 Bool)) (= (set523 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv15 bv0) (set523 bv0))))
(assert (= (slen _lbv15) s))
(assert (=> (> (slen _lbv15) 0) (or (> (shd _lbv15) x0) (= (shd _lbv15) x0))))
(assert (forall ((bv0 Bool)) (= (set524 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv16 bv0) (set524 bv0))))
(assert (= (slen _lbv16) s))
(assert (=> (> (slen _lbv16) 0) (or (> (shd _lbv16) x0) (= (shd _lbv16) x0))))
(assert (forall ((bv0 Bool)) (= (set525 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv17 bv0) (set525 bv0))))
(assert (= (slen _lbv17) s))
(assert (=> (> (slen _lbv17) 0) (or (> (shd _lbv17) x0) (= (shd _lbv17) x0))))
(assert (forall ((bv0 Bool)) (= (set526 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv18 bv0) (set526 bv0))))
(assert (= (slen _lbv18) s))
(assert (=> (> (slen _lbv18) 0) (or (> (shd _lbv18) x0) (= (shd _lbv18) x0))))
(assert (forall ((bv0 Bool)) (= (set527 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv19 bv0) (set527 bv0))))
(assert (= (slen _lbv19) s))
(assert (=> (> (slen _lbv19) 0) (or (> (shd _lbv19) x0) (= (shd _lbv19) x0))))
(assert (forall ((bv0 Bool)) (= (set528 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv20 bv0) (set528 bv0))))
(assert (= (slen _lbv20) s))
(assert (=> (> (slen _lbv20) 0) (or (> (shd _lbv20) x0) (= (shd _lbv20) x0))))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (or (> _lbv10 _lbv7) (= _lbv10 _lbv7)))
(assert (= |3| 3))
(assert (not (> _lbv10 |3|)))
(assert (or (> _lbv9 _lbv8) (= _lbv9 _lbv8)))
(assert (= |3| 3))
(assert (not (> _lbv9 |3|)))
(assert (or (> _lbv12 _lbv5) (= _lbv12 _lbv5)))
(assert (= |3| 3))
(assert (not (> _lbv12 |3|)))
(assert (or (> _lbv11 _lbv6) (= _lbv11 _lbv6)))
(assert (= |3| 3))
(assert (not (> _lbv11 |3|)))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (or (> _lbv11 _lbv6) (= _lbv11 _lbv6)))
(assert (= |3| 3))
(assert (not (> _lbv11 |3|)))
(assert (not (> s _lbv11)))

 
 Timedout the subtype check T_vi <: T_goal
 Show :: Found a Few Macthing Scalars 
  Next Trying Arguments of the form f (ei...) 
  Pure Fun Application: esynthesizePureApp 
 ##################################################################################
  Synthesizing the 2th argument for Function goal
  Trying Arguments in Scalars 
 esynthesizeScalar for {var_v3:Ty_int | true}
  Enumeration for 
 spec 
 {var_v3:Ty_int | true}
 
 Enumerating a Scalar Term s
 
 Type of the Scalar Term {v:Ty_int | true}                                                                                                                                                                                                                                                          
solver 
 (declare-sort T4413)
(declare-fun set529 (Bool) Bool)
(declare-fun slist (T4413 Bool) Bool)
(declare-fun nil () T4413)
(declare-fun slen (T4413) Int)
(declare-fun |0| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv5 () Int)
(declare-fun s () Int)
(declare-fun _lbv6 () Int)
(declare-fun _lbv7 () Int)
(declare-fun _lbv8 () Int)
(declare-fun set530 (Bool) Bool)
(declare-fun _lbv13 () T4413)
(declare-fun shd (T4413) Int)
(declare-fun set531 (Bool) Bool)
(declare-fun _lbv14 () T4413)
(declare-fun set532 (Bool) Bool)
(declare-fun _lbv15 () T4413)
(declare-fun set533 (Bool) Bool)
(declare-fun _lbv16 () T4413)
(declare-fun set534 (Bool) Bool)
(declare-fun _lbv17 () T4413)
(declare-fun set535 (Bool) Bool)
(declare-fun _lbv18 () T4413)
(declare-fun set536 (Bool) Bool)
(declare-fun _lbv19 () T4413)
(declare-fun set537 (Bool) Bool)
(declare-fun _lbv20 () T4413)
(declare-fun |3| () Int)
(declare-fun _lbv10 () Int)
(declare-fun _lbv9 () Int)
(declare-fun _lbv12 () Int)
(declare-fun _lbv11 () Int)
(assert (forall ((bv0 Bool)) (= (set529 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set529 bv0))))
(assert (= (slen nil) 0))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv5))
(assert (> s _lbv6))
(assert (> s _lbv7))
(assert (= _lbv8 (- s 1)))
(assert (forall ((bv0 Bool)) (= (set530 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv13 bv0) (set530 bv0))))
(assert (= (slen _lbv13) s))
(assert (=> (> (slen _lbv13) 0) (or (> (shd _lbv13) x0) (= (shd _lbv13) x0))))
(assert (forall ((bv0 Bool)) (= (set531 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv14 bv0) (set531 bv0))))
(assert (= (slen _lbv14) s))
(assert (=> (> (slen _lbv14) 0) (or (> (shd _lbv14) x0) (= (shd _lbv14) x0))))
(assert (forall ((bv0 Bool)) (= (set532 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv15 bv0) (set532 bv0))))
(assert (= (slen _lbv15) s))
(assert (=> (> (slen _lbv15) 0) (or (> (shd _lbv15) x0) (= (shd _lbv15) x0))))
(assert (forall ((bv0 Bool)) (= (set533 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv16 bv0) (set533 bv0))))
(assert (= (slen _lbv16) s))
(assert (=> (> (slen _lbv16) 0) (or (> (shd _lbv16) x0) (= (shd _lbv16) x0))))
(assert (forall ((bv0 Bool)) (= (set534 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv17 bv0) (set534 bv0))))
(assert (= (slen _lbv17) s))
(assert (=> (> (slen _lbv17) 0) (or (> (shd _lbv17) x0) (= (shd _lbv17) x0))))
(assert (forall ((bv0 Bool)) (= (set535 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv18 bv0) (set535 bv0))))
(assert (= (slen _lbv18) s))
(assert (=> (> (slen _lbv18) 0) (or (> (shd _lbv18) x0) (= (shd _lbv18) x0))))
(assert (forall ((bv0 Bool)) (= (set536 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv19 bv0) (set536 bv0))))
(assert (= (slen _lbv19) s))
(assert (=> (> (slen _lbv19) 0) (or (> (shd _lbv19) x0) (= (shd _lbv19) x0))))
(assert (forall ((bv0 Bool)) (= (set537 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv20 bv0) (set537 bv0))))
(assert (= (slen _lbv20) s))
(assert (=> (> (slen _lbv20) 0) (or (> (shd _lbv20) x0) (= (shd _lbv20) x0))))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (or (> _lbv10 _lbv7) (= _lbv10 _lbv7)))
(assert (= |3| 3))
(assert (not (> _lbv10 |3|)))
(assert (or (> _lbv9 _lbv8) (= _lbv9 _lbv8)))
(assert (= |3| 3))
(assert (not (> _lbv9 |3|)))
(assert (or (> _lbv12 _lbv5) (= _lbv12 _lbv5)))
(assert (= |3| 3))
(assert (not (> _lbv12 |3|)))
(assert (or (> _lbv11 _lbv6) (= _lbv11 _lbv6)))
(assert (= |3| 3))
(assert (not (> _lbv11 |3|)))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (not true))

 
 Enumerating a Scalar Term x0
 
 Type of the Scalar Term {var_v3:Ty_int | true}                                                                                                                                                                                                                                                          
solver 
 (declare-sort T4455)
(declare-fun set538 (Bool) Bool)
(declare-fun slist (T4455 Bool) Bool)
(declare-fun nil () T4455)
(declare-fun slen (T4455) Int)
(declare-fun |0| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv5 () Int)
(declare-fun s () Int)
(declare-fun _lbv6 () Int)
(declare-fun _lbv7 () Int)
(declare-fun _lbv8 () Int)
(declare-fun set539 (Bool) Bool)
(declare-fun _lbv13 () T4455)
(declare-fun shd (T4455) Int)
(declare-fun set540 (Bool) Bool)
(declare-fun _lbv14 () T4455)
(declare-fun set541 (Bool) Bool)
(declare-fun _lbv15 () T4455)
(declare-fun set542 (Bool) Bool)
(declare-fun _lbv16 () T4455)
(declare-fun set543 (Bool) Bool)
(declare-fun _lbv17 () T4455)
(declare-fun set544 (Bool) Bool)
(declare-fun _lbv18 () T4455)
(declare-fun set545 (Bool) Bool)
(declare-fun _lbv19 () T4455)
(declare-fun set546 (Bool) Bool)
(declare-fun _lbv20 () T4455)
(declare-fun |3| () Int)
(declare-fun _lbv10 () Int)
(declare-fun _lbv9 () Int)
(declare-fun _lbv12 () Int)
(declare-fun _lbv11 () Int)
(assert (forall ((bv0 Bool)) (= (set538 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set538 bv0))))
(assert (= (slen nil) 0))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv5))
(assert (> s _lbv6))
(assert (> s _lbv7))
(assert (= _lbv8 (- s 1)))
(assert (forall ((bv0 Bool)) (= (set539 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv13 bv0) (set539 bv0))))
(assert (= (slen _lbv13) s))
(assert (=> (> (slen _lbv13) 0) (or (> (shd _lbv13) x0) (= (shd _lbv13) x0))))
(assert (forall ((bv0 Bool)) (= (set540 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv14 bv0) (set540 bv0))))
(assert (= (slen _lbv14) s))
(assert (=> (> (slen _lbv14) 0) (or (> (shd _lbv14) x0) (= (shd _lbv14) x0))))
(assert (forall ((bv0 Bool)) (= (set541 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv15 bv0) (set541 bv0))))
(assert (= (slen _lbv15) s))
(assert (=> (> (slen _lbv15) 0) (or (> (shd _lbv15) x0) (= (shd _lbv15) x0))))
(assert (forall ((bv0 Bool)) (= (set542 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv16 bv0) (set542 bv0))))
(assert (= (slen _lbv16) s))
(assert (=> (> (slen _lbv16) 0) (or (> (shd _lbv16) x0) (= (shd _lbv16) x0))))
(assert (forall ((bv0 Bool)) (= (set543 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv17 bv0) (set543 bv0))))
(assert (= (slen _lbv17) s))
(assert (=> (> (slen _lbv17) 0) (or (> (shd _lbv17) x0) (= (shd _lbv17) x0))))
(assert (forall ((bv0 Bool)) (= (set544 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv18 bv0) (set544 bv0))))
(assert (= (slen _lbv18) s))
(assert (=> (> (slen _lbv18) 0) (or (> (shd _lbv18) x0) (= (shd _lbv18) x0))))
(assert (forall ((bv0 Bool)) (= (set545 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv19 bv0) (set545 bv0))))
(assert (= (slen _lbv19) s))
(assert (=> (> (slen _lbv19) 0) (or (> (shd _lbv19) x0) (= (shd _lbv19) x0))))
(assert (forall ((bv0 Bool)) (= (set546 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv20 bv0) (set546 bv0))))
(assert (= (slen _lbv20) s))
(assert (=> (> (slen _lbv20) 0) (or (> (shd _lbv20) x0) (= (shd _lbv20) x0))))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (or (> _lbv10 _lbv7) (= _lbv10 _lbv7)))
(assert (= |3| 3))
(assert (not (> _lbv10 |3|)))
(assert (or (> _lbv9 _lbv8) (= _lbv9 _lbv8)))
(assert (= |3| 3))
(assert (not (> _lbv9 |3|)))
(assert (or (> _lbv12 _lbv5) (= _lbv12 _lbv5)))
(assert (= |3| 3))
(assert (not (> _lbv12 |3|)))
(assert (or (> _lbv11 _lbv6) (= _lbv11 _lbv6)))
(assert (= |3| 3))
(assert (not (> _lbv11 |3|)))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (not true))

 
 Enumerating a Scalar Term _lbv5
 
 Type of the Scalar Term {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c }                                                                                                                                                                                                                                                               
solver 
 (declare-sort T4497)
(declare-fun set547 (Bool) Bool)
(declare-fun slist (T4497 Bool) Bool)
(declare-fun nil () T4497)
(declare-fun slen (T4497) Int)
(declare-fun |0| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv6 () Int)
(declare-fun s () Int)
(declare-fun _lbv7 () Int)
(declare-fun _lbv8 () Int)
(declare-fun set548 (Bool) Bool)
(declare-fun _lbv13 () T4497)
(declare-fun shd (T4497) Int)
(declare-fun set549 (Bool) Bool)
(declare-fun _lbv14 () T4497)
(declare-fun set550 (Bool) Bool)
(declare-fun _lbv15 () T4497)
(declare-fun set551 (Bool) Bool)
(declare-fun _lbv16 () T4497)
(declare-fun set552 (Bool) Bool)
(declare-fun _lbv17 () T4497)
(declare-fun set553 (Bool) Bool)
(declare-fun _lbv18 () T4497)
(declare-fun set554 (Bool) Bool)
(declare-fun _lbv19 () T4497)
(declare-fun set555 (Bool) Bool)
(declare-fun _lbv20 () T4497)
(declare-fun |3| () Int)
(declare-fun _lbv10 () Int)
(declare-fun _lbv9 () Int)
(declare-fun _lbv5 () Int)
(declare-fun _lbv12 () Int)
(declare-fun _lbv11 () Int)
(assert (forall ((bv0 Bool)) (= (set547 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set547 bv0))))
(assert (= (slen nil) 0))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv6))
(assert (> s _lbv7))
(assert (= _lbv8 (- s 1)))
(assert (forall ((bv0 Bool)) (= (set548 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv13 bv0) (set548 bv0))))
(assert (= (slen _lbv13) s))
(assert (=> (> (slen _lbv13) 0) (or (> (shd _lbv13) x0) (= (shd _lbv13) x0))))
(assert (forall ((bv0 Bool)) (= (set549 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv14 bv0) (set549 bv0))))
(assert (= (slen _lbv14) s))
(assert (=> (> (slen _lbv14) 0) (or (> (shd _lbv14) x0) (= (shd _lbv14) x0))))
(assert (forall ((bv0 Bool)) (= (set550 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv15 bv0) (set550 bv0))))
(assert (= (slen _lbv15) s))
(assert (=> (> (slen _lbv15) 0) (or (> (shd _lbv15) x0) (= (shd _lbv15) x0))))
(assert (forall ((bv0 Bool)) (= (set551 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv16 bv0) (set551 bv0))))
(assert (= (slen _lbv16) s))
(assert (=> (> (slen _lbv16) 0) (or (> (shd _lbv16) x0) (= (shd _lbv16) x0))))
(assert (forall ((bv0 Bool)) (= (set552 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv17 bv0) (set552 bv0))))
(assert (= (slen _lbv17) s))
(assert (=> (> (slen _lbv17) 0) (or (> (shd _lbv17) x0) (= (shd _lbv17) x0))))
(assert (forall ((bv0 Bool)) (= (set553 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv18 bv0) (set553 bv0))))
(assert (= (slen _lbv18) s))
(assert (=> (> (slen _lbv18) 0) (or (> (shd _lbv18) x0) (= (shd _lbv18) x0))))
(assert (forall ((bv0 Bool)) (= (set554 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv19 bv0) (set554 bv0))))
(assert (= (slen _lbv19) s))
(assert (=> (> (slen _lbv19) 0) (or (> (shd _lbv19) x0) (= (shd _lbv19) x0))))
(assert (forall ((bv0 Bool)) (= (set555 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv20 bv0) (set555 bv0))))
(assert (= (slen _lbv20) s))
(assert (=> (> (slen _lbv20) 0) (or (> (shd _lbv20) x0) (= (shd _lbv20) x0))))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (or (> _lbv10 _lbv7) (= _lbv10 _lbv7)))
(assert (= |3| 3))
(assert (not (> _lbv10 |3|)))
(assert (or (> _lbv9 _lbv8) (= _lbv9 _lbv8)))
(assert (= |3| 3))
(assert (not (> _lbv9 |3|)))
(assert (or (> _lbv12 _lbv5) (= _lbv12 _lbv5)))
(assert (= |3| 3))
(assert (not (> _lbv12 |3|)))
(assert (or (> _lbv11 _lbv6) (= _lbv11 _lbv6)))
(assert (= |3| 3))
(assert (not (> _lbv11 |3|)))
(assert (> s _lbv5))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv5))
(assert (not true))

 
 Enumerating a Scalar Term _lbv6
 
 Type of the Scalar Term {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c }                                                                                                                                                                                                                                                               
solver 
 (declare-sort T4539)
(declare-fun set556 (Bool) Bool)
(declare-fun slist (T4539 Bool) Bool)
(declare-fun nil () T4539)
(declare-fun slen (T4539) Int)
(declare-fun |0| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv5 () Int)
(declare-fun s () Int)
(declare-fun _lbv7 () Int)
(declare-fun _lbv8 () Int)
(declare-fun set557 (Bool) Bool)
(declare-fun _lbv13 () T4539)
(declare-fun shd (T4539) Int)
(declare-fun set558 (Bool) Bool)
(declare-fun _lbv14 () T4539)
(declare-fun set559 (Bool) Bool)
(declare-fun _lbv15 () T4539)
(declare-fun set560 (Bool) Bool)
(declare-fun _lbv16 () T4539)
(declare-fun set561 (Bool) Bool)
(declare-fun _lbv17 () T4539)
(declare-fun set562 (Bool) Bool)
(declare-fun _lbv18 () T4539)
(declare-fun set563 (Bool) Bool)
(declare-fun _lbv19 () T4539)
(declare-fun set564 (Bool) Bool)
(declare-fun _lbv20 () T4539)
(declare-fun |3| () Int)
(declare-fun _lbv10 () Int)
(declare-fun _lbv9 () Int)
(declare-fun _lbv12 () Int)
(declare-fun _lbv6 () Int)
(declare-fun _lbv11 () Int)
(assert (forall ((bv0 Bool)) (= (set556 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set556 bv0))))
(assert (= (slen nil) 0))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv5))
(assert (> s _lbv7))
(assert (= _lbv8 (- s 1)))
(assert (forall ((bv0 Bool)) (= (set557 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv13 bv0) (set557 bv0))))
(assert (= (slen _lbv13) s))
(assert (=> (> (slen _lbv13) 0) (or (> (shd _lbv13) x0) (= (shd _lbv13) x0))))
(assert (forall ((bv0 Bool)) (= (set558 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv14 bv0) (set558 bv0))))
(assert (= (slen _lbv14) s))
(assert (=> (> (slen _lbv14) 0) (or (> (shd _lbv14) x0) (= (shd _lbv14) x0))))
(assert (forall ((bv0 Bool)) (= (set559 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv15 bv0) (set559 bv0))))
(assert (= (slen _lbv15) s))
(assert (=> (> (slen _lbv15) 0) (or (> (shd _lbv15) x0) (= (shd _lbv15) x0))))
(assert (forall ((bv0 Bool)) (= (set560 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv16 bv0) (set560 bv0))))
(assert (= (slen _lbv16) s))
(assert (=> (> (slen _lbv16) 0) (or (> (shd _lbv16) x0) (= (shd _lbv16) x0))))
(assert (forall ((bv0 Bool)) (= (set561 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv17 bv0) (set561 bv0))))
(assert (= (slen _lbv17) s))
(assert (=> (> (slen _lbv17) 0) (or (> (shd _lbv17) x0) (= (shd _lbv17) x0))))
(assert (forall ((bv0 Bool)) (= (set562 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv18 bv0) (set562 bv0))))
(assert (= (slen _lbv18) s))
(assert (=> (> (slen _lbv18) 0) (or (> (shd _lbv18) x0) (= (shd _lbv18) x0))))
(assert (forall ((bv0 Bool)) (= (set563 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv19 bv0) (set563 bv0))))
(assert (= (slen _lbv19) s))
(assert (=> (> (slen _lbv19) 0) (or (> (shd _lbv19) x0) (= (shd _lbv19) x0))))
(assert (forall ((bv0 Bool)) (= (set564 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv20 bv0) (set564 bv0))))
(assert (= (slen _lbv20) s))
(assert (=> (> (slen _lbv20) 0) (or (> (shd _lbv20) x0) (= (shd _lbv20) x0))))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (or (> _lbv10 _lbv7) (= _lbv10 _lbv7)))
(assert (= |3| 3))
(assert (not (> _lbv10 |3|)))
(assert (or (> _lbv9 _lbv8) (= _lbv9 _lbv8)))
(assert (= |3| 3))
(assert (not (> _lbv9 |3|)))
(assert (or (> _lbv12 _lbv5) (= _lbv12 _lbv5)))
(assert (= |3| 3))
(assert (not (> _lbv12 |3|)))
(assert (or (> _lbv11 _lbv6) (= _lbv11 _lbv6)))
(assert (= |3| 3))
(assert (not (> _lbv11 |3|)))
(assert (> s _lbv6))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv6))
(assert (not true))

 
 Enumerating a Scalar Term _lbv7
 
 Type of the Scalar Term {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c }                                                                                                                                                                                                                                                               
solver 
 (declare-sort T4581)
(declare-fun set565 (Bool) Bool)
(declare-fun slist (T4581 Bool) Bool)
(declare-fun nil () T4581)
(declare-fun slen (T4581) Int)
(declare-fun |0| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv5 () Int)
(declare-fun s () Int)
(declare-fun _lbv6 () Int)
(declare-fun _lbv8 () Int)
(declare-fun set566 (Bool) Bool)
(declare-fun _lbv13 () T4581)
(declare-fun shd (T4581) Int)
(declare-fun set567 (Bool) Bool)
(declare-fun _lbv14 () T4581)
(declare-fun set568 (Bool) Bool)
(declare-fun _lbv15 () T4581)
(declare-fun set569 (Bool) Bool)
(declare-fun _lbv16 () T4581)
(declare-fun set570 (Bool) Bool)
(declare-fun _lbv17 () T4581)
(declare-fun set571 (Bool) Bool)
(declare-fun _lbv18 () T4581)
(declare-fun set572 (Bool) Bool)
(declare-fun _lbv19 () T4581)
(declare-fun set573 (Bool) Bool)
(declare-fun _lbv20 () T4581)
(declare-fun |3| () Int)
(declare-fun _lbv7 () Int)
(declare-fun _lbv10 () Int)
(declare-fun _lbv9 () Int)
(declare-fun _lbv12 () Int)
(declare-fun _lbv11 () Int)
(assert (forall ((bv0 Bool)) (= (set565 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set565 bv0))))
(assert (= (slen nil) 0))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv5))
(assert (> s _lbv6))
(assert (= _lbv8 (- s 1)))
(assert (forall ((bv0 Bool)) (= (set566 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv13 bv0) (set566 bv0))))
(assert (= (slen _lbv13) s))
(assert (=> (> (slen _lbv13) 0) (or (> (shd _lbv13) x0) (= (shd _lbv13) x0))))
(assert (forall ((bv0 Bool)) (= (set567 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv14 bv0) (set567 bv0))))
(assert (= (slen _lbv14) s))
(assert (=> (> (slen _lbv14) 0) (or (> (shd _lbv14) x0) (= (shd _lbv14) x0))))
(assert (forall ((bv0 Bool)) (= (set568 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv15 bv0) (set568 bv0))))
(assert (= (slen _lbv15) s))
(assert (=> (> (slen _lbv15) 0) (or (> (shd _lbv15) x0) (= (shd _lbv15) x0))))
(assert (forall ((bv0 Bool)) (= (set569 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv16 bv0) (set569 bv0))))
(assert (= (slen _lbv16) s))
(assert (=> (> (slen _lbv16) 0) (or (> (shd _lbv16) x0) (= (shd _lbv16) x0))))
(assert (forall ((bv0 Bool)) (= (set570 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv17 bv0) (set570 bv0))))
(assert (= (slen _lbv17) s))
(assert (=> (> (slen _lbv17) 0) (or (> (shd _lbv17) x0) (= (shd _lbv17) x0))))
(assert (forall ((bv0 Bool)) (= (set571 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv18 bv0) (set571 bv0))))
(assert (= (slen _lbv18) s))
(assert (=> (> (slen _lbv18) 0) (or (> (shd _lbv18) x0) (= (shd _lbv18) x0))))
(assert (forall ((bv0 Bool)) (= (set572 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv19 bv0) (set572 bv0))))
(assert (= (slen _lbv19) s))
(assert (=> (> (slen _lbv19) 0) (or (> (shd _lbv19) x0) (= (shd _lbv19) x0))))
(assert (forall ((bv0 Bool)) (= (set573 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv20 bv0) (set573 bv0))))
(assert (= (slen _lbv20) s))
(assert (=> (> (slen _lbv20) 0) (or (> (shd _lbv20) x0) (= (shd _lbv20) x0))))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (or (> _lbv10 _lbv7) (= _lbv10 _lbv7)))
(assert (= |3| 3))
(assert (not (> _lbv10 |3|)))
(assert (or (> _lbv9 _lbv8) (= _lbv9 _lbv8)))
(assert (= |3| 3))
(assert (not (> _lbv9 |3|)))
(assert (or (> _lbv12 _lbv5) (= _lbv12 _lbv5)))
(assert (= |3| 3))
(assert (not (> _lbv12 |3|)))
(assert (or (> _lbv11 _lbv6) (= _lbv11 _lbv6)))
(assert (= |3| 3))
(assert (not (> _lbv11 |3|)))
(assert (> s _lbv7))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv7))
(assert (not true))

 
 Enumerating a Scalar Term _lbv8
 
 Type of the Scalar Term {v:Ty_int | (v) ==((s) -- (1))}                                                                                                                                                                                                                                                          
solver 
 (declare-sort T4623)
(declare-fun set574 (Bool) Bool)
(declare-fun slist (T4623 Bool) Bool)
(declare-fun nil () T4623)
(declare-fun slen (T4623) Int)
(declare-fun |0| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv5 () Int)
(declare-fun s () Int)
(declare-fun _lbv6 () Int)
(declare-fun _lbv7 () Int)
(declare-fun set575 (Bool) Bool)
(declare-fun _lbv13 () T4623)
(declare-fun shd (T4623) Int)
(declare-fun set576 (Bool) Bool)
(declare-fun _lbv14 () T4623)
(declare-fun set577 (Bool) Bool)
(declare-fun _lbv15 () T4623)
(declare-fun set578 (Bool) Bool)
(declare-fun _lbv16 () T4623)
(declare-fun set579 (Bool) Bool)
(declare-fun _lbv17 () T4623)
(declare-fun set580 (Bool) Bool)
(declare-fun _lbv18 () T4623)
(declare-fun set581 (Bool) Bool)
(declare-fun _lbv19 () T4623)
(declare-fun set582 (Bool) Bool)
(declare-fun _lbv20 () T4623)
(declare-fun |3| () Int)
(declare-fun _lbv10 () Int)
(declare-fun _lbv8 () Int)
(declare-fun _lbv9 () Int)
(declare-fun _lbv12 () Int)
(declare-fun _lbv11 () Int)
(assert (forall ((bv0 Bool)) (= (set574 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set574 bv0))))
(assert (= (slen nil) 0))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv5))
(assert (> s _lbv6))
(assert (> s _lbv7))
(assert (forall ((bv0 Bool)) (= (set575 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv13 bv0) (set575 bv0))))
(assert (= (slen _lbv13) s))
(assert (=> (> (slen _lbv13) 0) (or (> (shd _lbv13) x0) (= (shd _lbv13) x0))))
(assert (forall ((bv0 Bool)) (= (set576 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv14 bv0) (set576 bv0))))
(assert (= (slen _lbv14) s))
(assert (=> (> (slen _lbv14) 0) (or (> (shd _lbv14) x0) (= (shd _lbv14) x0))))
(assert (forall ((bv0 Bool)) (= (set577 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv15 bv0) (set577 bv0))))
(assert (= (slen _lbv15) s))
(assert (=> (> (slen _lbv15) 0) (or (> (shd _lbv15) x0) (= (shd _lbv15) x0))))
(assert (forall ((bv0 Bool)) (= (set578 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv16 bv0) (set578 bv0))))
(assert (= (slen _lbv16) s))
(assert (=> (> (slen _lbv16) 0) (or (> (shd _lbv16) x0) (= (shd _lbv16) x0))))
(assert (forall ((bv0 Bool)) (= (set579 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv17 bv0) (set579 bv0))))
(assert (= (slen _lbv17) s))
(assert (=> (> (slen _lbv17) 0) (or (> (shd _lbv17) x0) (= (shd _lbv17) x0))))
(assert (forall ((bv0 Bool)) (= (set580 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv18 bv0) (set580 bv0))))
(assert (= (slen _lbv18) s))
(assert (=> (> (slen _lbv18) 0) (or (> (shd _lbv18) x0) (= (shd _lbv18) x0))))
(assert (forall ((bv0 Bool)) (= (set581 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv19 bv0) (set581 bv0))))
(assert (= (slen _lbv19) s))
(assert (=> (> (slen _lbv19) 0) (or (> (shd _lbv19) x0) (= (shd _lbv19) x0))))
(assert (forall ((bv0 Bool)) (= (set582 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv20 bv0) (set582 bv0))))
(assert (= (slen _lbv20) s))
(assert (=> (> (slen _lbv20) 0) (or (> (shd _lbv20) x0) (= (shd _lbv20) x0))))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (or (> _lbv10 _lbv7) (= _lbv10 _lbv7)))
(assert (= |3| 3))
(assert (not (> _lbv10 |3|)))
(assert (or (> _lbv9 _lbv8) (= _lbv9 _lbv8)))
(assert (= |3| 3))
(assert (not (> _lbv9 |3|)))
(assert (or (> _lbv12 _lbv5) (= _lbv12 _lbv5)))
(assert (= |3| 3))
(assert (not (> _lbv12 |3|)))
(assert (or (> _lbv11 _lbv6) (= _lbv11 _lbv6)))
(assert (= |3| 3))
(assert (not (> _lbv11 |3|)))
(assert (= _lbv8 (- s 1)))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (= _lbv8 (- s 1)))
(assert (not true))

 
 Enumerating a Scalar Term _lbv1
 
 Type of the Scalar Term {v:Ty_int | 
 	 Conj <c 
 Disj <d  v > s
 	,   v = s>d 
 	 , Negation v > 3 >c }                                                                                                                                                                                                                                                                          
solver 
 (declare-sort T4665)
(declare-fun set583 (Bool) Bool)
(declare-fun slist (T4665 Bool) Bool)
(declare-fun nil () T4665)
(declare-fun slen (T4665) Int)
(declare-fun |0| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv5 () Int)
(declare-fun s () Int)
(declare-fun _lbv6 () Int)
(declare-fun _lbv7 () Int)
(declare-fun _lbv8 () Int)
(declare-fun set584 (Bool) Bool)
(declare-fun _lbv13 () T4665)
(declare-fun shd (T4665) Int)
(declare-fun set585 (Bool) Bool)
(declare-fun _lbv14 () T4665)
(declare-fun set586 (Bool) Bool)
(declare-fun _lbv15 () T4665)
(declare-fun set587 (Bool) Bool)
(declare-fun _lbv16 () T4665)
(declare-fun set588 (Bool) Bool)
(declare-fun _lbv17 () T4665)
(declare-fun set589 (Bool) Bool)
(declare-fun _lbv18 () T4665)
(declare-fun set590 (Bool) Bool)
(declare-fun _lbv19 () T4665)
(declare-fun set591 (Bool) Bool)
(declare-fun _lbv20 () T4665)
(declare-fun |3| () Int)
(declare-fun _lbv10 () Int)
(declare-fun _lbv9 () Int)
(declare-fun _lbv12 () Int)
(declare-fun _lbv11 () Int)
(assert (forall ((bv0 Bool)) (= (set583 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set583 bv0))))
(assert (= (slen nil) 0))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv5))
(assert (> s _lbv6))
(assert (> s _lbv7))
(assert (= _lbv8 (- s 1)))
(assert (forall ((bv0 Bool)) (= (set584 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv13 bv0) (set584 bv0))))
(assert (= (slen _lbv13) s))
(assert (=> (> (slen _lbv13) 0) (or (> (shd _lbv13) x0) (= (shd _lbv13) x0))))
(assert (forall ((bv0 Bool)) (= (set585 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv14 bv0) (set585 bv0))))
(assert (= (slen _lbv14) s))
(assert (=> (> (slen _lbv14) 0) (or (> (shd _lbv14) x0) (= (shd _lbv14) x0))))
(assert (forall ((bv0 Bool)) (= (set586 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv15 bv0) (set586 bv0))))
(assert (= (slen _lbv15) s))
(assert (=> (> (slen _lbv15) 0) (or (> (shd _lbv15) x0) (= (shd _lbv15) x0))))
(assert (forall ((bv0 Bool)) (= (set587 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv16 bv0) (set587 bv0))))
(assert (= (slen _lbv16) s))
(assert (=> (> (slen _lbv16) 0) (or (> (shd _lbv16) x0) (= (shd _lbv16) x0))))
(assert (forall ((bv0 Bool)) (= (set588 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv17 bv0) (set588 bv0))))
(assert (= (slen _lbv17) s))
(assert (=> (> (slen _lbv17) 0) (or (> (shd _lbv17) x0) (= (shd _lbv17) x0))))
(assert (forall ((bv0 Bool)) (= (set589 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv18 bv0) (set589 bv0))))
(assert (= (slen _lbv18) s))
(assert (=> (> (slen _lbv18) 0) (or (> (shd _lbv18) x0) (= (shd _lbv18) x0))))
(assert (forall ((bv0 Bool)) (= (set590 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv19 bv0) (set590 bv0))))
(assert (= (slen _lbv19) s))
(assert (=> (> (slen _lbv19) 0) (or (> (shd _lbv19) x0) (= (shd _lbv19) x0))))
(assert (forall ((bv0 Bool)) (= (set591 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv20 bv0) (set591 bv0))))
(assert (= (slen _lbv20) s))
(assert (=> (> (slen _lbv20) 0) (or (> (shd _lbv20) x0) (= (shd _lbv20) x0))))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (or (> _lbv10 _lbv7) (= _lbv10 _lbv7)))
(assert (= |3| 3))
(assert (not (> _lbv10 |3|)))
(assert (or (> _lbv9 _lbv8) (= _lbv9 _lbv8)))
(assert (= |3| 3))
(assert (not (> _lbv9 |3|)))
(assert (or (> _lbv12 _lbv5) (= _lbv12 _lbv5)))
(assert (= |3| 3))
(assert (not (> _lbv12 |3|)))
(assert (or (> _lbv11 _lbv6) (= _lbv11 _lbv6)))
(assert (= |3| 3))
(assert (not (> _lbv11 |3|)))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (not true))

 
 Enumerating a Scalar Term _lbv0
 
 Type of the Scalar Term {v:Ty_int | 
 	 Conj <c 
 Disj <d  v > x0
 	,   v = x0>d 
 	 , Negation v > 3 >c }                                                                                                                                                                                                                                                                          
solver 
 (declare-sort T4707)
(declare-fun set592 (Bool) Bool)
(declare-fun slist (T4707 Bool) Bool)
(declare-fun nil () T4707)
(declare-fun slen (T4707) Int)
(declare-fun |0| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv5 () Int)
(declare-fun s () Int)
(declare-fun _lbv6 () Int)
(declare-fun _lbv7 () Int)
(declare-fun _lbv8 () Int)
(declare-fun set593 (Bool) Bool)
(declare-fun _lbv13 () T4707)
(declare-fun shd (T4707) Int)
(declare-fun set594 (Bool) Bool)
(declare-fun _lbv14 () T4707)
(declare-fun set595 (Bool) Bool)
(declare-fun _lbv15 () T4707)
(declare-fun set596 (Bool) Bool)
(declare-fun _lbv16 () T4707)
(declare-fun set597 (Bool) Bool)
(declare-fun _lbv17 () T4707)
(declare-fun set598 (Bool) Bool)
(declare-fun _lbv18 () T4707)
(declare-fun set599 (Bool) Bool)
(declare-fun _lbv19 () T4707)
(declare-fun set600 (Bool) Bool)
(declare-fun _lbv20 () T4707)
(declare-fun |3| () Int)
(declare-fun _lbv10 () Int)
(declare-fun _lbv9 () Int)
(declare-fun _lbv12 () Int)
(declare-fun _lbv11 () Int)
(assert (forall ((bv0 Bool)) (= (set592 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set592 bv0))))
(assert (= (slen nil) 0))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv5))
(assert (> s _lbv6))
(assert (> s _lbv7))
(assert (= _lbv8 (- s 1)))
(assert (forall ((bv0 Bool)) (= (set593 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv13 bv0) (set593 bv0))))
(assert (= (slen _lbv13) s))
(assert (=> (> (slen _lbv13) 0) (or (> (shd _lbv13) x0) (= (shd _lbv13) x0))))
(assert (forall ((bv0 Bool)) (= (set594 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv14 bv0) (set594 bv0))))
(assert (= (slen _lbv14) s))
(assert (=> (> (slen _lbv14) 0) (or (> (shd _lbv14) x0) (= (shd _lbv14) x0))))
(assert (forall ((bv0 Bool)) (= (set595 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv15 bv0) (set595 bv0))))
(assert (= (slen _lbv15) s))
(assert (=> (> (slen _lbv15) 0) (or (> (shd _lbv15) x0) (= (shd _lbv15) x0))))
(assert (forall ((bv0 Bool)) (= (set596 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv16 bv0) (set596 bv0))))
(assert (= (slen _lbv16) s))
(assert (=> (> (slen _lbv16) 0) (or (> (shd _lbv16) x0) (= (shd _lbv16) x0))))
(assert (forall ((bv0 Bool)) (= (set597 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv17 bv0) (set597 bv0))))
(assert (= (slen _lbv17) s))
(assert (=> (> (slen _lbv17) 0) (or (> (shd _lbv17) x0) (= (shd _lbv17) x0))))
(assert (forall ((bv0 Bool)) (= (set598 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv18 bv0) (set598 bv0))))
(assert (= (slen _lbv18) s))
(assert (=> (> (slen _lbv18) 0) (or (> (shd _lbv18) x0) (= (shd _lbv18) x0))))
(assert (forall ((bv0 Bool)) (= (set599 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv19 bv0) (set599 bv0))))
(assert (= (slen _lbv19) s))
(assert (=> (> (slen _lbv19) 0) (or (> (shd _lbv19) x0) (= (shd _lbv19) x0))))
(assert (forall ((bv0 Bool)) (= (set600 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv20 bv0) (set600 bv0))))
(assert (= (slen _lbv20) s))
(assert (=> (> (slen _lbv20) 0) (or (> (shd _lbv20) x0) (= (shd _lbv20) x0))))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv10 _lbv7) (= _lbv10 _lbv7)))
(assert (= |3| 3))
(assert (not (> _lbv10 |3|)))
(assert (or (> _lbv9 _lbv8) (= _lbv9 _lbv8)))
(assert (= |3| 3))
(assert (not (> _lbv9 |3|)))
(assert (or (> _lbv12 _lbv5) (= _lbv12 _lbv5)))
(assert (= |3| 3))
(assert (not (> _lbv12 |3|)))
(assert (or (> _lbv11 _lbv6) (= _lbv11 _lbv6)))
(assert (= |3| 3))
(assert (not (> _lbv11 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (not true))

 
 Enumerating a Scalar Term _lbv10
 
 Type of the Scalar Term {v:Ty_int | 
 	 Conj <c 
 Disj <d  v > _lbv7
 	,   v = _lbv7>d 
 	 , Negation v > 3 >c }                                                                                                                                                                                                                                                                          
solver 
 (declare-sort T4749)
(declare-fun set601 (Bool) Bool)
(declare-fun slist (T4749 Bool) Bool)
(declare-fun nil () T4749)
(declare-fun slen (T4749) Int)
(declare-fun |0| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv5 () Int)
(declare-fun s () Int)
(declare-fun _lbv6 () Int)
(declare-fun _lbv7 () Int)
(declare-fun _lbv8 () Int)
(declare-fun set602 (Bool) Bool)
(declare-fun _lbv13 () T4749)
(declare-fun shd (T4749) Int)
(declare-fun set603 (Bool) Bool)
(declare-fun _lbv14 () T4749)
(declare-fun set604 (Bool) Bool)
(declare-fun _lbv15 () T4749)
(declare-fun set605 (Bool) Bool)
(declare-fun _lbv16 () T4749)
(declare-fun set606 (Bool) Bool)
(declare-fun _lbv17 () T4749)
(declare-fun set607 (Bool) Bool)
(declare-fun _lbv18 () T4749)
(declare-fun set608 (Bool) Bool)
(declare-fun _lbv19 () T4749)
(declare-fun set609 (Bool) Bool)
(declare-fun _lbv20 () T4749)
(declare-fun |3| () Int)
(declare-fun _lbv9 () Int)
(declare-fun _lbv12 () Int)
(declare-fun _lbv11 () Int)
(declare-fun _lbv10 () Int)
(assert (forall ((bv0 Bool)) (= (set601 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set601 bv0))))
(assert (= (slen nil) 0))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv5))
(assert (> s _lbv6))
(assert (> s _lbv7))
(assert (= _lbv8 (- s 1)))
(assert (forall ((bv0 Bool)) (= (set602 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv13 bv0) (set602 bv0))))
(assert (= (slen _lbv13) s))
(assert (=> (> (slen _lbv13) 0) (or (> (shd _lbv13) x0) (= (shd _lbv13) x0))))
(assert (forall ((bv0 Bool)) (= (set603 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv14 bv0) (set603 bv0))))
(assert (= (slen _lbv14) s))
(assert (=> (> (slen _lbv14) 0) (or (> (shd _lbv14) x0) (= (shd _lbv14) x0))))
(assert (forall ((bv0 Bool)) (= (set604 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv15 bv0) (set604 bv0))))
(assert (= (slen _lbv15) s))
(assert (=> (> (slen _lbv15) 0) (or (> (shd _lbv15) x0) (= (shd _lbv15) x0))))
(assert (forall ((bv0 Bool)) (= (set605 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv16 bv0) (set605 bv0))))
(assert (= (slen _lbv16) s))
(assert (=> (> (slen _lbv16) 0) (or (> (shd _lbv16) x0) (= (shd _lbv16) x0))))
(assert (forall ((bv0 Bool)) (= (set606 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv17 bv0) (set606 bv0))))
(assert (= (slen _lbv17) s))
(assert (=> (> (slen _lbv17) 0) (or (> (shd _lbv17) x0) (= (shd _lbv17) x0))))
(assert (forall ((bv0 Bool)) (= (set607 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv18 bv0) (set607 bv0))))
(assert (= (slen _lbv18) s))
(assert (=> (> (slen _lbv18) 0) (or (> (shd _lbv18) x0) (= (shd _lbv18) x0))))
(assert (forall ((bv0 Bool)) (= (set608 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv19 bv0) (set608 bv0))))
(assert (= (slen _lbv19) s))
(assert (=> (> (slen _lbv19) 0) (or (> (shd _lbv19) x0) (= (shd _lbv19) x0))))
(assert (forall ((bv0 Bool)) (= (set609 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv20 bv0) (set609 bv0))))
(assert (= (slen _lbv20) s))
(assert (=> (> (slen _lbv20) 0) (or (> (shd _lbv20) x0) (= (shd _lbv20) x0))))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (or (> _lbv9 _lbv8) (= _lbv9 _lbv8)))
(assert (= |3| 3))
(assert (not (> _lbv9 |3|)))
(assert (or (> _lbv12 _lbv5) (= _lbv12 _lbv5)))
(assert (= |3| 3))
(assert (not (> _lbv12 |3|)))
(assert (or (> _lbv11 _lbv6) (= _lbv11 _lbv6)))
(assert (= |3| 3))
(assert (not (> _lbv11 |3|)))
(assert (or (> _lbv10 _lbv7) (= _lbv10 _lbv7)))
(assert (= |3| 3))
(assert (not (> _lbv10 |3|)))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (or (> _lbv10 _lbv7) (= _lbv10 _lbv7)))
(assert (= |3| 3))
(assert (not (> _lbv10 |3|)))
(assert (not true))

 
 Enumerating a Scalar Term _lbv9
 
 Type of the Scalar Term {v:Ty_int | 
 	 Conj <c 
 Disj <d  v > _lbv8
 	,   v = _lbv8>d 
 	 , Negation v > 3 >c }                                                                                                                                                                                                                                                                          
solver 
 (declare-sort T4791)
(declare-fun set610 (Bool) Bool)
(declare-fun slist (T4791 Bool) Bool)
(declare-fun nil () T4791)
(declare-fun slen (T4791) Int)
(declare-fun |0| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv5 () Int)
(declare-fun s () Int)
(declare-fun _lbv6 () Int)
(declare-fun _lbv7 () Int)
(declare-fun _lbv8 () Int)
(declare-fun set611 (Bool) Bool)
(declare-fun _lbv13 () T4791)
(declare-fun shd (T4791) Int)
(declare-fun set612 (Bool) Bool)
(declare-fun _lbv14 () T4791)
(declare-fun set613 (Bool) Bool)
(declare-fun _lbv15 () T4791)
(declare-fun set614 (Bool) Bool)
(declare-fun _lbv16 () T4791)
(declare-fun set615 (Bool) Bool)
(declare-fun _lbv17 () T4791)
(declare-fun set616 (Bool) Bool)
(declare-fun _lbv18 () T4791)
(declare-fun set617 (Bool) Bool)
(declare-fun _lbv19 () T4791)
(declare-fun set618 (Bool) Bool)
(declare-fun _lbv20 () T4791)
(declare-fun |3| () Int)
(declare-fun _lbv10 () Int)
(declare-fun _lbv12 () Int)
(declare-fun _lbv11 () Int)
(declare-fun _lbv9 () Int)
(assert (forall ((bv0 Bool)) (= (set610 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set610 bv0))))
(assert (= (slen nil) 0))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv5))
(assert (> s _lbv6))
(assert (> s _lbv7))
(assert (= _lbv8 (- s 1)))
(assert (forall ((bv0 Bool)) (= (set611 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv13 bv0) (set611 bv0))))
(assert (= (slen _lbv13) s))
(assert (=> (> (slen _lbv13) 0) (or (> (shd _lbv13) x0) (= (shd _lbv13) x0))))
(assert (forall ((bv0 Bool)) (= (set612 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv14 bv0) (set612 bv0))))
(assert (= (slen _lbv14) s))
(assert (=> (> (slen _lbv14) 0) (or (> (shd _lbv14) x0) (= (shd _lbv14) x0))))
(assert (forall ((bv0 Bool)) (= (set613 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv15 bv0) (set613 bv0))))
(assert (= (slen _lbv15) s))
(assert (=> (> (slen _lbv15) 0) (or (> (shd _lbv15) x0) (= (shd _lbv15) x0))))
(assert (forall ((bv0 Bool)) (= (set614 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv16 bv0) (set614 bv0))))
(assert (= (slen _lbv16) s))
(assert (=> (> (slen _lbv16) 0) (or (> (shd _lbv16) x0) (= (shd _lbv16) x0))))
(assert (forall ((bv0 Bool)) (= (set615 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv17 bv0) (set615 bv0))))
(assert (= (slen _lbv17) s))
(assert (=> (> (slen _lbv17) 0) (or (> (shd _lbv17) x0) (= (shd _lbv17) x0))))
(assert (forall ((bv0 Bool)) (= (set616 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv18 bv0) (set616 bv0))))
(assert (= (slen _lbv18) s))
(assert (=> (> (slen _lbv18) 0) (or (> (shd _lbv18) x0) (= (shd _lbv18) x0))))
(assert (forall ((bv0 Bool)) (= (set617 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv19 bv0) (set617 bv0))))
(assert (= (slen _lbv19) s))
(assert (=> (> (slen _lbv19) 0) (or (> (shd _lbv19) x0) (= (shd _lbv19) x0))))
(assert (forall ((bv0 Bool)) (= (set618 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv20 bv0) (set618 bv0))))
(assert (= (slen _lbv20) s))
(assert (=> (> (slen _lbv20) 0) (or (> (shd _lbv20) x0) (= (shd _lbv20) x0))))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (or (> _lbv10 _lbv7) (= _lbv10 _lbv7)))
(assert (= |3| 3))
(assert (not (> _lbv10 |3|)))
(assert (or (> _lbv12 _lbv5) (= _lbv12 _lbv5)))
(assert (= |3| 3))
(assert (not (> _lbv12 |3|)))
(assert (or (> _lbv11 _lbv6) (= _lbv11 _lbv6)))
(assert (= |3| 3))
(assert (not (> _lbv11 |3|)))
(assert (or (> _lbv9 _lbv8) (= _lbv9 _lbv8)))
(assert (= |3| 3))
(assert (not (> _lbv9 |3|)))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (or (> _lbv9 _lbv8) (= _lbv9 _lbv8)))
(assert (= |3| 3))
(assert (not (> _lbv9 |3|)))
(assert (not true))

 
 Enumerating a Scalar Term _lbv12
 
 Type of the Scalar Term {v:Ty_int | 
 	 Conj <c 
 Disj <d  v > _lbv5
 	,   v = _lbv5>d 
 	 , Negation v > 3 >c }                                                                                                                                                                                                                                                                          
solver 
 (declare-sort T4833)
(declare-fun set619 (Bool) Bool)
(declare-fun slist (T4833 Bool) Bool)
(declare-fun nil () T4833)
(declare-fun slen (T4833) Int)
(declare-fun |0| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv5 () Int)
(declare-fun s () Int)
(declare-fun _lbv6 () Int)
(declare-fun _lbv7 () Int)
(declare-fun _lbv8 () Int)
(declare-fun set620 (Bool) Bool)
(declare-fun _lbv13 () T4833)
(declare-fun shd (T4833) Int)
(declare-fun set621 (Bool) Bool)
(declare-fun _lbv14 () T4833)
(declare-fun set622 (Bool) Bool)
(declare-fun _lbv15 () T4833)
(declare-fun set623 (Bool) Bool)
(declare-fun _lbv16 () T4833)
(declare-fun set624 (Bool) Bool)
(declare-fun _lbv17 () T4833)
(declare-fun set625 (Bool) Bool)
(declare-fun _lbv18 () T4833)
(declare-fun set626 (Bool) Bool)
(declare-fun _lbv19 () T4833)
(declare-fun set627 (Bool) Bool)
(declare-fun _lbv20 () T4833)
(declare-fun |3| () Int)
(declare-fun _lbv10 () Int)
(declare-fun _lbv9 () Int)
(declare-fun _lbv11 () Int)
(declare-fun _lbv12 () Int)
(assert (forall ((bv0 Bool)) (= (set619 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set619 bv0))))
(assert (= (slen nil) 0))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv5))
(assert (> s _lbv6))
(assert (> s _lbv7))
(assert (= _lbv8 (- s 1)))
(assert (forall ((bv0 Bool)) (= (set620 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv13 bv0) (set620 bv0))))
(assert (= (slen _lbv13) s))
(assert (=> (> (slen _lbv13) 0) (or (> (shd _lbv13) x0) (= (shd _lbv13) x0))))
(assert (forall ((bv0 Bool)) (= (set621 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv14 bv0) (set621 bv0))))
(assert (= (slen _lbv14) s))
(assert (=> (> (slen _lbv14) 0) (or (> (shd _lbv14) x0) (= (shd _lbv14) x0))))
(assert (forall ((bv0 Bool)) (= (set622 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv15 bv0) (set622 bv0))))
(assert (= (slen _lbv15) s))
(assert (=> (> (slen _lbv15) 0) (or (> (shd _lbv15) x0) (= (shd _lbv15) x0))))
(assert (forall ((bv0 Bool)) (= (set623 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv16 bv0) (set623 bv0))))
(assert (= (slen _lbv16) s))
(assert (=> (> (slen _lbv16) 0) (or (> (shd _lbv16) x0) (= (shd _lbv16) x0))))
(assert (forall ((bv0 Bool)) (= (set624 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv17 bv0) (set624 bv0))))
(assert (= (slen _lbv17) s))
(assert (=> (> (slen _lbv17) 0) (or (> (shd _lbv17) x0) (= (shd _lbv17) x0))))
(assert (forall ((bv0 Bool)) (= (set625 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv18 bv0) (set625 bv0))))
(assert (= (slen _lbv18) s))
(assert (=> (> (slen _lbv18) 0) (or (> (shd _lbv18) x0) (= (shd _lbv18) x0))))
(assert (forall ((bv0 Bool)) (= (set626 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv19 bv0) (set626 bv0))))
(assert (= (slen _lbv19) s))
(assert (=> (> (slen _lbv19) 0) (or (> (shd _lbv19) x0) (= (shd _lbv19) x0))))
(assert (forall ((bv0 Bool)) (= (set627 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv20 bv0) (set627 bv0))))
(assert (= (slen _lbv20) s))
(assert (=> (> (slen _lbv20) 0) (or (> (shd _lbv20) x0) (= (shd _lbv20) x0))))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (or (> _lbv10 _lbv7) (= _lbv10 _lbv7)))
(assert (= |3| 3))
(assert (not (> _lbv10 |3|)))
(assert (or (> _lbv9 _lbv8) (= _lbv9 _lbv8)))
(assert (= |3| 3))
(assert (not (> _lbv9 |3|)))
(assert (or (> _lbv11 _lbv6) (= _lbv11 _lbv6)))
(assert (= |3| 3))
(assert (not (> _lbv11 |3|)))
(assert (or (> _lbv12 _lbv5) (= _lbv12 _lbv5)))
(assert (= |3| 3))
(assert (not (> _lbv12 |3|)))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (or (> _lbv12 _lbv5) (= _lbv12 _lbv5)))
(assert (= |3| 3))
(assert (not (> _lbv12 |3|)))
(assert (not true))

 
 Enumerating a Scalar Term _lbv11
 
 Type of the Scalar Term {v:Ty_int | 
 	 Conj <c 
 Disj <d  v > _lbv6
 	,   v = _lbv6>d 
 	 , Negation v > 3 >c }                                                                                                                                                                                                                                                                          
solver 
 (declare-sort T4875)
(declare-fun set628 (Bool) Bool)
(declare-fun slist (T4875 Bool) Bool)
(declare-fun nil () T4875)
(declare-fun slen (T4875) Int)
(declare-fun |0| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv5 () Int)
(declare-fun s () Int)
(declare-fun _lbv6 () Int)
(declare-fun _lbv7 () Int)
(declare-fun _lbv8 () Int)
(declare-fun set629 (Bool) Bool)
(declare-fun _lbv13 () T4875)
(declare-fun shd (T4875) Int)
(declare-fun set630 (Bool) Bool)
(declare-fun _lbv14 () T4875)
(declare-fun set631 (Bool) Bool)
(declare-fun _lbv15 () T4875)
(declare-fun set632 (Bool) Bool)
(declare-fun _lbv16 () T4875)
(declare-fun set633 (Bool) Bool)
(declare-fun _lbv17 () T4875)
(declare-fun set634 (Bool) Bool)
(declare-fun _lbv18 () T4875)
(declare-fun set635 (Bool) Bool)
(declare-fun _lbv19 () T4875)
(declare-fun set636 (Bool) Bool)
(declare-fun _lbv20 () T4875)
(declare-fun |3| () Int)
(declare-fun _lbv10 () Int)
(declare-fun _lbv9 () Int)
(declare-fun _lbv12 () Int)
(declare-fun _lbv11 () Int)
(assert (forall ((bv0 Bool)) (= (set628 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set628 bv0))))
(assert (= (slen nil) 0))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv5))
(assert (> s _lbv6))
(assert (> s _lbv7))
(assert (= _lbv8 (- s 1)))
(assert (forall ((bv0 Bool)) (= (set629 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv13 bv0) (set629 bv0))))
(assert (= (slen _lbv13) s))
(assert (=> (> (slen _lbv13) 0) (or (> (shd _lbv13) x0) (= (shd _lbv13) x0))))
(assert (forall ((bv0 Bool)) (= (set630 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv14 bv0) (set630 bv0))))
(assert (= (slen _lbv14) s))
(assert (=> (> (slen _lbv14) 0) (or (> (shd _lbv14) x0) (= (shd _lbv14) x0))))
(assert (forall ((bv0 Bool)) (= (set631 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv15 bv0) (set631 bv0))))
(assert (= (slen _lbv15) s))
(assert (=> (> (slen _lbv15) 0) (or (> (shd _lbv15) x0) (= (shd _lbv15) x0))))
(assert (forall ((bv0 Bool)) (= (set632 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv16 bv0) (set632 bv0))))
(assert (= (slen _lbv16) s))
(assert (=> (> (slen _lbv16) 0) (or (> (shd _lbv16) x0) (= (shd _lbv16) x0))))
(assert (forall ((bv0 Bool)) (= (set633 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv17 bv0) (set633 bv0))))
(assert (= (slen _lbv17) s))
(assert (=> (> (slen _lbv17) 0) (or (> (shd _lbv17) x0) (= (shd _lbv17) x0))))
(assert (forall ((bv0 Bool)) (= (set634 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv18 bv0) (set634 bv0))))
(assert (= (slen _lbv18) s))
(assert (=> (> (slen _lbv18) 0) (or (> (shd _lbv18) x0) (= (shd _lbv18) x0))))
(assert (forall ((bv0 Bool)) (= (set635 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv19 bv0) (set635 bv0))))
(assert (= (slen _lbv19) s))
(assert (=> (> (slen _lbv19) 0) (or (> (shd _lbv19) x0) (= (shd _lbv19) x0))))
(assert (forall ((bv0 Bool)) (= (set636 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv20 bv0) (set636 bv0))))
(assert (= (slen _lbv20) s))
(assert (=> (> (slen _lbv20) 0) (or (> (shd _lbv20) x0) (= (shd _lbv20) x0))))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (or (> _lbv10 _lbv7) (= _lbv10 _lbv7)))
(assert (= |3| 3))
(assert (not (> _lbv10 |3|)))
(assert (or (> _lbv9 _lbv8) (= _lbv9 _lbv8)))
(assert (= |3| 3))
(assert (not (> _lbv9 |3|)))
(assert (or (> _lbv12 _lbv5) (= _lbv12 _lbv5)))
(assert (= |3| 3))
(assert (not (> _lbv12 |3|)))
(assert (or (> _lbv11 _lbv6) (= _lbv11 _lbv6)))
(assert (= |3| 3))
(assert (not (> _lbv11 |3|)))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (or (> _lbv11 _lbv6) (= _lbv11 _lbv6)))
(assert (= |3| 3))
(assert (not (> _lbv11 |3|)))
(assert (not true))

 Show :: Found a Few Macthing Scalars 
  Next Trying Arguments of the form f (ei...) 
  Pure Fun Application: esynthesizePureApp 
 ##################################################################################
  *************** Successfully Synthesized Args ei Forall i 
 # of Possible Argument Options for goal 48
 Possible Arg Options 
 EI _lbv8
 EI _lbv11
 Possible Arg Options 
 EI _lbv8
 EI _lbv12
 Possible Arg Options 
 EI _lbv8
 EI _lbv9
 Possible Arg Options 
 EI _lbv8
 EI _lbv10
 Possible Arg Options 
 EI _lbv8
 EI _lbv0
 Possible Arg Options 
 EI _lbv8
 EI _lbv1
 Possible Arg Options 
 EI _lbv8
 EI _lbv8
 Possible Arg Options 
 EI _lbv8
 EI _lbv7
 Possible Arg Options 
 EI _lbv8
 EI _lbv6
 Possible Arg Options 
 EI _lbv8
 EI _lbv5
 Possible Arg Options 
 EI _lbv8
 EI x0
 Possible Arg Options 
 EI _lbv8
 EI s
 Possible Arg Options 
 EI _lbv7
 EI _lbv11
 Possible Arg Options 
 EI _lbv7
 EI _lbv12
 Possible Arg Options 
 EI _lbv7
 EI _lbv9
 Possible Arg Options 
 EI _lbv7
 EI _lbv10
 Possible Arg Options 
 EI _lbv7
 EI _lbv0
 Possible Arg Options 
 EI _lbv7
 EI _lbv1
 Possible Arg Options 
 EI _lbv7
 EI _lbv8
 Possible Arg Options 
 EI _lbv7
 EI _lbv7
 Possible Arg Options 
 EI _lbv7
 EI _lbv6
 Possible Arg Options 
 EI _lbv7
 EI _lbv5
 Possible Arg Options 
 EI _lbv7
 EI x0
 Possible Arg Options 
 EI _lbv7
 EI s
 Possible Arg Options 
 EI _lbv6
 EI _lbv11
 Possible Arg Options 
 EI _lbv6
 EI _lbv12
 Possible Arg Options 
 EI _lbv6
 EI _lbv9
 Possible Arg Options 
 EI _lbv6
 EI _lbv10
 Possible Arg Options 
 EI _lbv6
 EI _lbv0
 Possible Arg Options 
 EI _lbv6
 EI _lbv1
 Possible Arg Options 
 EI _lbv6
 EI _lbv8
 Possible Arg Options 
 EI _lbv6
 EI _lbv7
 Possible Arg Options 
 EI _lbv6
 EI _lbv6
 Possible Arg Options 
 EI _lbv6
 EI _lbv5
 Possible Arg Options 
 EI _lbv6
 EI x0
 Possible Arg Options 
 EI _lbv6
 EI s
 Possible Arg Options 
 EI _lbv5
 EI _lbv11
 Possible Arg Options 
 EI _lbv5
 EI _lbv12
 Possible Arg Options 
 EI _lbv5
 EI _lbv9
 Possible Arg Options 
 EI _lbv5
 EI _lbv10
 Possible Arg Options 
 EI _lbv5
 EI _lbv0
 Possible Arg Options 
 EI _lbv5
 EI _lbv1
 Possible Arg Options 
 EI _lbv5
 EI _lbv8
 Possible Arg Options 
 EI _lbv5
 EI _lbv7
 Possible Arg Options 
 EI _lbv5
 EI _lbv6
 Possible Arg Options 
 EI _lbv5
 EI _lbv5
 Possible Arg Options 
 EI _lbv5
 EI x0
 Possible Arg Options 
 EI _lbv5
 EI s
 Show f (ei, e2, ....en) Case
 Finding Already seen tree for apply goal  (, _lbv8 ), _lbv11 )
 Found _lbv17
 Finding Already seen tree for apply goal  (, _lbv8 ), _lbv12 )
 Found _lbv18
 Finding Already seen tree for apply goal  (, _lbv8 ), _lbv9 )
 Found _lbv19
 Finding Already seen tree for apply goal  (, _lbv8 ), _lbv10 )
 Found _lbv20
 Finding Already seen tree for apply goal  (, _lbv8 ), _lbv0 )
 Found _lbv13
 Finding Already seen tree for apply goal  (, _lbv8 ), _lbv1 )
 Found _lbv14
 Finding Already seen tree for apply goal  (, _lbv8 ), _lbv8 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 let _lbv21 = apply goal  (, _lbv8 ), _lbv8 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 Finding Already seen tree for apply goal  (, _lbv8 ), _lbv7 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 let _lbv22 = apply goal  (, _lbv8 ), _lbv7 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 Finding Already seen tree for apply goal  (, _lbv8 ), _lbv6 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 let _lbv23 = apply goal  (, _lbv8 ), _lbv6 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 Finding Already seen tree for apply goal  (, _lbv8 ), _lbv5 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 let _lbv24 = apply goal  (, _lbv8 ), _lbv5 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 Finding Already seen tree for apply goal  (, _lbv8 ), x0 )
 Found _lbv15
 Finding Already seen tree for apply goal  (, _lbv8 ), s )
 Found _lbv16
 Finding Already seen tree for apply goal  (, _lbv7 ), _lbv11 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 let _lbv25 = apply goal  (, _lbv7 ), _lbv11 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 Finding Already seen tree for apply goal  (, _lbv7 ), _lbv12 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 let _lbv26 = apply goal  (, _lbv7 ), _lbv12 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 Finding Already seen tree for apply goal  (, _lbv7 ), _lbv9 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 let _lbv27 = apply goal  (, _lbv7 ), _lbv9 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 Finding Already seen tree for apply goal  (, _lbv7 ), _lbv10 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 let _lbv28 = apply goal  (, _lbv7 ), _lbv10 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 Finding Already seen tree for apply goal  (, _lbv7 ), _lbv0 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 let _lbv29 = apply goal  (, _lbv7 ), _lbv0 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 Finding Already seen tree for apply goal  (, _lbv7 ), _lbv1 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 let _lbv30 = apply goal  (, _lbv7 ), _lbv1 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 Finding Already seen tree for apply goal  (, _lbv7 ), _lbv8 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 let _lbv31 = apply goal  (, _lbv7 ), _lbv8 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 Finding Already seen tree for apply goal  (, _lbv7 ), _lbv7 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 let _lbv32 = apply goal  (, _lbv7 ), _lbv7 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 Finding Already seen tree for apply goal  (, _lbv7 ), _lbv6 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 let _lbv33 = apply goal  (, _lbv7 ), _lbv6 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 Finding Already seen tree for apply goal  (, _lbv7 ), _lbv5 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 let _lbv34 = apply goal  (, _lbv7 ), _lbv5 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 Finding Already seen tree for apply goal  (, _lbv7 ), x0 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 let _lbv35 = apply goal  (, _lbv7 ), x0 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 Finding Already seen tree for apply goal  (, _lbv7 ), s )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 let _lbv36 = apply goal  (, _lbv7 ), s )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 Finding Already seen tree for apply goal  (, _lbv6 ), _lbv11 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 let _lbv37 = apply goal  (, _lbv6 ), _lbv11 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 Finding Already seen tree for apply goal  (, _lbv6 ), _lbv12 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 let _lbv38 = apply goal  (, _lbv6 ), _lbv12 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 Finding Already seen tree for apply goal  (, _lbv6 ), _lbv9 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 let _lbv39 = apply goal  (, _lbv6 ), _lbv9 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 Finding Already seen tree for apply goal  (, _lbv6 ), _lbv10 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 let _lbv40 = apply goal  (, _lbv6 ), _lbv10 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 Finding Already seen tree for apply goal  (, _lbv6 ), _lbv0 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 let _lbv41 = apply goal  (, _lbv6 ), _lbv0 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 Finding Already seen tree for apply goal  (, _lbv6 ), _lbv1 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 let _lbv42 = apply goal  (, _lbv6 ), _lbv1 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 Finding Already seen tree for apply goal  (, _lbv6 ), _lbv8 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 let _lbv43 = apply goal  (, _lbv6 ), _lbv8 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 Finding Already seen tree for apply goal  (, _lbv6 ), _lbv7 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 let _lbv44 = apply goal  (, _lbv6 ), _lbv7 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 Finding Already seen tree for apply goal  (, _lbv6 ), _lbv6 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 let _lbv45 = apply goal  (, _lbv6 ), _lbv6 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 Finding Already seen tree for apply goal  (, _lbv6 ), _lbv5 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 let _lbv46 = apply goal  (, _lbv6 ), _lbv5 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 Finding Already seen tree for apply goal  (, _lbv6 ), x0 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 let _lbv47 = apply goal  (, _lbv6 ), x0 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 Finding Already seen tree for apply goal  (, _lbv6 ), s )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 let _lbv48 = apply goal  (, _lbv6 ), s )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 Finding Already seen tree for apply goal  (, _lbv5 ), _lbv11 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 let _lbv49 = apply goal  (, _lbv5 ), _lbv11 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 Finding Already seen tree for apply goal  (, _lbv5 ), _lbv12 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 let _lbv50 = apply goal  (, _lbv5 ), _lbv12 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 Finding Already seen tree for apply goal  (, _lbv5 ), _lbv9 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 let _lbv51 = apply goal  (, _lbv5 ), _lbv9 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 Finding Already seen tree for apply goal  (, _lbv5 ), _lbv10 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 let _lbv52 = apply goal  (, _lbv5 ), _lbv10 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 Finding Already seen tree for apply goal  (, _lbv5 ), _lbv0 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 let _lbv53 = apply goal  (, _lbv5 ), _lbv0 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 Finding Already seen tree for apply goal  (, _lbv5 ), _lbv1 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 let _lbv54 = apply goal  (, _lbv5 ), _lbv1 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 Finding Already seen tree for apply goal  (, _lbv5 ), _lbv8 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 let _lbv55 = apply goal  (, _lbv5 ), _lbv8 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 Finding Already seen tree for apply goal  (, _lbv5 ), _lbv7 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 let _lbv56 = apply goal  (, _lbv5 ), _lbv7 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 Finding Already seen tree for apply goal  (, _lbv5 ), _lbv6 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 let _lbv57 = apply goal  (, _lbv5 ), _lbv6 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 Finding Already seen tree for apply goal  (, _lbv5 ), _lbv5 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 let _lbv58 = apply goal  (, _lbv5 ), _lbv5 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 Finding Already seen tree for apply goal  (, _lbv5 ), x0 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 let _lbv59 = apply goal  (, _lbv5 ), x0 )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 Finding Already seen tree for apply goal  (, _lbv5 ), s )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 let _lbv60 = apply goal  (, _lbv5 ), s )
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  Sorted Exxpressions
 Non-Expanded _lbv36
 Program apply goal  (, apply subs  (, x0 ) ), s ) 
 Size 4
 Non-Expanded _lbv35
 Program apply goal  (, apply subs  (, x0 ) ), x0 ) 
 Size 4
 Non-Expanded _lbv16
 Program apply goal  (, apply subs  (, s ) ), s ) 
 Size 4
 Non-Expanded _lbv15
 Program apply goal  (, apply subs  (, s ) ), x0 ) 
 Size 4
 Typechecking apply goal  (, _lbv7 ), s )
 Against {v:Ty_alphalist | (slist)(v) = (true)}
 Typechecking apply goal  (, _lbv7 ), s )
 Against {v:Ty_alphalist | (slist)(v) = (true)}
 Argument _lbv7 :: {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c } | 
 	 Conj <c true
 	 , s > _lbv7 >c 
 Argument s :: {v:Ty_int | true} | true                                                                                                                                                                                                                                                                     
solver 
 (declare-sort T4917)
(declare-fun set637 (Bool) Bool)
(declare-fun slist (T4917 Bool) Bool)
(declare-fun nil () T4917)
(declare-fun slen (T4917) Int)
(declare-fun |0| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv5 () Int)
(declare-fun s () Int)
(declare-fun _lbv6 () Int)
(declare-fun _lbv7 () Int)
(declare-fun _lbv8 () Int)
(declare-fun set638 (Bool) Bool)
(declare-fun _lbv13 () T4917)
(declare-fun shd (T4917) Int)
(declare-fun set639 (Bool) Bool)
(declare-fun _lbv14 () T4917)
(declare-fun set640 (Bool) Bool)
(declare-fun _lbv15 () T4917)
(declare-fun set641 (Bool) Bool)
(declare-fun _lbv16 () T4917)
(declare-fun set642 (Bool) Bool)
(declare-fun _lbv17 () T4917)
(declare-fun set643 (Bool) Bool)
(declare-fun _lbv18 () T4917)
(declare-fun set644 (Bool) Bool)
(declare-fun _lbv19 () T4917)
(declare-fun set645 (Bool) Bool)
(declare-fun _lbv20 () T4917)
(declare-fun |3| () Int)
(declare-fun _lbv10 () Int)
(declare-fun _lbv9 () Int)
(declare-fun _lbv12 () Int)
(declare-fun _lbv11 () Int)
(declare-fun set646 (Bool) Bool)
(declare-fun v () T4917)
(declare-fun set647 (Bool) Bool)
(declare-fun set648 (Bool) Bool)
(assert (forall ((bv0 Bool)) (= (set637 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set637 bv0))))
(assert (= (slen nil) 0))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv5))
(assert (> s _lbv6))
(assert (> s _lbv7))
(assert (= _lbv8 (- s 1)))
(assert (forall ((bv0 Bool)) (= (set638 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv13 bv0) (set638 bv0))))
(assert (= (slen _lbv13) s))
(assert (=> (> (slen _lbv13) 0) (or (> (shd _lbv13) x0) (= (shd _lbv13) x0))))
(assert (forall ((bv0 Bool)) (= (set639 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv14 bv0) (set639 bv0))))
(assert (= (slen _lbv14) s))
(assert (=> (> (slen _lbv14) 0) (or (> (shd _lbv14) x0) (= (shd _lbv14) x0))))
(assert (forall ((bv0 Bool)) (= (set640 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv15 bv0) (set640 bv0))))
(assert (= (slen _lbv15) s))
(assert (=> (> (slen _lbv15) 0) (or (> (shd _lbv15) x0) (= (shd _lbv15) x0))))
(assert (forall ((bv0 Bool)) (= (set641 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv16 bv0) (set641 bv0))))
(assert (= (slen _lbv16) s))
(assert (=> (> (slen _lbv16) 0) (or (> (shd _lbv16) x0) (= (shd _lbv16) x0))))
(assert (forall ((bv0 Bool)) (= (set642 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv17 bv0) (set642 bv0))))
(assert (= (slen _lbv17) s))
(assert (=> (> (slen _lbv17) 0) (or (> (shd _lbv17) x0) (= (shd _lbv17) x0))))
(assert (forall ((bv0 Bool)) (= (set643 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv18 bv0) (set643 bv0))))
(assert (= (slen _lbv18) s))
(assert (=> (> (slen _lbv18) 0) (or (> (shd _lbv18) x0) (= (shd _lbv18) x0))))
(assert (forall ((bv0 Bool)) (= (set644 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv19 bv0) (set644 bv0))))
(assert (= (slen _lbv19) s))
(assert (=> (> (slen _lbv19) 0) (or (> (shd _lbv19) x0) (= (shd _lbv19) x0))))
(assert (forall ((bv0 Bool)) (= (set645 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv20 bv0) (set645 bv0))))
(assert (= (slen _lbv20) s))
(assert (=> (> (slen _lbv20) 0) (or (> (shd _lbv20) x0) (= (shd _lbv20) x0))))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (or (> _lbv10 _lbv7) (= _lbv10 _lbv7)))
(assert (= |3| 3))
(assert (not (> _lbv10 |3|)))
(assert (or (> _lbv9 _lbv8) (= _lbv9 _lbv8)))
(assert (= |3| 3))
(assert (not (> _lbv9 |3|)))
(assert (or (> _lbv12 _lbv5) (= _lbv12 _lbv5)))
(assert (= |3| 3))
(assert (not (> _lbv12 |3|)))
(assert (or (> _lbv11 _lbv6) (= _lbv11 _lbv6)))
(assert (= |3| 3))
(assert (not (> _lbv11 |3|)))
(assert (forall ((bv0 Bool)) (= (set646 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist v bv0) (set646 bv0))))
(assert (= (slen v) _lbv7))
(assert (=> (> (slen v) 0) (or (> (shd v) s) (= (shd v) s))))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv7))
(assert (forall ((bv0 Bool)) (= (set647 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist v bv0) (set647 bv0))))
(assert (= (slen v) _lbv7))
(assert (=> (> (slen v) 0) (or (> (shd v) s) (= (shd v) s))))
(assert (forall ((bv0 Bool)) (= (set648 bv0) (and (= bv0 true)))))
(assert (not (forall ((bv0 Bool)) (= (slist v bv0) (set648 bv0)))))

 Typechecking apply goal  (, _lbv7 ), x0 )
 Against {v:Ty_alphalist | (slist)(v) = (true)}
 Typechecking apply goal  (, _lbv7 ), x0 )
 Against {v:Ty_alphalist | (slist)(v) = (true)}
 Argument _lbv7 :: {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c } | 
 	 Conj <c true
 	 , s > _lbv7 >c 
 Argument x0 :: {var_v3:Ty_int | true} | true                                                                                                                                                                                                                                                                     
solver 
 (declare-sort T4959)
(declare-fun set649 (Bool) Bool)
(declare-fun slist (T4959 Bool) Bool)
(declare-fun nil () T4959)
(declare-fun slen (T4959) Int)
(declare-fun |0| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv5 () Int)
(declare-fun s () Int)
(declare-fun _lbv6 () Int)
(declare-fun _lbv7 () Int)
(declare-fun _lbv8 () Int)
(declare-fun set650 (Bool) Bool)
(declare-fun _lbv13 () T4959)
(declare-fun shd (T4959) Int)
(declare-fun set651 (Bool) Bool)
(declare-fun _lbv14 () T4959)
(declare-fun set652 (Bool) Bool)
(declare-fun _lbv15 () T4959)
(declare-fun set653 (Bool) Bool)
(declare-fun _lbv16 () T4959)
(declare-fun set654 (Bool) Bool)
(declare-fun _lbv17 () T4959)
(declare-fun set655 (Bool) Bool)
(declare-fun _lbv18 () T4959)
(declare-fun set656 (Bool) Bool)
(declare-fun _lbv19 () T4959)
(declare-fun set657 (Bool) Bool)
(declare-fun _lbv20 () T4959)
(declare-fun |3| () Int)
(declare-fun _lbv10 () Int)
(declare-fun _lbv9 () Int)
(declare-fun _lbv12 () Int)
(declare-fun _lbv11 () Int)
(declare-fun set658 (Bool) Bool)
(declare-fun v () T4959)
(declare-fun set659 (Bool) Bool)
(declare-fun set660 (Bool) Bool)
(assert (forall ((bv0 Bool)) (= (set649 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set649 bv0))))
(assert (= (slen nil) 0))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv5))
(assert (> s _lbv6))
(assert (> s _lbv7))
(assert (= _lbv8 (- s 1)))
(assert (forall ((bv0 Bool)) (= (set650 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv13 bv0) (set650 bv0))))
(assert (= (slen _lbv13) s))
(assert (=> (> (slen _lbv13) 0) (or (> (shd _lbv13) x0) (= (shd _lbv13) x0))))
(assert (forall ((bv0 Bool)) (= (set651 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv14 bv0) (set651 bv0))))
(assert (= (slen _lbv14) s))
(assert (=> (> (slen _lbv14) 0) (or (> (shd _lbv14) x0) (= (shd _lbv14) x0))))
(assert (forall ((bv0 Bool)) (= (set652 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv15 bv0) (set652 bv0))))
(assert (= (slen _lbv15) s))
(assert (=> (> (slen _lbv15) 0) (or (> (shd _lbv15) x0) (= (shd _lbv15) x0))))
(assert (forall ((bv0 Bool)) (= (set653 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv16 bv0) (set653 bv0))))
(assert (= (slen _lbv16) s))
(assert (=> (> (slen _lbv16) 0) (or (> (shd _lbv16) x0) (= (shd _lbv16) x0))))
(assert (forall ((bv0 Bool)) (= (set654 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv17 bv0) (set654 bv0))))
(assert (= (slen _lbv17) s))
(assert (=> (> (slen _lbv17) 0) (or (> (shd _lbv17) x0) (= (shd _lbv17) x0))))
(assert (forall ((bv0 Bool)) (= (set655 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv18 bv0) (set655 bv0))))
(assert (= (slen _lbv18) s))
(assert (=> (> (slen _lbv18) 0) (or (> (shd _lbv18) x0) (= (shd _lbv18) x0))))
(assert (forall ((bv0 Bool)) (= (set656 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv19 bv0) (set656 bv0))))
(assert (= (slen _lbv19) s))
(assert (=> (> (slen _lbv19) 0) (or (> (shd _lbv19) x0) (= (shd _lbv19) x0))))
(assert (forall ((bv0 Bool)) (= (set657 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv20 bv0) (set657 bv0))))
(assert (= (slen _lbv20) s))
(assert (=> (> (slen _lbv20) 0) (or (> (shd _lbv20) x0) (= (shd _lbv20) x0))))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (or (> _lbv10 _lbv7) (= _lbv10 _lbv7)))
(assert (= |3| 3))
(assert (not (> _lbv10 |3|)))
(assert (or (> _lbv9 _lbv8) (= _lbv9 _lbv8)))
(assert (= |3| 3))
(assert (not (> _lbv9 |3|)))
(assert (or (> _lbv12 _lbv5) (= _lbv12 _lbv5)))
(assert (= |3| 3))
(assert (not (> _lbv12 |3|)))
(assert (or (> _lbv11 _lbv6) (= _lbv11 _lbv6)))
(assert (= |3| 3))
(assert (not (> _lbv11 |3|)))
(assert (forall ((bv0 Bool)) (= (set658 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist v bv0) (set658 bv0))))
(assert (= (slen v) _lbv7))
(assert (=> (> (slen v) 0) (or (> (shd v) x0) (= (shd v) x0))))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv7))
(assert (forall ((bv0 Bool)) (= (set659 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist v bv0) (set659 bv0))))
(assert (= (slen v) _lbv7))
(assert (=> (> (slen v) 0) (or (> (shd v) x0) (= (shd v) x0))))
(assert (forall ((bv0 Bool)) (= (set660 bv0) (and (= bv0 true)))))
(assert (not (forall ((bv0 Bool)) (= (slist v bv0) (set660 bv0)))))

 Typechecking apply goal  (, _lbv8 ), s )
 Against {v:Ty_alphalist | (slist)(v) = (true)}
 Typechecking apply goal  (, _lbv8 ), s )
 Against {v:Ty_alphalist | (slist)(v) = (true)}
 Argument _lbv8 :: {v:Ty_int | (v) ==((s) -- (1))} | (_lbv8) ==((s) -- (1))
 Argument s :: {v:Ty_int | true} | true                                                                                                                                                                                                                                                                
solver 
 (declare-sort T5001)
(declare-fun set661 (Bool) Bool)
(declare-fun slist (T5001 Bool) Bool)
(declare-fun nil () T5001)
(declare-fun slen (T5001) Int)
(declare-fun |0| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv5 () Int)
(declare-fun s () Int)
(declare-fun _lbv6 () Int)
(declare-fun _lbv7 () Int)
(declare-fun _lbv8 () Int)
(declare-fun set662 (Bool) Bool)
(declare-fun _lbv13 () T5001)
(declare-fun shd (T5001) Int)
(declare-fun set663 (Bool) Bool)
(declare-fun _lbv14 () T5001)
(declare-fun set664 (Bool) Bool)
(declare-fun _lbv15 () T5001)
(declare-fun set665 (Bool) Bool)
(declare-fun _lbv16 () T5001)
(declare-fun set666 (Bool) Bool)
(declare-fun _lbv17 () T5001)
(declare-fun set667 (Bool) Bool)
(declare-fun _lbv18 () T5001)
(declare-fun set668 (Bool) Bool)
(declare-fun _lbv19 () T5001)
(declare-fun set669 (Bool) Bool)
(declare-fun _lbv20 () T5001)
(declare-fun |3| () Int)
(declare-fun _lbv10 () Int)
(declare-fun _lbv9 () Int)
(declare-fun _lbv12 () Int)
(declare-fun _lbv11 () Int)
(declare-fun set670 (Bool) Bool)
(declare-fun v () T5001)
(declare-fun set671 (Bool) Bool)
(declare-fun set672 (Bool) Bool)
(assert (forall ((bv0 Bool)) (= (set661 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set661 bv0))))
(assert (= (slen nil) 0))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv5))
(assert (> s _lbv6))
(assert (> s _lbv7))
(assert (= _lbv8 (- s 1)))
(assert (forall ((bv0 Bool)) (= (set662 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv13 bv0) (set662 bv0))))
(assert (= (slen _lbv13) s))
(assert (=> (> (slen _lbv13) 0) (or (> (shd _lbv13) x0) (= (shd _lbv13) x0))))
(assert (forall ((bv0 Bool)) (= (set663 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv14 bv0) (set663 bv0))))
(assert (= (slen _lbv14) s))
(assert (=> (> (slen _lbv14) 0) (or (> (shd _lbv14) x0) (= (shd _lbv14) x0))))
(assert (forall ((bv0 Bool)) (= (set664 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv15 bv0) (set664 bv0))))
(assert (= (slen _lbv15) s))
(assert (=> (> (slen _lbv15) 0) (or (> (shd _lbv15) x0) (= (shd _lbv15) x0))))
(assert (forall ((bv0 Bool)) (= (set665 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv16 bv0) (set665 bv0))))
(assert (= (slen _lbv16) s))
(assert (=> (> (slen _lbv16) 0) (or (> (shd _lbv16) x0) (= (shd _lbv16) x0))))
(assert (forall ((bv0 Bool)) (= (set666 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv17 bv0) (set666 bv0))))
(assert (= (slen _lbv17) s))
(assert (=> (> (slen _lbv17) 0) (or (> (shd _lbv17) x0) (= (shd _lbv17) x0))))
(assert (forall ((bv0 Bool)) (= (set667 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv18 bv0) (set667 bv0))))
(assert (= (slen _lbv18) s))
(assert (=> (> (slen _lbv18) 0) (or (> (shd _lbv18) x0) (= (shd _lbv18) x0))))
(assert (forall ((bv0 Bool)) (= (set668 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv19 bv0) (set668 bv0))))
(assert (= (slen _lbv19) s))
(assert (=> (> (slen _lbv19) 0) (or (> (shd _lbv19) x0) (= (shd _lbv19) x0))))
(assert (forall ((bv0 Bool)) (= (set669 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv20 bv0) (set669 bv0))))
(assert (= (slen _lbv20) s))
(assert (=> (> (slen _lbv20) 0) (or (> (shd _lbv20) x0) (= (shd _lbv20) x0))))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (or (> _lbv10 _lbv7) (= _lbv10 _lbv7)))
(assert (= |3| 3))
(assert (not (> _lbv10 |3|)))
(assert (or (> _lbv9 _lbv8) (= _lbv9 _lbv8)))
(assert (= |3| 3))
(assert (not (> _lbv9 |3|)))
(assert (or (> _lbv12 _lbv5) (= _lbv12 _lbv5)))
(assert (= |3| 3))
(assert (not (> _lbv12 |3|)))
(assert (or (> _lbv11 _lbv6) (= _lbv11 _lbv6)))
(assert (= |3| 3))
(assert (not (> _lbv11 |3|)))
(assert (forall ((bv0 Bool)) (= (set670 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist v bv0) (set670 bv0))))
(assert (= (slen v) _lbv8))
(assert (=> (> (slen v) 0) (or (> (shd v) s) (= (shd v) s))))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (= _lbv8 (- s 1)))
(assert (forall ((bv0 Bool)) (= (set671 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist v bv0) (set671 bv0))))
(assert (= (slen v) _lbv8))
(assert (=> (> (slen v) 0) (or (> (shd v) s) (= (shd v) s))))
(assert (forall ((bv0 Bool)) (= (set672 bv0) (and (= bv0 true)))))
(assert (not (forall ((bv0 Bool)) (= (slist v bv0) (set672 bv0)))))

 Typechecking apply goal  (, _lbv8 ), x0 )
 Against {v:Ty_alphalist | (slist)(v) = (true)}
 Typechecking apply goal  (, _lbv8 ), x0 )
 Against {v:Ty_alphalist | (slist)(v) = (true)}
 Argument _lbv8 :: {v:Ty_int | (v) ==((s) -- (1))} | (_lbv8) ==((s) -- (1))
 Argument x0 :: {var_v3:Ty_int | true} | true                                                                                                                                                                                                                                                                
solver 
 (declare-sort T5043)
(declare-fun set673 (Bool) Bool)
(declare-fun slist (T5043 Bool) Bool)
(declare-fun nil () T5043)
(declare-fun slen (T5043) Int)
(declare-fun |0| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv5 () Int)
(declare-fun s () Int)
(declare-fun _lbv6 () Int)
(declare-fun _lbv7 () Int)
(declare-fun _lbv8 () Int)
(declare-fun set674 (Bool) Bool)
(declare-fun _lbv13 () T5043)
(declare-fun shd (T5043) Int)
(declare-fun set675 (Bool) Bool)
(declare-fun _lbv14 () T5043)
(declare-fun set676 (Bool) Bool)
(declare-fun _lbv15 () T5043)
(declare-fun set677 (Bool) Bool)
(declare-fun _lbv16 () T5043)
(declare-fun set678 (Bool) Bool)
(declare-fun _lbv17 () T5043)
(declare-fun set679 (Bool) Bool)
(declare-fun _lbv18 () T5043)
(declare-fun set680 (Bool) Bool)
(declare-fun _lbv19 () T5043)
(declare-fun set681 (Bool) Bool)
(declare-fun _lbv20 () T5043)
(declare-fun |3| () Int)
(declare-fun _lbv10 () Int)
(declare-fun _lbv9 () Int)
(declare-fun _lbv12 () Int)
(declare-fun _lbv11 () Int)
(declare-fun set682 (Bool) Bool)
(declare-fun v () T5043)
(declare-fun set683 (Bool) Bool)
(declare-fun set684 (Bool) Bool)
(assert (forall ((bv0 Bool)) (= (set673 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set673 bv0))))
(assert (= (slen nil) 0))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv5))
(assert (> s _lbv6))
(assert (> s _lbv7))
(assert (= _lbv8 (- s 1)))
(assert (forall ((bv0 Bool)) (= (set674 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv13 bv0) (set674 bv0))))
(assert (= (slen _lbv13) s))
(assert (=> (> (slen _lbv13) 0) (or (> (shd _lbv13) x0) (= (shd _lbv13) x0))))
(assert (forall ((bv0 Bool)) (= (set675 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv14 bv0) (set675 bv0))))
(assert (= (slen _lbv14) s))
(assert (=> (> (slen _lbv14) 0) (or (> (shd _lbv14) x0) (= (shd _lbv14) x0))))
(assert (forall ((bv0 Bool)) (= (set676 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv15 bv0) (set676 bv0))))
(assert (= (slen _lbv15) s))
(assert (=> (> (slen _lbv15) 0) (or (> (shd _lbv15) x0) (= (shd _lbv15) x0))))
(assert (forall ((bv0 Bool)) (= (set677 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv16 bv0) (set677 bv0))))
(assert (= (slen _lbv16) s))
(assert (=> (> (slen _lbv16) 0) (or (> (shd _lbv16) x0) (= (shd _lbv16) x0))))
(assert (forall ((bv0 Bool)) (= (set678 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv17 bv0) (set678 bv0))))
(assert (= (slen _lbv17) s))
(assert (=> (> (slen _lbv17) 0) (or (> (shd _lbv17) x0) (= (shd _lbv17) x0))))
(assert (forall ((bv0 Bool)) (= (set679 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv18 bv0) (set679 bv0))))
(assert (= (slen _lbv18) s))
(assert (=> (> (slen _lbv18) 0) (or (> (shd _lbv18) x0) (= (shd _lbv18) x0))))
(assert (forall ((bv0 Bool)) (= (set680 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv19 bv0) (set680 bv0))))
(assert (= (slen _lbv19) s))
(assert (=> (> (slen _lbv19) 0) (or (> (shd _lbv19) x0) (= (shd _lbv19) x0))))
(assert (forall ((bv0 Bool)) (= (set681 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv20 bv0) (set681 bv0))))
(assert (= (slen _lbv20) s))
(assert (=> (> (slen _lbv20) 0) (or (> (shd _lbv20) x0) (= (shd _lbv20) x0))))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (or (> _lbv10 _lbv7) (= _lbv10 _lbv7)))
(assert (= |3| 3))
(assert (not (> _lbv10 |3|)))
(assert (or (> _lbv9 _lbv8) (= _lbv9 _lbv8)))
(assert (= |3| 3))
(assert (not (> _lbv9 |3|)))
(assert (or (> _lbv12 _lbv5) (= _lbv12 _lbv5)))
(assert (= |3| 3))
(assert (not (> _lbv12 |3|)))
(assert (or (> _lbv11 _lbv6) (= _lbv11 _lbv6)))
(assert (= |3| 3))
(assert (not (> _lbv11 |3|)))
(assert (forall ((bv0 Bool)) (= (set682 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist v bv0) (set682 bv0))))
(assert (= (slen v) _lbv8))
(assert (=> (> (slen v) 0) (or (> (shd v) x0) (= (shd v) x0))))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (= _lbv8 (- s 1)))
(assert (forall ((bv0 Bool)) (= (set683 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist v bv0) (set683 bv0))))
(assert (= (slen v) _lbv8))
(assert (=> (> (slen v) 0) (or (> (shd v) x0) (= (shd v) x0))))
(assert (forall ((bv0 Bool)) (= (set684 bv0) (and (= bv0 true)))))
(assert (not (forall ((bv0 Bool)) (= (slist v bv0) (set684 bv0)))))

  ###################################################
  The Choice of Function goal Was Ill Fated Try Next Choice of function
 ############################################################
  Trying Pure Component cons
  *************** Trying Arrow Component ************cons :  Arrow ( ( x : {var_v2:Ty_int | true} ) ->  Arrow ( ( xs : {v:Ty_alphalist | (slist)(v) = (true)} ) -> {v:Ty_alphalist | 
 	 Impl < 
 Disj <d  (shd)(xs) > (x)
 	,   (shd)(xs) ==(x)>d 
 	 
 	 Conj <c (slist)(v) = (true)
 	 , 
 	 Conj <c (slen)(v) ==((slen)(xs) + (1))
 	 , (shd)(v) ==(x) >c  >c  >}
  *************** Synthesizing Args ei : ti for ************cons
 ##################################################################################
  Synthesizing the 1th argument for Function cons
  Trying Arguments in Scalars 
 esynthesizeScalar for {var_v2:Ty_int | true}
  Enumeration for 
 spec 
 {var_v2:Ty_int | true}
 
 Enumerating a Scalar Term s
 
 Type of the Scalar Term {v:Ty_int | true}                                                                                                                                                                                                                                                          
solver 
 (declare-sort T5085)
(declare-fun set685 (Bool) Bool)
(declare-fun slist (T5085 Bool) Bool)
(declare-fun nil () T5085)
(declare-fun slen (T5085) Int)
(declare-fun |0| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv5 () Int)
(declare-fun s () Int)
(declare-fun _lbv6 () Int)
(declare-fun _lbv7 () Int)
(declare-fun _lbv8 () Int)
(declare-fun set686 (Bool) Bool)
(declare-fun _lbv13 () T5085)
(declare-fun shd (T5085) Int)
(declare-fun set687 (Bool) Bool)
(declare-fun _lbv14 () T5085)
(declare-fun set688 (Bool) Bool)
(declare-fun _lbv15 () T5085)
(declare-fun set689 (Bool) Bool)
(declare-fun _lbv16 () T5085)
(declare-fun set690 (Bool) Bool)
(declare-fun _lbv17 () T5085)
(declare-fun set691 (Bool) Bool)
(declare-fun _lbv18 () T5085)
(declare-fun set692 (Bool) Bool)
(declare-fun _lbv19 () T5085)
(declare-fun set693 (Bool) Bool)
(declare-fun _lbv20 () T5085)
(declare-fun |3| () Int)
(declare-fun _lbv10 () Int)
(declare-fun _lbv9 () Int)
(declare-fun _lbv12 () Int)
(declare-fun _lbv11 () Int)
(assert (forall ((bv0 Bool)) (= (set685 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set685 bv0))))
(assert (= (slen nil) 0))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv5))
(assert (> s _lbv6))
(assert (> s _lbv7))
(assert (= _lbv8 (- s 1)))
(assert (forall ((bv0 Bool)) (= (set686 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv13 bv0) (set686 bv0))))
(assert (= (slen _lbv13) s))
(assert (=> (> (slen _lbv13) 0) (or (> (shd _lbv13) x0) (= (shd _lbv13) x0))))
(assert (forall ((bv0 Bool)) (= (set687 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv14 bv0) (set687 bv0))))
(assert (= (slen _lbv14) s))
(assert (=> (> (slen _lbv14) 0) (or (> (shd _lbv14) x0) (= (shd _lbv14) x0))))
(assert (forall ((bv0 Bool)) (= (set688 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv15 bv0) (set688 bv0))))
(assert (= (slen _lbv15) s))
(assert (=> (> (slen _lbv15) 0) (or (> (shd _lbv15) x0) (= (shd _lbv15) x0))))
(assert (forall ((bv0 Bool)) (= (set689 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv16 bv0) (set689 bv0))))
(assert (= (slen _lbv16) s))
(assert (=> (> (slen _lbv16) 0) (or (> (shd _lbv16) x0) (= (shd _lbv16) x0))))
(assert (forall ((bv0 Bool)) (= (set690 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv17 bv0) (set690 bv0))))
(assert (= (slen _lbv17) s))
(assert (=> (> (slen _lbv17) 0) (or (> (shd _lbv17) x0) (= (shd _lbv17) x0))))
(assert (forall ((bv0 Bool)) (= (set691 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv18 bv0) (set691 bv0))))
(assert (= (slen _lbv18) s))
(assert (=> (> (slen _lbv18) 0) (or (> (shd _lbv18) x0) (= (shd _lbv18) x0))))
(assert (forall ((bv0 Bool)) (= (set692 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv19 bv0) (set692 bv0))))
(assert (= (slen _lbv19) s))
(assert (=> (> (slen _lbv19) 0) (or (> (shd _lbv19) x0) (= (shd _lbv19) x0))))
(assert (forall ((bv0 Bool)) (= (set693 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv20 bv0) (set693 bv0))))
(assert (= (slen _lbv20) s))
(assert (=> (> (slen _lbv20) 0) (or (> (shd _lbv20) x0) (= (shd _lbv20) x0))))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (or (> _lbv10 _lbv7) (= _lbv10 _lbv7)))
(assert (= |3| 3))
(assert (not (> _lbv10 |3|)))
(assert (or (> _lbv9 _lbv8) (= _lbv9 _lbv8)))
(assert (= |3| 3))
(assert (not (> _lbv9 |3|)))
(assert (or (> _lbv12 _lbv5) (= _lbv12 _lbv5)))
(assert (= |3| 3))
(assert (not (> _lbv12 |3|)))
(assert (or (> _lbv11 _lbv6) (= _lbv11 _lbv6)))
(assert (= |3| 3))
(assert (not (> _lbv11 |3|)))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (not true))

 
 Enumerating a Scalar Term x0
 
 Type of the Scalar Term {var_v3:Ty_int | true}                                                                                                                                                                                                                                                          
solver 
 (declare-sort T5127)
(declare-fun set694 (Bool) Bool)
(declare-fun slist (T5127 Bool) Bool)
(declare-fun nil () T5127)
(declare-fun slen (T5127) Int)
(declare-fun |0| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv5 () Int)
(declare-fun s () Int)
(declare-fun _lbv6 () Int)
(declare-fun _lbv7 () Int)
(declare-fun _lbv8 () Int)
(declare-fun set695 (Bool) Bool)
(declare-fun _lbv13 () T5127)
(declare-fun shd (T5127) Int)
(declare-fun set696 (Bool) Bool)
(declare-fun _lbv14 () T5127)
(declare-fun set697 (Bool) Bool)
(declare-fun _lbv15 () T5127)
(declare-fun set698 (Bool) Bool)
(declare-fun _lbv16 () T5127)
(declare-fun set699 (Bool) Bool)
(declare-fun _lbv17 () T5127)
(declare-fun set700 (Bool) Bool)
(declare-fun _lbv18 () T5127)
(declare-fun set701 (Bool) Bool)
(declare-fun _lbv19 () T5127)
(declare-fun set702 (Bool) Bool)
(declare-fun _lbv20 () T5127)
(declare-fun |3| () Int)
(declare-fun _lbv10 () Int)
(declare-fun _lbv9 () Int)
(declare-fun _lbv12 () Int)
(declare-fun _lbv11 () Int)
(assert (forall ((bv0 Bool)) (= (set694 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set694 bv0))))
(assert (= (slen nil) 0))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv5))
(assert (> s _lbv6))
(assert (> s _lbv7))
(assert (= _lbv8 (- s 1)))
(assert (forall ((bv0 Bool)) (= (set695 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv13 bv0) (set695 bv0))))
(assert (= (slen _lbv13) s))
(assert (=> (> (slen _lbv13) 0) (or (> (shd _lbv13) x0) (= (shd _lbv13) x0))))
(assert (forall ((bv0 Bool)) (= (set696 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv14 bv0) (set696 bv0))))
(assert (= (slen _lbv14) s))
(assert (=> (> (slen _lbv14) 0) (or (> (shd _lbv14) x0) (= (shd _lbv14) x0))))
(assert (forall ((bv0 Bool)) (= (set697 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv15 bv0) (set697 bv0))))
(assert (= (slen _lbv15) s))
(assert (=> (> (slen _lbv15) 0) (or (> (shd _lbv15) x0) (= (shd _lbv15) x0))))
(assert (forall ((bv0 Bool)) (= (set698 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv16 bv0) (set698 bv0))))
(assert (= (slen _lbv16) s))
(assert (=> (> (slen _lbv16) 0) (or (> (shd _lbv16) x0) (= (shd _lbv16) x0))))
(assert (forall ((bv0 Bool)) (= (set699 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv17 bv0) (set699 bv0))))
(assert (= (slen _lbv17) s))
(assert (=> (> (slen _lbv17) 0) (or (> (shd _lbv17) x0) (= (shd _lbv17) x0))))
(assert (forall ((bv0 Bool)) (= (set700 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv18 bv0) (set700 bv0))))
(assert (= (slen _lbv18) s))
(assert (=> (> (slen _lbv18) 0) (or (> (shd _lbv18) x0) (= (shd _lbv18) x0))))
(assert (forall ((bv0 Bool)) (= (set701 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv19 bv0) (set701 bv0))))
(assert (= (slen _lbv19) s))
(assert (=> (> (slen _lbv19) 0) (or (> (shd _lbv19) x0) (= (shd _lbv19) x0))))
(assert (forall ((bv0 Bool)) (= (set702 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv20 bv0) (set702 bv0))))
(assert (= (slen _lbv20) s))
(assert (=> (> (slen _lbv20) 0) (or (> (shd _lbv20) x0) (= (shd _lbv20) x0))))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (or (> _lbv10 _lbv7) (= _lbv10 _lbv7)))
(assert (= |3| 3))
(assert (not (> _lbv10 |3|)))
(assert (or (> _lbv9 _lbv8) (= _lbv9 _lbv8)))
(assert (= |3| 3))
(assert (not (> _lbv9 |3|)))
(assert (or (> _lbv12 _lbv5) (= _lbv12 _lbv5)))
(assert (= |3| 3))
(assert (not (> _lbv12 |3|)))
(assert (or (> _lbv11 _lbv6) (= _lbv11 _lbv6)))
(assert (= |3| 3))
(assert (not (> _lbv11 |3|)))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (not true))

 
 Enumerating a Scalar Term _lbv5
 
 Type of the Scalar Term {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c }                                                                                                                                                                                                                                                               
solver 
 (declare-sort T5169)
(declare-fun set703 (Bool) Bool)
(declare-fun slist (T5169 Bool) Bool)
(declare-fun nil () T5169)
(declare-fun slen (T5169) Int)
(declare-fun |0| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv6 () Int)
(declare-fun s () Int)
(declare-fun _lbv7 () Int)
(declare-fun _lbv8 () Int)
(declare-fun set704 (Bool) Bool)
(declare-fun _lbv13 () T5169)
(declare-fun shd (T5169) Int)
(declare-fun set705 (Bool) Bool)
(declare-fun _lbv14 () T5169)
(declare-fun set706 (Bool) Bool)
(declare-fun _lbv15 () T5169)
(declare-fun set707 (Bool) Bool)
(declare-fun _lbv16 () T5169)
(declare-fun set708 (Bool) Bool)
(declare-fun _lbv17 () T5169)
(declare-fun set709 (Bool) Bool)
(declare-fun _lbv18 () T5169)
(declare-fun set710 (Bool) Bool)
(declare-fun _lbv19 () T5169)
(declare-fun set711 (Bool) Bool)
(declare-fun _lbv20 () T5169)
(declare-fun |3| () Int)
(declare-fun _lbv10 () Int)
(declare-fun _lbv9 () Int)
(declare-fun _lbv5 () Int)
(declare-fun _lbv12 () Int)
(declare-fun _lbv11 () Int)
(assert (forall ((bv0 Bool)) (= (set703 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set703 bv0))))
(assert (= (slen nil) 0))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv6))
(assert (> s _lbv7))
(assert (= _lbv8 (- s 1)))
(assert (forall ((bv0 Bool)) (= (set704 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv13 bv0) (set704 bv0))))
(assert (= (slen _lbv13) s))
(assert (=> (> (slen _lbv13) 0) (or (> (shd _lbv13) x0) (= (shd _lbv13) x0))))
(assert (forall ((bv0 Bool)) (= (set705 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv14 bv0) (set705 bv0))))
(assert (= (slen _lbv14) s))
(assert (=> (> (slen _lbv14) 0) (or (> (shd _lbv14) x0) (= (shd _lbv14) x0))))
(assert (forall ((bv0 Bool)) (= (set706 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv15 bv0) (set706 bv0))))
(assert (= (slen _lbv15) s))
(assert (=> (> (slen _lbv15) 0) (or (> (shd _lbv15) x0) (= (shd _lbv15) x0))))
(assert (forall ((bv0 Bool)) (= (set707 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv16 bv0) (set707 bv0))))
(assert (= (slen _lbv16) s))
(assert (=> (> (slen _lbv16) 0) (or (> (shd _lbv16) x0) (= (shd _lbv16) x0))))
(assert (forall ((bv0 Bool)) (= (set708 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv17 bv0) (set708 bv0))))
(assert (= (slen _lbv17) s))
(assert (=> (> (slen _lbv17) 0) (or (> (shd _lbv17) x0) (= (shd _lbv17) x0))))
(assert (forall ((bv0 Bool)) (= (set709 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv18 bv0) (set709 bv0))))
(assert (= (slen _lbv18) s))
(assert (=> (> (slen _lbv18) 0) (or (> (shd _lbv18) x0) (= (shd _lbv18) x0))))
(assert (forall ((bv0 Bool)) (= (set710 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv19 bv0) (set710 bv0))))
(assert (= (slen _lbv19) s))
(assert (=> (> (slen _lbv19) 0) (or (> (shd _lbv19) x0) (= (shd _lbv19) x0))))
(assert (forall ((bv0 Bool)) (= (set711 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv20 bv0) (set711 bv0))))
(assert (= (slen _lbv20) s))
(assert (=> (> (slen _lbv20) 0) (or (> (shd _lbv20) x0) (= (shd _lbv20) x0))))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (or (> _lbv10 _lbv7) (= _lbv10 _lbv7)))
(assert (= |3| 3))
(assert (not (> _lbv10 |3|)))
(assert (or (> _lbv9 _lbv8) (= _lbv9 _lbv8)))
(assert (= |3| 3))
(assert (not (> _lbv9 |3|)))
(assert (or (> _lbv12 _lbv5) (= _lbv12 _lbv5)))
(assert (= |3| 3))
(assert (not (> _lbv12 |3|)))
(assert (or (> _lbv11 _lbv6) (= _lbv11 _lbv6)))
(assert (= |3| 3))
(assert (not (> _lbv11 |3|)))
(assert (> s _lbv5))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv5))
(assert (not true))

 
 Enumerating a Scalar Term _lbv6
 
 Type of the Scalar Term {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c }                                                                                                                                                                                                                                                               
solver 
 (declare-sort T5211)
(declare-fun set712 (Bool) Bool)
(declare-fun slist (T5211 Bool) Bool)
(declare-fun nil () T5211)
(declare-fun slen (T5211) Int)
(declare-fun |0| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv5 () Int)
(declare-fun s () Int)
(declare-fun _lbv7 () Int)
(declare-fun _lbv8 () Int)
(declare-fun set713 (Bool) Bool)
(declare-fun _lbv13 () T5211)
(declare-fun shd (T5211) Int)
(declare-fun set714 (Bool) Bool)
(declare-fun _lbv14 () T5211)
(declare-fun set715 (Bool) Bool)
(declare-fun _lbv15 () T5211)
(declare-fun set716 (Bool) Bool)
(declare-fun _lbv16 () T5211)
(declare-fun set717 (Bool) Bool)
(declare-fun _lbv17 () T5211)
(declare-fun set718 (Bool) Bool)
(declare-fun _lbv18 () T5211)
(declare-fun set719 (Bool) Bool)
(declare-fun _lbv19 () T5211)
(declare-fun set720 (Bool) Bool)
(declare-fun _lbv20 () T5211)
(declare-fun |3| () Int)
(declare-fun _lbv10 () Int)
(declare-fun _lbv9 () Int)
(declare-fun _lbv12 () Int)
(declare-fun _lbv6 () Int)
(declare-fun _lbv11 () Int)
(assert (forall ((bv0 Bool)) (= (set712 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set712 bv0))))
(assert (= (slen nil) 0))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv5))
(assert (> s _lbv7))
(assert (= _lbv8 (- s 1)))
(assert (forall ((bv0 Bool)) (= (set713 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv13 bv0) (set713 bv0))))
(assert (= (slen _lbv13) s))
(assert (=> (> (slen _lbv13) 0) (or (> (shd _lbv13) x0) (= (shd _lbv13) x0))))
(assert (forall ((bv0 Bool)) (= (set714 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv14 bv0) (set714 bv0))))
(assert (= (slen _lbv14) s))
(assert (=> (> (slen _lbv14) 0) (or (> (shd _lbv14) x0) (= (shd _lbv14) x0))))
(assert (forall ((bv0 Bool)) (= (set715 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv15 bv0) (set715 bv0))))
(assert (= (slen _lbv15) s))
(assert (=> (> (slen _lbv15) 0) (or (> (shd _lbv15) x0) (= (shd _lbv15) x0))))
(assert (forall ((bv0 Bool)) (= (set716 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv16 bv0) (set716 bv0))))
(assert (= (slen _lbv16) s))
(assert (=> (> (slen _lbv16) 0) (or (> (shd _lbv16) x0) (= (shd _lbv16) x0))))
(assert (forall ((bv0 Bool)) (= (set717 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv17 bv0) (set717 bv0))))
(assert (= (slen _lbv17) s))
(assert (=> (> (slen _lbv17) 0) (or (> (shd _lbv17) x0) (= (shd _lbv17) x0))))
(assert (forall ((bv0 Bool)) (= (set718 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv18 bv0) (set718 bv0))))
(assert (= (slen _lbv18) s))
(assert (=> (> (slen _lbv18) 0) (or (> (shd _lbv18) x0) (= (shd _lbv18) x0))))
(assert (forall ((bv0 Bool)) (= (set719 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv19 bv0) (set719 bv0))))
(assert (= (slen _lbv19) s))
(assert (=> (> (slen _lbv19) 0) (or (> (shd _lbv19) x0) (= (shd _lbv19) x0))))
(assert (forall ((bv0 Bool)) (= (set720 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv20 bv0) (set720 bv0))))
(assert (= (slen _lbv20) s))
(assert (=> (> (slen _lbv20) 0) (or (> (shd _lbv20) x0) (= (shd _lbv20) x0))))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (or (> _lbv10 _lbv7) (= _lbv10 _lbv7)))
(assert (= |3| 3))
(assert (not (> _lbv10 |3|)))
(assert (or (> _lbv9 _lbv8) (= _lbv9 _lbv8)))
(assert (= |3| 3))
(assert (not (> _lbv9 |3|)))
(assert (or (> _lbv12 _lbv5) (= _lbv12 _lbv5)))
(assert (= |3| 3))
(assert (not (> _lbv12 |3|)))
(assert (or (> _lbv11 _lbv6) (= _lbv11 _lbv6)))
(assert (= |3| 3))
(assert (not (> _lbv11 |3|)))
(assert (> s _lbv6))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv6))
(assert (not true))

 
 Enumerating a Scalar Term _lbv7
 
 Type of the Scalar Term {v:Ty_int | 
 	 Conj <c true
 	 , s > v >c }                                                                                                                                                                                                                                                               
solver 
 (declare-sort T5253)
(declare-fun set721 (Bool) Bool)
(declare-fun slist (T5253 Bool) Bool)
(declare-fun nil () T5253)
(declare-fun slen (T5253) Int)
(declare-fun |0| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv5 () Int)
(declare-fun s () Int)
(declare-fun _lbv6 () Int)
(declare-fun _lbv8 () Int)
(declare-fun set722 (Bool) Bool)
(declare-fun _lbv13 () T5253)
(declare-fun shd (T5253) Int)
(declare-fun set723 (Bool) Bool)
(declare-fun _lbv14 () T5253)
(declare-fun set724 (Bool) Bool)
(declare-fun _lbv15 () T5253)
(declare-fun set725 (Bool) Bool)
(declare-fun _lbv16 () T5253)
(declare-fun set726 (Bool) Bool)
(declare-fun _lbv17 () T5253)
(declare-fun set727 (Bool) Bool)
(declare-fun _lbv18 () T5253)
(declare-fun set728 (Bool) Bool)
(declare-fun _lbv19 () T5253)
(declare-fun set729 (Bool) Bool)
(declare-fun _lbv20 () T5253)
(declare-fun |3| () Int)
(declare-fun _lbv7 () Int)
(declare-fun _lbv10 () Int)
(declare-fun _lbv9 () Int)
(declare-fun _lbv12 () Int)
(declare-fun _lbv11 () Int)
(assert (forall ((bv0 Bool)) (= (set721 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set721 bv0))))
(assert (= (slen nil) 0))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv5))
(assert (> s _lbv6))
(assert (= _lbv8 (- s 1)))
(assert (forall ((bv0 Bool)) (= (set722 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv13 bv0) (set722 bv0))))
(assert (= (slen _lbv13) s))
(assert (=> (> (slen _lbv13) 0) (or (> (shd _lbv13) x0) (= (shd _lbv13) x0))))
(assert (forall ((bv0 Bool)) (= (set723 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv14 bv0) (set723 bv0))))
(assert (= (slen _lbv14) s))
(assert (=> (> (slen _lbv14) 0) (or (> (shd _lbv14) x0) (= (shd _lbv14) x0))))
(assert (forall ((bv0 Bool)) (= (set724 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv15 bv0) (set724 bv0))))
(assert (= (slen _lbv15) s))
(assert (=> (> (slen _lbv15) 0) (or (> (shd _lbv15) x0) (= (shd _lbv15) x0))))
(assert (forall ((bv0 Bool)) (= (set725 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv16 bv0) (set725 bv0))))
(assert (= (slen _lbv16) s))
(assert (=> (> (slen _lbv16) 0) (or (> (shd _lbv16) x0) (= (shd _lbv16) x0))))
(assert (forall ((bv0 Bool)) (= (set726 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv17 bv0) (set726 bv0))))
(assert (= (slen _lbv17) s))
(assert (=> (> (slen _lbv17) 0) (or (> (shd _lbv17) x0) (= (shd _lbv17) x0))))
(assert (forall ((bv0 Bool)) (= (set727 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv18 bv0) (set727 bv0))))
(assert (= (slen _lbv18) s))
(assert (=> (> (slen _lbv18) 0) (or (> (shd _lbv18) x0) (= (shd _lbv18) x0))))
(assert (forall ((bv0 Bool)) (= (set728 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv19 bv0) (set728 bv0))))
(assert (= (slen _lbv19) s))
(assert (=> (> (slen _lbv19) 0) (or (> (shd _lbv19) x0) (= (shd _lbv19) x0))))
(assert (forall ((bv0 Bool)) (= (set729 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv20 bv0) (set729 bv0))))
(assert (= (slen _lbv20) s))
(assert (=> (> (slen _lbv20) 0) (or (> (shd _lbv20) x0) (= (shd _lbv20) x0))))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (or (> _lbv10 _lbv7) (= _lbv10 _lbv7)))
(assert (= |3| 3))
(assert (not (> _lbv10 |3|)))
(assert (or (> _lbv9 _lbv8) (= _lbv9 _lbv8)))
(assert (= |3| 3))
(assert (not (> _lbv9 |3|)))
(assert (or (> _lbv12 _lbv5) (= _lbv12 _lbv5)))
(assert (= |3| 3))
(assert (not (> _lbv12 |3|)))
(assert (or (> _lbv11 _lbv6) (= _lbv11 _lbv6)))
(assert (= |3| 3))
(assert (not (> _lbv11 |3|)))
(assert (> s _lbv7))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv7))
(assert (not true))

 
 Enumerating a Scalar Term _lbv8
 
 Type of the Scalar Term {v:Ty_int | (v) ==((s) -- (1))}                                                                                                                                                                                                                                                          
solver 
 (declare-sort T5295)
(declare-fun set730 (Bool) Bool)
(declare-fun slist (T5295 Bool) Bool)
(declare-fun nil () T5295)
(declare-fun slen (T5295) Int)
(declare-fun |0| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv5 () Int)
(declare-fun s () Int)
(declare-fun _lbv6 () Int)
(declare-fun _lbv7 () Int)
(declare-fun set731 (Bool) Bool)
(declare-fun _lbv13 () T5295)
(declare-fun shd (T5295) Int)
(declare-fun set732 (Bool) Bool)
(declare-fun _lbv14 () T5295)
(declare-fun set733 (Bool) Bool)
(declare-fun _lbv15 () T5295)
(declare-fun set734 (Bool) Bool)
(declare-fun _lbv16 () T5295)
(declare-fun set735 (Bool) Bool)
(declare-fun _lbv17 () T5295)
(declare-fun set736 (Bool) Bool)
(declare-fun _lbv18 () T5295)
(declare-fun set737 (Bool) Bool)
(declare-fun _lbv19 () T5295)
(declare-fun set738 (Bool) Bool)
(declare-fun _lbv20 () T5295)
(declare-fun |3| () Int)
(declare-fun _lbv10 () Int)
(declare-fun _lbv8 () Int)
(declare-fun _lbv9 () Int)
(declare-fun _lbv12 () Int)
(declare-fun _lbv11 () Int)
(assert (forall ((bv0 Bool)) (= (set730 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set730 bv0))))
(assert (= (slen nil) 0))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv5))
(assert (> s _lbv6))
(assert (> s _lbv7))
(assert (forall ((bv0 Bool)) (= (set731 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv13 bv0) (set731 bv0))))
(assert (= (slen _lbv13) s))
(assert (=> (> (slen _lbv13) 0) (or (> (shd _lbv13) x0) (= (shd _lbv13) x0))))
(assert (forall ((bv0 Bool)) (= (set732 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv14 bv0) (set732 bv0))))
(assert (= (slen _lbv14) s))
(assert (=> (> (slen _lbv14) 0) (or (> (shd _lbv14) x0) (= (shd _lbv14) x0))))
(assert (forall ((bv0 Bool)) (= (set733 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv15 bv0) (set733 bv0))))
(assert (= (slen _lbv15) s))
(assert (=> (> (slen _lbv15) 0) (or (> (shd _lbv15) x0) (= (shd _lbv15) x0))))
(assert (forall ((bv0 Bool)) (= (set734 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv16 bv0) (set734 bv0))))
(assert (= (slen _lbv16) s))
(assert (=> (> (slen _lbv16) 0) (or (> (shd _lbv16) x0) (= (shd _lbv16) x0))))
(assert (forall ((bv0 Bool)) (= (set735 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv17 bv0) (set735 bv0))))
(assert (= (slen _lbv17) s))
(assert (=> (> (slen _lbv17) 0) (or (> (shd _lbv17) x0) (= (shd _lbv17) x0))))
(assert (forall ((bv0 Bool)) (= (set736 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv18 bv0) (set736 bv0))))
(assert (= (slen _lbv18) s))
(assert (=> (> (slen _lbv18) 0) (or (> (shd _lbv18) x0) (= (shd _lbv18) x0))))
(assert (forall ((bv0 Bool)) (= (set737 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv19 bv0) (set737 bv0))))
(assert (= (slen _lbv19) s))
(assert (=> (> (slen _lbv19) 0) (or (> (shd _lbv19) x0) (= (shd _lbv19) x0))))
(assert (forall ((bv0 Bool)) (= (set738 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv20 bv0) (set738 bv0))))
(assert (= (slen _lbv20) s))
(assert (=> (> (slen _lbv20) 0) (or (> (shd _lbv20) x0) (= (shd _lbv20) x0))))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (or (> _lbv10 _lbv7) (= _lbv10 _lbv7)))
(assert (= |3| 3))
(assert (not (> _lbv10 |3|)))
(assert (or (> _lbv9 _lbv8) (= _lbv9 _lbv8)))
(assert (= |3| 3))
(assert (not (> _lbv9 |3|)))
(assert (or (> _lbv12 _lbv5) (= _lbv12 _lbv5)))
(assert (= |3| 3))
(assert (not (> _lbv12 |3|)))
(assert (or (> _lbv11 _lbv6) (= _lbv11 _lbv6)))
(assert (= |3| 3))
(assert (not (> _lbv11 |3|)))
(assert (= _lbv8 (- s 1)))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (= _lbv8 (- s 1)))
(assert (not true))

 
 Enumerating a Scalar Term _lbv1
 
 Type of the Scalar Term {v:Ty_int | 
 	 Conj <c 
 Disj <d  v > s
 	,   v = s>d 
 	 , Negation v > 3 >c }                                                                                                                                                                                                                                                                          
solver 
 (declare-sort T5337)
(declare-fun set739 (Bool) Bool)
(declare-fun slist (T5337 Bool) Bool)
(declare-fun nil () T5337)
(declare-fun slen (T5337) Int)
(declare-fun |0| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv5 () Int)
(declare-fun s () Int)
(declare-fun _lbv6 () Int)
(declare-fun _lbv7 () Int)
(declare-fun _lbv8 () Int)
(declare-fun set740 (Bool) Bool)
(declare-fun _lbv13 () T5337)
(declare-fun shd (T5337) Int)
(declare-fun set741 (Bool) Bool)
(declare-fun _lbv14 () T5337)
(declare-fun set742 (Bool) Bool)
(declare-fun _lbv15 () T5337)
(declare-fun set743 (Bool) Bool)
(declare-fun _lbv16 () T5337)
(declare-fun set744 (Bool) Bool)
(declare-fun _lbv17 () T5337)
(declare-fun set745 (Bool) Bool)
(declare-fun _lbv18 () T5337)
(declare-fun set746 (Bool) Bool)
(declare-fun _lbv19 () T5337)
(declare-fun set747 (Bool) Bool)
(declare-fun _lbv20 () T5337)
(declare-fun |3| () Int)
(declare-fun _lbv10 () Int)
(declare-fun _lbv9 () Int)
(declare-fun _lbv12 () Int)
(declare-fun _lbv11 () Int)
(assert (forall ((bv0 Bool)) (= (set739 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set739 bv0))))
(assert (= (slen nil) 0))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv5))
(assert (> s _lbv6))
(assert (> s _lbv7))
(assert (= _lbv8 (- s 1)))
(assert (forall ((bv0 Bool)) (= (set740 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv13 bv0) (set740 bv0))))
(assert (= (slen _lbv13) s))
(assert (=> (> (slen _lbv13) 0) (or (> (shd _lbv13) x0) (= (shd _lbv13) x0))))
(assert (forall ((bv0 Bool)) (= (set741 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv14 bv0) (set741 bv0))))
(assert (= (slen _lbv14) s))
(assert (=> (> (slen _lbv14) 0) (or (> (shd _lbv14) x0) (= (shd _lbv14) x0))))
(assert (forall ((bv0 Bool)) (= (set742 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv15 bv0) (set742 bv0))))
(assert (= (slen _lbv15) s))
(assert (=> (> (slen _lbv15) 0) (or (> (shd _lbv15) x0) (= (shd _lbv15) x0))))
(assert (forall ((bv0 Bool)) (= (set743 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv16 bv0) (set743 bv0))))
(assert (= (slen _lbv16) s))
(assert (=> (> (slen _lbv16) 0) (or (> (shd _lbv16) x0) (= (shd _lbv16) x0))))
(assert (forall ((bv0 Bool)) (= (set744 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv17 bv0) (set744 bv0))))
(assert (= (slen _lbv17) s))
(assert (=> (> (slen _lbv17) 0) (or (> (shd _lbv17) x0) (= (shd _lbv17) x0))))
(assert (forall ((bv0 Bool)) (= (set745 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv18 bv0) (set745 bv0))))
(assert (= (slen _lbv18) s))
(assert (=> (> (slen _lbv18) 0) (or (> (shd _lbv18) x0) (= (shd _lbv18) x0))))
(assert (forall ((bv0 Bool)) (= (set746 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv19 bv0) (set746 bv0))))
(assert (= (slen _lbv19) s))
(assert (=> (> (slen _lbv19) 0) (or (> (shd _lbv19) x0) (= (shd _lbv19) x0))))
(assert (forall ((bv0 Bool)) (= (set747 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv20 bv0) (set747 bv0))))
(assert (= (slen _lbv20) s))
(assert (=> (> (slen _lbv20) 0) (or (> (shd _lbv20) x0) (= (shd _lbv20) x0))))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (or (> _lbv10 _lbv7) (= _lbv10 _lbv7)))
(assert (= |3| 3))
(assert (not (> _lbv10 |3|)))
(assert (or (> _lbv9 _lbv8) (= _lbv9 _lbv8)))
(assert (= |3| 3))
(assert (not (> _lbv9 |3|)))
(assert (or (> _lbv12 _lbv5) (= _lbv12 _lbv5)))
(assert (= |3| 3))
(assert (not (> _lbv12 |3|)))
(assert (or (> _lbv11 _lbv6) (= _lbv11 _lbv6)))
(assert (= |3| 3))
(assert (not (> _lbv11 |3|)))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (not true))

 
 Enumerating a Scalar Term _lbv0
 
 Type of the Scalar Term {v:Ty_int | 
 	 Conj <c 
 Disj <d  v > x0
 	,   v = x0>d 
 	 , Negation v > 3 >c }                                                                                                                                                                                                                                                                          
solver 
 (declare-sort T5379)
(declare-fun set748 (Bool) Bool)
(declare-fun slist (T5379 Bool) Bool)
(declare-fun nil () T5379)
(declare-fun slen (T5379) Int)
(declare-fun |0| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv5 () Int)
(declare-fun s () Int)
(declare-fun _lbv6 () Int)
(declare-fun _lbv7 () Int)
(declare-fun _lbv8 () Int)
(declare-fun set749 (Bool) Bool)
(declare-fun _lbv13 () T5379)
(declare-fun shd (T5379) Int)
(declare-fun set750 (Bool) Bool)
(declare-fun _lbv14 () T5379)
(declare-fun set751 (Bool) Bool)
(declare-fun _lbv15 () T5379)
(declare-fun set752 (Bool) Bool)
(declare-fun _lbv16 () T5379)
(declare-fun set753 (Bool) Bool)
(declare-fun _lbv17 () T5379)
(declare-fun set754 (Bool) Bool)
(declare-fun _lbv18 () T5379)
(declare-fun set755 (Bool) Bool)
(declare-fun _lbv19 () T5379)
(declare-fun set756 (Bool) Bool)
(declare-fun _lbv20 () T5379)
(declare-fun |3| () Int)
(declare-fun _lbv10 () Int)
(declare-fun _lbv9 () Int)
(declare-fun _lbv12 () Int)
(declare-fun _lbv11 () Int)
(assert (forall ((bv0 Bool)) (= (set748 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set748 bv0))))
(assert (= (slen nil) 0))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv5))
(assert (> s _lbv6))
(assert (> s _lbv7))
(assert (= _lbv8 (- s 1)))
(assert (forall ((bv0 Bool)) (= (set749 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv13 bv0) (set749 bv0))))
(assert (= (slen _lbv13) s))
(assert (=> (> (slen _lbv13) 0) (or (> (shd _lbv13) x0) (= (shd _lbv13) x0))))
(assert (forall ((bv0 Bool)) (= (set750 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv14 bv0) (set750 bv0))))
(assert (= (slen _lbv14) s))
(assert (=> (> (slen _lbv14) 0) (or (> (shd _lbv14) x0) (= (shd _lbv14) x0))))
(assert (forall ((bv0 Bool)) (= (set751 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv15 bv0) (set751 bv0))))
(assert (= (slen _lbv15) s))
(assert (=> (> (slen _lbv15) 0) (or (> (shd _lbv15) x0) (= (shd _lbv15) x0))))
(assert (forall ((bv0 Bool)) (= (set752 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv16 bv0) (set752 bv0))))
(assert (= (slen _lbv16) s))
(assert (=> (> (slen _lbv16) 0) (or (> (shd _lbv16) x0) (= (shd _lbv16) x0))))
(assert (forall ((bv0 Bool)) (= (set753 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv17 bv0) (set753 bv0))))
(assert (= (slen _lbv17) s))
(assert (=> (> (slen _lbv17) 0) (or (> (shd _lbv17) x0) (= (shd _lbv17) x0))))
(assert (forall ((bv0 Bool)) (= (set754 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv18 bv0) (set754 bv0))))
(assert (= (slen _lbv18) s))
(assert (=> (> (slen _lbv18) 0) (or (> (shd _lbv18) x0) (= (shd _lbv18) x0))))
(assert (forall ((bv0 Bool)) (= (set755 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv19 bv0) (set755 bv0))))
(assert (= (slen _lbv19) s))
(assert (=> (> (slen _lbv19) 0) (or (> (shd _lbv19) x0) (= (shd _lbv19) x0))))
(assert (forall ((bv0 Bool)) (= (set756 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv20 bv0) (set756 bv0))))
(assert (= (slen _lbv20) s))
(assert (=> (> (slen _lbv20) 0) (or (> (shd _lbv20) x0) (= (shd _lbv20) x0))))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv10 _lbv7) (= _lbv10 _lbv7)))
(assert (= |3| 3))
(assert (not (> _lbv10 |3|)))
(assert (or (> _lbv9 _lbv8) (= _lbv9 _lbv8)))
(assert (= |3| 3))
(assert (not (> _lbv9 |3|)))
(assert (or (> _lbv12 _lbv5) (= _lbv12 _lbv5)))
(assert (= |3| 3))
(assert (not (> _lbv12 |3|)))
(assert (or (> _lbv11 _lbv6) (= _lbv11 _lbv6)))
(assert (= |3| 3))
(assert (not (> _lbv11 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (not true))

 
 Enumerating a Scalar Term _lbv10
 
 Type of the Scalar Term {v:Ty_int | 
 	 Conj <c 
 Disj <d  v > _lbv7
 	,   v = _lbv7>d 
 	 , Negation v > 3 >c }                                                                                                                                                                                                                                                                          
solver 
 (declare-sort T5421)
(declare-fun set757 (Bool) Bool)
(declare-fun slist (T5421 Bool) Bool)
(declare-fun nil () T5421)
(declare-fun slen (T5421) Int)
(declare-fun |0| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv5 () Int)
(declare-fun s () Int)
(declare-fun _lbv6 () Int)
(declare-fun _lbv7 () Int)
(declare-fun _lbv8 () Int)
(declare-fun set758 (Bool) Bool)
(declare-fun _lbv13 () T5421)
(declare-fun shd (T5421) Int)
(declare-fun set759 (Bool) Bool)
(declare-fun _lbv14 () T5421)
(declare-fun set760 (Bool) Bool)
(declare-fun _lbv15 () T5421)
(declare-fun set761 (Bool) Bool)
(declare-fun _lbv16 () T5421)
(declare-fun set762 (Bool) Bool)
(declare-fun _lbv17 () T5421)
(declare-fun set763 (Bool) Bool)
(declare-fun _lbv18 () T5421)
(declare-fun set764 (Bool) Bool)
(declare-fun _lbv19 () T5421)
(declare-fun set765 (Bool) Bool)
(declare-fun _lbv20 () T5421)
(declare-fun |3| () Int)
(declare-fun _lbv9 () Int)
(declare-fun _lbv12 () Int)
(declare-fun _lbv11 () Int)
(declare-fun _lbv10 () Int)
(assert (forall ((bv0 Bool)) (= (set757 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set757 bv0))))
(assert (= (slen nil) 0))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv5))
(assert (> s _lbv6))
(assert (> s _lbv7))
(assert (= _lbv8 (- s 1)))
(assert (forall ((bv0 Bool)) (= (set758 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv13 bv0) (set758 bv0))))
(assert (= (slen _lbv13) s))
(assert (=> (> (slen _lbv13) 0) (or (> (shd _lbv13) x0) (= (shd _lbv13) x0))))
(assert (forall ((bv0 Bool)) (= (set759 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv14 bv0) (set759 bv0))))
(assert (= (slen _lbv14) s))
(assert (=> (> (slen _lbv14) 0) (or (> (shd _lbv14) x0) (= (shd _lbv14) x0))))
(assert (forall ((bv0 Bool)) (= (set760 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv15 bv0) (set760 bv0))))
(assert (= (slen _lbv15) s))
(assert (=> (> (slen _lbv15) 0) (or (> (shd _lbv15) x0) (= (shd _lbv15) x0))))
(assert (forall ((bv0 Bool)) (= (set761 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv16 bv0) (set761 bv0))))
(assert (= (slen _lbv16) s))
(assert (=> (> (slen _lbv16) 0) (or (> (shd _lbv16) x0) (= (shd _lbv16) x0))))
(assert (forall ((bv0 Bool)) (= (set762 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv17 bv0) (set762 bv0))))
(assert (= (slen _lbv17) s))
(assert (=> (> (slen _lbv17) 0) (or (> (shd _lbv17) x0) (= (shd _lbv17) x0))))
(assert (forall ((bv0 Bool)) (= (set763 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv18 bv0) (set763 bv0))))
(assert (= (slen _lbv18) s))
(assert (=> (> (slen _lbv18) 0) (or (> (shd _lbv18) x0) (= (shd _lbv18) x0))))
(assert (forall ((bv0 Bool)) (= (set764 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv19 bv0) (set764 bv0))))
(assert (= (slen _lbv19) s))
(assert (=> (> (slen _lbv19) 0) (or (> (shd _lbv19) x0) (= (shd _lbv19) x0))))
(assert (forall ((bv0 Bool)) (= (set765 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv20 bv0) (set765 bv0))))
(assert (= (slen _lbv20) s))
(assert (=> (> (slen _lbv20) 0) (or (> (shd _lbv20) x0) (= (shd _lbv20) x0))))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (or (> _lbv9 _lbv8) (= _lbv9 _lbv8)))
(assert (= |3| 3))
(assert (not (> _lbv9 |3|)))
(assert (or (> _lbv12 _lbv5) (= _lbv12 _lbv5)))
(assert (= |3| 3))
(assert (not (> _lbv12 |3|)))
(assert (or (> _lbv11 _lbv6) (= _lbv11 _lbv6)))
(assert (= |3| 3))
(assert (not (> _lbv11 |3|)))
(assert (or (> _lbv10 _lbv7) (= _lbv10 _lbv7)))
(assert (= |3| 3))
(assert (not (> _lbv10 |3|)))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (or (> _lbv10 _lbv7) (= _lbv10 _lbv7)))
(assert (= |3| 3))
(assert (not (> _lbv10 |3|)))
(assert (not true))

 
 Enumerating a Scalar Term _lbv9
 
 Type of the Scalar Term {v:Ty_int | 
 	 Conj <c 
 Disj <d  v > _lbv8
 	,   v = _lbv8>d 
 	 , Negation v > 3 >c }                                                                                                                                                                                                                                                                          
solver 
 (declare-sort T5463)
(declare-fun set766 (Bool) Bool)
(declare-fun slist (T5463 Bool) Bool)
(declare-fun nil () T5463)
(declare-fun slen (T5463) Int)
(declare-fun |0| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv5 () Int)
(declare-fun s () Int)
(declare-fun _lbv6 () Int)
(declare-fun _lbv7 () Int)
(declare-fun _lbv8 () Int)
(declare-fun set767 (Bool) Bool)
(declare-fun _lbv13 () T5463)
(declare-fun shd (T5463) Int)
(declare-fun set768 (Bool) Bool)
(declare-fun _lbv14 () T5463)
(declare-fun set769 (Bool) Bool)
(declare-fun _lbv15 () T5463)
(declare-fun set770 (Bool) Bool)
(declare-fun _lbv16 () T5463)
(declare-fun set771 (Bool) Bool)
(declare-fun _lbv17 () T5463)
(declare-fun set772 (Bool) Bool)
(declare-fun _lbv18 () T5463)
(declare-fun set773 (Bool) Bool)
(declare-fun _lbv19 () T5463)
(declare-fun set774 (Bool) Bool)
(declare-fun _lbv20 () T5463)
(declare-fun |3| () Int)
(declare-fun _lbv10 () Int)
(declare-fun _lbv12 () Int)
(declare-fun _lbv11 () Int)
(declare-fun _lbv9 () Int)
(assert (forall ((bv0 Bool)) (= (set766 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set766 bv0))))
(assert (= (slen nil) 0))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv5))
(assert (> s _lbv6))
(assert (> s _lbv7))
(assert (= _lbv8 (- s 1)))
(assert (forall ((bv0 Bool)) (= (set767 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv13 bv0) (set767 bv0))))
(assert (= (slen _lbv13) s))
(assert (=> (> (slen _lbv13) 0) (or (> (shd _lbv13) x0) (= (shd _lbv13) x0))))
(assert (forall ((bv0 Bool)) (= (set768 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv14 bv0) (set768 bv0))))
(assert (= (slen _lbv14) s))
(assert (=> (> (slen _lbv14) 0) (or (> (shd _lbv14) x0) (= (shd _lbv14) x0))))
(assert (forall ((bv0 Bool)) (= (set769 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv15 bv0) (set769 bv0))))
(assert (= (slen _lbv15) s))
(assert (=> (> (slen _lbv15) 0) (or (> (shd _lbv15) x0) (= (shd _lbv15) x0))))
(assert (forall ((bv0 Bool)) (= (set770 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv16 bv0) (set770 bv0))))
(assert (= (slen _lbv16) s))
(assert (=> (> (slen _lbv16) 0) (or (> (shd _lbv16) x0) (= (shd _lbv16) x0))))
(assert (forall ((bv0 Bool)) (= (set771 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv17 bv0) (set771 bv0))))
(assert (= (slen _lbv17) s))
(assert (=> (> (slen _lbv17) 0) (or (> (shd _lbv17) x0) (= (shd _lbv17) x0))))
(assert (forall ((bv0 Bool)) (= (set772 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv18 bv0) (set772 bv0))))
(assert (= (slen _lbv18) s))
(assert (=> (> (slen _lbv18) 0) (or (> (shd _lbv18) x0) (= (shd _lbv18) x0))))
(assert (forall ((bv0 Bool)) (= (set773 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv19 bv0) (set773 bv0))))
(assert (= (slen _lbv19) s))
(assert (=> (> (slen _lbv19) 0) (or (> (shd _lbv19) x0) (= (shd _lbv19) x0))))
(assert (forall ((bv0 Bool)) (= (set774 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv20 bv0) (set774 bv0))))
(assert (= (slen _lbv20) s))
(assert (=> (> (slen _lbv20) 0) (or (> (shd _lbv20) x0) (= (shd _lbv20) x0))))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (or (> _lbv10 _lbv7) (= _lbv10 _lbv7)))
(assert (= |3| 3))
(assert (not (> _lbv10 |3|)))
(assert (or (> _lbv12 _lbv5) (= _lbv12 _lbv5)))
(assert (= |3| 3))
(assert (not (> _lbv12 |3|)))
(assert (or (> _lbv11 _lbv6) (= _lbv11 _lbv6)))
(assert (= |3| 3))
(assert (not (> _lbv11 |3|)))
(assert (or (> _lbv9 _lbv8) (= _lbv9 _lbv8)))
(assert (= |3| 3))
(assert (not (> _lbv9 |3|)))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (or (> _lbv9 _lbv8) (= _lbv9 _lbv8)))
(assert (= |3| 3))
(assert (not (> _lbv9 |3|)))
(assert (not true))

 
 Enumerating a Scalar Term _lbv12
 
 Type of the Scalar Term {v:Ty_int | 
 	 Conj <c 
 Disj <d  v > _lbv5
 	,   v = _lbv5>d 
 	 , Negation v > 3 >c }                                                                                                                                                                                                                                                                          
solver 
 (declare-sort T5505)
(declare-fun set775 (Bool) Bool)
(declare-fun slist (T5505 Bool) Bool)
(declare-fun nil () T5505)
(declare-fun slen (T5505) Int)
(declare-fun |0| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv5 () Int)
(declare-fun s () Int)
(declare-fun _lbv6 () Int)
(declare-fun _lbv7 () Int)
(declare-fun _lbv8 () Int)
(declare-fun set776 (Bool) Bool)
(declare-fun _lbv13 () T5505)
(declare-fun shd (T5505) Int)
(declare-fun set777 (Bool) Bool)
(declare-fun _lbv14 () T5505)
(declare-fun set778 (Bool) Bool)
(declare-fun _lbv15 () T5505)
(declare-fun set779 (Bool) Bool)
(declare-fun _lbv16 () T5505)
(declare-fun set780 (Bool) Bool)
(declare-fun _lbv17 () T5505)
(declare-fun set781 (Bool) Bool)
(declare-fun _lbv18 () T5505)
(declare-fun set782 (Bool) Bool)
(declare-fun _lbv19 () T5505)
(declare-fun set783 (Bool) Bool)
(declare-fun _lbv20 () T5505)
(declare-fun |3| () Int)
(declare-fun _lbv10 () Int)
(declare-fun _lbv9 () Int)
(declare-fun _lbv11 () Int)
(declare-fun _lbv12 () Int)
(assert (forall ((bv0 Bool)) (= (set775 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set775 bv0))))
(assert (= (slen nil) 0))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv5))
(assert (> s _lbv6))
(assert (> s _lbv7))
(assert (= _lbv8 (- s 1)))
(assert (forall ((bv0 Bool)) (= (set776 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv13 bv0) (set776 bv0))))
(assert (= (slen _lbv13) s))
(assert (=> (> (slen _lbv13) 0) (or (> (shd _lbv13) x0) (= (shd _lbv13) x0))))
(assert (forall ((bv0 Bool)) (= (set777 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv14 bv0) (set777 bv0))))
(assert (= (slen _lbv14) s))
(assert (=> (> (slen _lbv14) 0) (or (> (shd _lbv14) x0) (= (shd _lbv14) x0))))
(assert (forall ((bv0 Bool)) (= (set778 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv15 bv0) (set778 bv0))))
(assert (= (slen _lbv15) s))
(assert (=> (> (slen _lbv15) 0) (or (> (shd _lbv15) x0) (= (shd _lbv15) x0))))
(assert (forall ((bv0 Bool)) (= (set779 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv16 bv0) (set779 bv0))))
(assert (= (slen _lbv16) s))
(assert (=> (> (slen _lbv16) 0) (or (> (shd _lbv16) x0) (= (shd _lbv16) x0))))
(assert (forall ((bv0 Bool)) (= (set780 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv17 bv0) (set780 bv0))))
(assert (= (slen _lbv17) s))
(assert (=> (> (slen _lbv17) 0) (or (> (shd _lbv17) x0) (= (shd _lbv17) x0))))
(assert (forall ((bv0 Bool)) (= (set781 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv18 bv0) (set781 bv0))))
(assert (= (slen _lbv18) s))
(assert (=> (> (slen _lbv18) 0) (or (> (shd _lbv18) x0) (= (shd _lbv18) x0))))
(assert (forall ((bv0 Bool)) (= (set782 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv19 bv0) (set782 bv0))))
(assert (= (slen _lbv19) s))
(assert (=> (> (slen _lbv19) 0) (or (> (shd _lbv19) x0) (= (shd _lbv19) x0))))
(assert (forall ((bv0 Bool)) (= (set783 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv20 bv0) (set783 bv0))))
(assert (= (slen _lbv20) s))
(assert (=> (> (slen _lbv20) 0) (or (> (shd _lbv20) x0) (= (shd _lbv20) x0))))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (or (> _lbv10 _lbv7) (= _lbv10 _lbv7)))
(assert (= |3| 3))
(assert (not (> _lbv10 |3|)))
(assert (or (> _lbv9 _lbv8) (= _lbv9 _lbv8)))
(assert (= |3| 3))
(assert (not (> _lbv9 |3|)))
(assert (or (> _lbv11 _lbv6) (= _lbv11 _lbv6)))
(assert (= |3| 3))
(assert (not (> _lbv11 |3|)))
(assert (or (> _lbv12 _lbv5) (= _lbv12 _lbv5)))
(assert (= |3| 3))
(assert (not (> _lbv12 |3|)))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (or (> _lbv12 _lbv5) (= _lbv12 _lbv5)))
(assert (= |3| 3))
(assert (not (> _lbv12 |3|)))
(assert (not true))

 
 Enumerating a Scalar Term _lbv11
 
 Type of the Scalar Term {v:Ty_int | 
 	 Conj <c 
 Disj <d  v > _lbv6
 	,   v = _lbv6>d 
 	 , Negation v > 3 >c }                                                                                                                                                                                                                                                                          
solver 
 (declare-sort T5547)
(declare-fun set784 (Bool) Bool)
(declare-fun slist (T5547 Bool) Bool)
(declare-fun nil () T5547)
(declare-fun slen (T5547) Int)
(declare-fun |0| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv5 () Int)
(declare-fun s () Int)
(declare-fun _lbv6 () Int)
(declare-fun _lbv7 () Int)
(declare-fun _lbv8 () Int)
(declare-fun set785 (Bool) Bool)
(declare-fun _lbv13 () T5547)
(declare-fun shd (T5547) Int)
(declare-fun set786 (Bool) Bool)
(declare-fun _lbv14 () T5547)
(declare-fun set787 (Bool) Bool)
(declare-fun _lbv15 () T5547)
(declare-fun set788 (Bool) Bool)
(declare-fun _lbv16 () T5547)
(declare-fun set789 (Bool) Bool)
(declare-fun _lbv17 () T5547)
(declare-fun set790 (Bool) Bool)
(declare-fun _lbv18 () T5547)
(declare-fun set791 (Bool) Bool)
(declare-fun _lbv19 () T5547)
(declare-fun set792 (Bool) Bool)
(declare-fun _lbv20 () T5547)
(declare-fun |3| () Int)
(declare-fun _lbv10 () Int)
(declare-fun _lbv9 () Int)
(declare-fun _lbv12 () Int)
(declare-fun _lbv11 () Int)
(assert (forall ((bv0 Bool)) (= (set784 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set784 bv0))))
(assert (= (slen nil) 0))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv5))
(assert (> s _lbv6))
(assert (> s _lbv7))
(assert (= _lbv8 (- s 1)))
(assert (forall ((bv0 Bool)) (= (set785 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv13 bv0) (set785 bv0))))
(assert (= (slen _lbv13) s))
(assert (=> (> (slen _lbv13) 0) (or (> (shd _lbv13) x0) (= (shd _lbv13) x0))))
(assert (forall ((bv0 Bool)) (= (set786 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv14 bv0) (set786 bv0))))
(assert (= (slen _lbv14) s))
(assert (=> (> (slen _lbv14) 0) (or (> (shd _lbv14) x0) (= (shd _lbv14) x0))))
(assert (forall ((bv0 Bool)) (= (set787 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv15 bv0) (set787 bv0))))
(assert (= (slen _lbv15) s))
(assert (=> (> (slen _lbv15) 0) (or (> (shd _lbv15) x0) (= (shd _lbv15) x0))))
(assert (forall ((bv0 Bool)) (= (set788 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv16 bv0) (set788 bv0))))
(assert (= (slen _lbv16) s))
(assert (=> (> (slen _lbv16) 0) (or (> (shd _lbv16) x0) (= (shd _lbv16) x0))))
(assert (forall ((bv0 Bool)) (= (set789 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv17 bv0) (set789 bv0))))
(assert (= (slen _lbv17) s))
(assert (=> (> (slen _lbv17) 0) (or (> (shd _lbv17) x0) (= (shd _lbv17) x0))))
(assert (forall ((bv0 Bool)) (= (set790 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv18 bv0) (set790 bv0))))
(assert (= (slen _lbv18) s))
(assert (=> (> (slen _lbv18) 0) (or (> (shd _lbv18) x0) (= (shd _lbv18) x0))))
(assert (forall ((bv0 Bool)) (= (set791 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv19 bv0) (set791 bv0))))
(assert (= (slen _lbv19) s))
(assert (=> (> (slen _lbv19) 0) (or (> (shd _lbv19) x0) (= (shd _lbv19) x0))))
(assert (forall ((bv0 Bool)) (= (set792 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv20 bv0) (set792 bv0))))
(assert (= (slen _lbv20) s))
(assert (=> (> (slen _lbv20) 0) (or (> (shd _lbv20) x0) (= (shd _lbv20) x0))))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (or (> _lbv10 _lbv7) (= _lbv10 _lbv7)))
(assert (= |3| 3))
(assert (not (> _lbv10 |3|)))
(assert (or (> _lbv9 _lbv8) (= _lbv9 _lbv8)))
(assert (= |3| 3))
(assert (not (> _lbv9 |3|)))
(assert (or (> _lbv12 _lbv5) (= _lbv12 _lbv5)))
(assert (= |3| 3))
(assert (not (> _lbv12 |3|)))
(assert (or (> _lbv11 _lbv6) (= _lbv11 _lbv6)))
(assert (= |3| 3))
(assert (not (> _lbv11 |3|)))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (or (> _lbv11 _lbv6) (= _lbv11 _lbv6)))
(assert (= |3| 3))
(assert (not (> _lbv11 |3|)))
(assert (not true))

 Show :: Found a Few Macthing Scalars 
  Next Trying Arguments of the form f (ei...) 
  Pure Fun Application: esynthesizePureApp 
 ##################################################################################
  Synthesizing the 2th argument for Function cons
  Trying Arguments in Scalars 
 esynthesizeScalar for {v:Ty_alphalist | (slist)(v) = (true)}
  Enumeration for 
 spec 
 {v:Ty_alphalist | (slist)(v) = (true)}
 
 Enumerating a Scalar Term nil
 
 Type of the Scalar Term {v:Ty_alphalist | 
 	 Conj <c (slist)(v) = (true)
 	 , (slen)(v) ==(0) >c }                                                                                                                                                                                                                                                              
solver 
 (declare-sort T5590)
(declare-fun |0| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv5 () Int)
(declare-fun s () Int)
(declare-fun _lbv6 () Int)
(declare-fun _lbv7 () Int)
(declare-fun _lbv8 () Int)
(declare-fun set793 (Bool) Bool)
(declare-fun slist (T5590 Bool) Bool)
(declare-fun _lbv13 () T5590)
(declare-fun slen (T5590) Int)
(declare-fun shd (T5590) Int)
(declare-fun set794 (Bool) Bool)
(declare-fun _lbv14 () T5590)
(declare-fun set795 (Bool) Bool)
(declare-fun _lbv15 () T5590)
(declare-fun set796 (Bool) Bool)
(declare-fun _lbv16 () T5590)
(declare-fun set797 (Bool) Bool)
(declare-fun _lbv17 () T5590)
(declare-fun set798 (Bool) Bool)
(declare-fun _lbv18 () T5590)
(declare-fun set799 (Bool) Bool)
(declare-fun _lbv19 () T5590)
(declare-fun set800 (Bool) Bool)
(declare-fun _lbv20 () T5590)
(declare-fun |3| () Int)
(declare-fun _lbv10 () Int)
(declare-fun _lbv9 () Int)
(declare-fun _lbv12 () Int)
(declare-fun _lbv11 () Int)
(declare-fun set801 (Bool) Bool)
(declare-fun nil () T5590)
(declare-fun set802 (Bool) Bool)
(declare-fun set803 (Bool) Bool)
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv5))
(assert (> s _lbv6))
(assert (> s _lbv7))
(assert (= _lbv8 (- s 1)))
(assert (forall ((bv0 Bool)) (= (set793 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv13 bv0) (set793 bv0))))
(assert (= (slen _lbv13) s))
(assert (=> (> (slen _lbv13) 0) (or (> (shd _lbv13) x0) (= (shd _lbv13) x0))))
(assert (forall ((bv0 Bool)) (= (set794 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv14 bv0) (set794 bv0))))
(assert (= (slen _lbv14) s))
(assert (=> (> (slen _lbv14) 0) (or (> (shd _lbv14) x0) (= (shd _lbv14) x0))))
(assert (forall ((bv0 Bool)) (= (set795 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv15 bv0) (set795 bv0))))
(assert (= (slen _lbv15) s))
(assert (=> (> (slen _lbv15) 0) (or (> (shd _lbv15) x0) (= (shd _lbv15) x0))))
(assert (forall ((bv0 Bool)) (= (set796 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv16 bv0) (set796 bv0))))
(assert (= (slen _lbv16) s))
(assert (=> (> (slen _lbv16) 0) (or (> (shd _lbv16) x0) (= (shd _lbv16) x0))))
(assert (forall ((bv0 Bool)) (= (set797 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv17 bv0) (set797 bv0))))
(assert (= (slen _lbv17) s))
(assert (=> (> (slen _lbv17) 0) (or (> (shd _lbv17) x0) (= (shd _lbv17) x0))))
(assert (forall ((bv0 Bool)) (= (set798 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv18 bv0) (set798 bv0))))
(assert (= (slen _lbv18) s))
(assert (=> (> (slen _lbv18) 0) (or (> (shd _lbv18) x0) (= (shd _lbv18) x0))))
(assert (forall ((bv0 Bool)) (= (set799 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv19 bv0) (set799 bv0))))
(assert (= (slen _lbv19) s))
(assert (=> (> (slen _lbv19) 0) (or (> (shd _lbv19) x0) (= (shd _lbv19) x0))))
(assert (forall ((bv0 Bool)) (= (set800 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv20 bv0) (set800 bv0))))
(assert (= (slen _lbv20) s))
(assert (=> (> (slen _lbv20) 0) (or (> (shd _lbv20) x0) (= (shd _lbv20) x0))))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (or (> _lbv10 _lbv7) (= _lbv10 _lbv7)))
(assert (= |3| 3))
(assert (not (> _lbv10 |3|)))
(assert (or (> _lbv9 _lbv8) (= _lbv9 _lbv8)))
(assert (= |3| 3))
(assert (not (> _lbv9 |3|)))
(assert (or (> _lbv12 _lbv5) (= _lbv12 _lbv5)))
(assert (= |3| 3))
(assert (not (> _lbv12 |3|)))
(assert (or (> _lbv11 _lbv6) (= _lbv11 _lbv6)))
(assert (= |3| 3))
(assert (not (> _lbv11 |3|)))
(assert (forall ((bv0 Bool)) (= (set801 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set801 bv0))))
(assert (= (slen nil) 0))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (forall ((bv0 Bool)) (= (set802 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set802 bv0))))
(assert (= (slen nil) 0))
(assert (forall ((bv0 Bool)) (= (set803 bv0) (and (= bv0 true)))))
(assert (not (forall ((bv0 Bool)) (= (slist nil bv0) (set803 bv0)))))

 
 Timeout the subtype check T_vi <: T_goal
 
 Enumerating a Scalar Term _lbv13
 
 Type of the Scalar Term {v:Ty_alphalist | 
 	 Conj <c (slist)(v) = (true)
 	 , 
 	 Conj <c (slen)(v) ==(s)
 	 , 
 	 Impl < (slen)(v) > (0)
 	 
 Disj <d  (shd)(v) > (x0)
 	,   (shd)(v) ==(x0)>d  > >c  >c }                                                                                                                                                                                                                                                              
solver 
 (declare-sort T5631)
(declare-fun set804 (Bool) Bool)
(declare-fun slist (T5631 Bool) Bool)
(declare-fun nil () T5631)
(declare-fun slen (T5631) Int)
(declare-fun |0| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv5 () Int)
(declare-fun s () Int)
(declare-fun _lbv6 () Int)
(declare-fun _lbv7 () Int)
(declare-fun _lbv8 () Int)
(declare-fun set805 (Bool) Bool)
(declare-fun _lbv14 () T5631)
(declare-fun shd (T5631) Int)
(declare-fun set806 (Bool) Bool)
(declare-fun _lbv15 () T5631)
(declare-fun set807 (Bool) Bool)
(declare-fun _lbv16 () T5631)
(declare-fun set808 (Bool) Bool)
(declare-fun _lbv17 () T5631)
(declare-fun set809 (Bool) Bool)
(declare-fun _lbv18 () T5631)
(declare-fun set810 (Bool) Bool)
(declare-fun _lbv19 () T5631)
(declare-fun set811 (Bool) Bool)
(declare-fun _lbv20 () T5631)
(declare-fun |3| () Int)
(declare-fun _lbv10 () Int)
(declare-fun _lbv9 () Int)
(declare-fun _lbv12 () Int)
(declare-fun _lbv11 () Int)
(declare-fun set812 (Bool) Bool)
(declare-fun _lbv13 () T5631)
(declare-fun set813 (Bool) Bool)
(declare-fun set814 (Bool) Bool)
(assert (forall ((bv0 Bool)) (= (set804 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set804 bv0))))
(assert (= (slen nil) 0))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv5))
(assert (> s _lbv6))
(assert (> s _lbv7))
(assert (= _lbv8 (- s 1)))
(assert (forall ((bv0 Bool)) (= (set805 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv14 bv0) (set805 bv0))))
(assert (= (slen _lbv14) s))
(assert (=> (> (slen _lbv14) 0) (or (> (shd _lbv14) x0) (= (shd _lbv14) x0))))
(assert (forall ((bv0 Bool)) (= (set806 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv15 bv0) (set806 bv0))))
(assert (= (slen _lbv15) s))
(assert (=> (> (slen _lbv15) 0) (or (> (shd _lbv15) x0) (= (shd _lbv15) x0))))
(assert (forall ((bv0 Bool)) (= (set807 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv16 bv0) (set807 bv0))))
(assert (= (slen _lbv16) s))
(assert (=> (> (slen _lbv16) 0) (or (> (shd _lbv16) x0) (= (shd _lbv16) x0))))
(assert (forall ((bv0 Bool)) (= (set808 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv17 bv0) (set808 bv0))))
(assert (= (slen _lbv17) s))
(assert (=> (> (slen _lbv17) 0) (or (> (shd _lbv17) x0) (= (shd _lbv17) x0))))
(assert (forall ((bv0 Bool)) (= (set809 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv18 bv0) (set809 bv0))))
(assert (= (slen _lbv18) s))
(assert (=> (> (slen _lbv18) 0) (or (> (shd _lbv18) x0) (= (shd _lbv18) x0))))
(assert (forall ((bv0 Bool)) (= (set810 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv19 bv0) (set810 bv0))))
(assert (= (slen _lbv19) s))
(assert (=> (> (slen _lbv19) 0) (or (> (shd _lbv19) x0) (= (shd _lbv19) x0))))
(assert (forall ((bv0 Bool)) (= (set811 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv20 bv0) (set811 bv0))))
(assert (= (slen _lbv20) s))
(assert (=> (> (slen _lbv20) 0) (or (> (shd _lbv20) x0) (= (shd _lbv20) x0))))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (or (> _lbv10 _lbv7) (= _lbv10 _lbv7)))
(assert (= |3| 3))
(assert (not (> _lbv10 |3|)))
(assert (or (> _lbv9 _lbv8) (= _lbv9 _lbv8)))
(assert (= |3| 3))
(assert (not (> _lbv9 |3|)))
(assert (or (> _lbv12 _lbv5) (= _lbv12 _lbv5)))
(assert (= |3| 3))
(assert (not (> _lbv12 |3|)))
(assert (or (> _lbv11 _lbv6) (= _lbv11 _lbv6)))
(assert (= |3| 3))
(assert (not (> _lbv11 |3|)))
(assert (forall ((bv0 Bool)) (= (set812 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv13 bv0) (set812 bv0))))
(assert (= (slen _lbv13) s))
(assert (=> (> (slen _lbv13) 0) (or (> (shd _lbv13) x0) (= (shd _lbv13) x0))))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (forall ((bv0 Bool)) (= (set813 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv13 bv0) (set813 bv0))))
(assert (= (slen _lbv13) s))
(assert (=> (> (slen _lbv13) 0) (or (> (shd _lbv13) x0) (= (shd _lbv13) x0))))
(assert (forall ((bv0 Bool)) (= (set814 bv0) (and (= bv0 true)))))
(assert (not (forall ((bv0 Bool)) (= (slist _lbv13 bv0) (set814 bv0)))))

 
 Timedout the subtype check T_vi <: T_goal
 
 Enumerating a Scalar Term _lbv14
 
 Type of the Scalar Term {v:Ty_alphalist | 
 	 Conj <c (slist)(v) = (true)
 	 , 
 	 Conj <c (slen)(v) ==(s)
 	 , 
 	 Impl < (slen)(v) > (0)
 	 
 Disj <d  (shd)(v) > (x0)
 	,   (shd)(v) ==(x0)>d  > >c  >c }                                                                                                                                                                                                                                                              
solver 
 (declare-sort T5673)
(declare-fun set815 (Bool) Bool)
(declare-fun slist (T5673 Bool) Bool)
(declare-fun nil () T5673)
(declare-fun slen (T5673) Int)
(declare-fun |0| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv5 () Int)
(declare-fun s () Int)
(declare-fun _lbv6 () Int)
(declare-fun _lbv7 () Int)
(declare-fun _lbv8 () Int)
(declare-fun set816 (Bool) Bool)
(declare-fun _lbv13 () T5673)
(declare-fun shd (T5673) Int)
(declare-fun set817 (Bool) Bool)
(declare-fun _lbv15 () T5673)
(declare-fun set818 (Bool) Bool)
(declare-fun _lbv16 () T5673)
(declare-fun set819 (Bool) Bool)
(declare-fun _lbv17 () T5673)
(declare-fun set820 (Bool) Bool)
(declare-fun _lbv18 () T5673)
(declare-fun set821 (Bool) Bool)
(declare-fun _lbv19 () T5673)
(declare-fun set822 (Bool) Bool)
(declare-fun _lbv20 () T5673)
(declare-fun |3| () Int)
(declare-fun _lbv10 () Int)
(declare-fun _lbv9 () Int)
(declare-fun _lbv12 () Int)
(declare-fun _lbv11 () Int)
(declare-fun set823 (Bool) Bool)
(declare-fun _lbv14 () T5673)
(declare-fun set824 (Bool) Bool)
(declare-fun set825 (Bool) Bool)
(assert (forall ((bv0 Bool)) (= (set815 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set815 bv0))))
(assert (= (slen nil) 0))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv5))
(assert (> s _lbv6))
(assert (> s _lbv7))
(assert (= _lbv8 (- s 1)))
(assert (forall ((bv0 Bool)) (= (set816 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv13 bv0) (set816 bv0))))
(assert (= (slen _lbv13) s))
(assert (=> (> (slen _lbv13) 0) (or (> (shd _lbv13) x0) (= (shd _lbv13) x0))))
(assert (forall ((bv0 Bool)) (= (set817 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv15 bv0) (set817 bv0))))
(assert (= (slen _lbv15) s))
(assert (=> (> (slen _lbv15) 0) (or (> (shd _lbv15) x0) (= (shd _lbv15) x0))))
(assert (forall ((bv0 Bool)) (= (set818 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv16 bv0) (set818 bv0))))
(assert (= (slen _lbv16) s))
(assert (=> (> (slen _lbv16) 0) (or (> (shd _lbv16) x0) (= (shd _lbv16) x0))))
(assert (forall ((bv0 Bool)) (= (set819 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv17 bv0) (set819 bv0))))
(assert (= (slen _lbv17) s))
(assert (=> (> (slen _lbv17) 0) (or (> (shd _lbv17) x0) (= (shd _lbv17) x0))))
(assert (forall ((bv0 Bool)) (= (set820 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv18 bv0) (set820 bv0))))
(assert (= (slen _lbv18) s))
(assert (=> (> (slen _lbv18) 0) (or (> (shd _lbv18) x0) (= (shd _lbv18) x0))))
(assert (forall ((bv0 Bool)) (= (set821 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv19 bv0) (set821 bv0))))
(assert (= (slen _lbv19) s))
(assert (=> (> (slen _lbv19) 0) (or (> (shd _lbv19) x0) (= (shd _lbv19) x0))))
(assert (forall ((bv0 Bool)) (= (set822 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv20 bv0) (set822 bv0))))
(assert (= (slen _lbv20) s))
(assert (=> (> (slen _lbv20) 0) (or (> (shd _lbv20) x0) (= (shd _lbv20) x0))))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (or (> _lbv10 _lbv7) (= _lbv10 _lbv7)))
(assert (= |3| 3))
(assert (not (> _lbv10 |3|)))
(assert (or (> _lbv9 _lbv8) (= _lbv9 _lbv8)))
(assert (= |3| 3))
(assert (not (> _lbv9 |3|)))
(assert (or (> _lbv12 _lbv5) (= _lbv12 _lbv5)))
(assert (= |3| 3))
(assert (not (> _lbv12 |3|)))
(assert (or (> _lbv11 _lbv6) (= _lbv11 _lbv6)))
(assert (= |3| 3))
(assert (not (> _lbv11 |3|)))
(assert (forall ((bv0 Bool)) (= (set823 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv14 bv0) (set823 bv0))))
(assert (= (slen _lbv14) s))
(assert (=> (> (slen _lbv14) 0) (or (> (shd _lbv14) x0) (= (shd _lbv14) x0))))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (forall ((bv0 Bool)) (= (set824 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv14 bv0) (set824 bv0))))
(assert (= (slen _lbv14) s))
(assert (=> (> (slen _lbv14) 0) (or (> (shd _lbv14) x0) (= (shd _lbv14) x0))))
(assert (forall ((bv0 Bool)) (= (set825 bv0) (and (= bv0 true)))))
(assert (not (forall ((bv0 Bool)) (= (slist _lbv14 bv0) (set825 bv0)))))

 
 Timedout the subtype check T_vi <: T_goal
 
 Enumerating a Scalar Term _lbv15
 
 Type of the Scalar Term {v:Ty_alphalist | 
 	 Conj <c (slist)(v) = (true)
 	 , 
 	 Conj <c (slen)(v) ==(s)
 	 , 
 	 Impl < (slen)(v) > (0)
 	 
 Disj <d  (shd)(v) > (x0)
 	,   (shd)(v) ==(x0)>d  > >c  >c }                                                                                                                                                                                                                                                              
solver 
 (declare-sort T5715)
(declare-fun set826 (Bool) Bool)
(declare-fun slist (T5715 Bool) Bool)
(declare-fun nil () T5715)
(declare-fun slen (T5715) Int)
(declare-fun |0| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv5 () Int)
(declare-fun s () Int)
(declare-fun _lbv6 () Int)
(declare-fun _lbv7 () Int)
(declare-fun _lbv8 () Int)
(declare-fun set827 (Bool) Bool)
(declare-fun _lbv13 () T5715)
(declare-fun shd (T5715) Int)
(declare-fun set828 (Bool) Bool)
(declare-fun _lbv14 () T5715)
(declare-fun set829 (Bool) Bool)
(declare-fun _lbv16 () T5715)
(declare-fun set830 (Bool) Bool)
(declare-fun _lbv17 () T5715)
(declare-fun set831 (Bool) Bool)
(declare-fun _lbv18 () T5715)
(declare-fun set832 (Bool) Bool)
(declare-fun _lbv19 () T5715)
(declare-fun set833 (Bool) Bool)
(declare-fun _lbv20 () T5715)
(declare-fun |3| () Int)
(declare-fun _lbv10 () Int)
(declare-fun _lbv9 () Int)
(declare-fun _lbv12 () Int)
(declare-fun _lbv11 () Int)
(declare-fun set834 (Bool) Bool)
(declare-fun _lbv15 () T5715)
(declare-fun set835 (Bool) Bool)
(declare-fun set836 (Bool) Bool)
(assert (forall ((bv0 Bool)) (= (set826 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set826 bv0))))
(assert (= (slen nil) 0))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv5))
(assert (> s _lbv6))
(assert (> s _lbv7))
(assert (= _lbv8 (- s 1)))
(assert (forall ((bv0 Bool)) (= (set827 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv13 bv0) (set827 bv0))))
(assert (= (slen _lbv13) s))
(assert (=> (> (slen _lbv13) 0) (or (> (shd _lbv13) x0) (= (shd _lbv13) x0))))
(assert (forall ((bv0 Bool)) (= (set828 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv14 bv0) (set828 bv0))))
(assert (= (slen _lbv14) s))
(assert (=> (> (slen _lbv14) 0) (or (> (shd _lbv14) x0) (= (shd _lbv14) x0))))
(assert (forall ((bv0 Bool)) (= (set829 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv16 bv0) (set829 bv0))))
(assert (= (slen _lbv16) s))
(assert (=> (> (slen _lbv16) 0) (or (> (shd _lbv16) x0) (= (shd _lbv16) x0))))
(assert (forall ((bv0 Bool)) (= (set830 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv17 bv0) (set830 bv0))))
(assert (= (slen _lbv17) s))
(assert (=> (> (slen _lbv17) 0) (or (> (shd _lbv17) x0) (= (shd _lbv17) x0))))
(assert (forall ((bv0 Bool)) (= (set831 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv18 bv0) (set831 bv0))))
(assert (= (slen _lbv18) s))
(assert (=> (> (slen _lbv18) 0) (or (> (shd _lbv18) x0) (= (shd _lbv18) x0))))
(assert (forall ((bv0 Bool)) (= (set832 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv19 bv0) (set832 bv0))))
(assert (= (slen _lbv19) s))
(assert (=> (> (slen _lbv19) 0) (or (> (shd _lbv19) x0) (= (shd _lbv19) x0))))
(assert (forall ((bv0 Bool)) (= (set833 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv20 bv0) (set833 bv0))))
(assert (= (slen _lbv20) s))
(assert (=> (> (slen _lbv20) 0) (or (> (shd _lbv20) x0) (= (shd _lbv20) x0))))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (or (> _lbv10 _lbv7) (= _lbv10 _lbv7)))
(assert (= |3| 3))
(assert (not (> _lbv10 |3|)))
(assert (or (> _lbv9 _lbv8) (= _lbv9 _lbv8)))
(assert (= |3| 3))
(assert (not (> _lbv9 |3|)))
(assert (or (> _lbv12 _lbv5) (= _lbv12 _lbv5)))
(assert (= |3| 3))
(assert (not (> _lbv12 |3|)))
(assert (or (> _lbv11 _lbv6) (= _lbv11 _lbv6)))
(assert (= |3| 3))
(assert (not (> _lbv11 |3|)))
(assert (forall ((bv0 Bool)) (= (set834 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv15 bv0) (set834 bv0))))
(assert (= (slen _lbv15) s))
(assert (=> (> (slen _lbv15) 0) (or (> (shd _lbv15) x0) (= (shd _lbv15) x0))))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (forall ((bv0 Bool)) (= (set835 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv15 bv0) (set835 bv0))))
(assert (= (slen _lbv15) s))
(assert (=> (> (slen _lbv15) 0) (or (> (shd _lbv15) x0) (= (shd _lbv15) x0))))
(assert (forall ((bv0 Bool)) (= (set836 bv0) (and (= bv0 true)))))
(assert (not (forall ((bv0 Bool)) (= (slist _lbv15 bv0) (set836 bv0)))))

 
 Timedout the subtype check T_vi <: T_goal
 
 Enumerating a Scalar Term _lbv16
 
 Type of the Scalar Term {v:Ty_alphalist | 
 	 Conj <c (slist)(v) = (true)
 	 , 
 	 Conj <c (slen)(v) ==(s)
 	 , 
 	 Impl < (slen)(v) > (0)
 	 
 Disj <d  (shd)(v) > (x0)
 	,   (shd)(v) ==(x0)>d  > >c  >c }                                                                                                                                                                                                                                                              
solver 
 (declare-sort T5757)
(declare-fun set837 (Bool) Bool)
(declare-fun slist (T5757 Bool) Bool)
(declare-fun nil () T5757)
(declare-fun slen (T5757) Int)
(declare-fun |0| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv5 () Int)
(declare-fun s () Int)
(declare-fun _lbv6 () Int)
(declare-fun _lbv7 () Int)
(declare-fun _lbv8 () Int)
(declare-fun set838 (Bool) Bool)
(declare-fun _lbv13 () T5757)
(declare-fun shd (T5757) Int)
(declare-fun set839 (Bool) Bool)
(declare-fun _lbv14 () T5757)
(declare-fun set840 (Bool) Bool)
(declare-fun _lbv15 () T5757)
(declare-fun set841 (Bool) Bool)
(declare-fun _lbv17 () T5757)
(declare-fun set842 (Bool) Bool)
(declare-fun _lbv18 () T5757)
(declare-fun set843 (Bool) Bool)
(declare-fun _lbv19 () T5757)
(declare-fun set844 (Bool) Bool)
(declare-fun _lbv20 () T5757)
(declare-fun |3| () Int)
(declare-fun _lbv10 () Int)
(declare-fun _lbv9 () Int)
(declare-fun _lbv12 () Int)
(declare-fun _lbv11 () Int)
(declare-fun set845 (Bool) Bool)
(declare-fun _lbv16 () T5757)
(declare-fun set846 (Bool) Bool)
(declare-fun set847 (Bool) Bool)
(assert (forall ((bv0 Bool)) (= (set837 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set837 bv0))))
(assert (= (slen nil) 0))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv5))
(assert (> s _lbv6))
(assert (> s _lbv7))
(assert (= _lbv8 (- s 1)))
(assert (forall ((bv0 Bool)) (= (set838 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv13 bv0) (set838 bv0))))
(assert (= (slen _lbv13) s))
(assert (=> (> (slen _lbv13) 0) (or (> (shd _lbv13) x0) (= (shd _lbv13) x0))))
(assert (forall ((bv0 Bool)) (= (set839 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv14 bv0) (set839 bv0))))
(assert (= (slen _lbv14) s))
(assert (=> (> (slen _lbv14) 0) (or (> (shd _lbv14) x0) (= (shd _lbv14) x0))))
(assert (forall ((bv0 Bool)) (= (set840 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv15 bv0) (set840 bv0))))
(assert (= (slen _lbv15) s))
(assert (=> (> (slen _lbv15) 0) (or (> (shd _lbv15) x0) (= (shd _lbv15) x0))))
(assert (forall ((bv0 Bool)) (= (set841 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv17 bv0) (set841 bv0))))
(assert (= (slen _lbv17) s))
(assert (=> (> (slen _lbv17) 0) (or (> (shd _lbv17) x0) (= (shd _lbv17) x0))))
(assert (forall ((bv0 Bool)) (= (set842 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv18 bv0) (set842 bv0))))
(assert (= (slen _lbv18) s))
(assert (=> (> (slen _lbv18) 0) (or (> (shd _lbv18) x0) (= (shd _lbv18) x0))))
(assert (forall ((bv0 Bool)) (= (set843 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv19 bv0) (set843 bv0))))
(assert (= (slen _lbv19) s))
(assert (=> (> (slen _lbv19) 0) (or (> (shd _lbv19) x0) (= (shd _lbv19) x0))))
(assert (forall ((bv0 Bool)) (= (set844 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv20 bv0) (set844 bv0))))
(assert (= (slen _lbv20) s))
(assert (=> (> (slen _lbv20) 0) (or (> (shd _lbv20) x0) (= (shd _lbv20) x0))))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (or (> _lbv10 _lbv7) (= _lbv10 _lbv7)))
(assert (= |3| 3))
(assert (not (> _lbv10 |3|)))
(assert (or (> _lbv9 _lbv8) (= _lbv9 _lbv8)))
(assert (= |3| 3))
(assert (not (> _lbv9 |3|)))
(assert (or (> _lbv12 _lbv5) (= _lbv12 _lbv5)))
(assert (= |3| 3))
(assert (not (> _lbv12 |3|)))
(assert (or (> _lbv11 _lbv6) (= _lbv11 _lbv6)))
(assert (= |3| 3))
(assert (not (> _lbv11 |3|)))
(assert (forall ((bv0 Bool)) (= (set845 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv16 bv0) (set845 bv0))))
(assert (= (slen _lbv16) s))
(assert (=> (> (slen _lbv16) 0) (or (> (shd _lbv16) x0) (= (shd _lbv16) x0))))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (forall ((bv0 Bool)) (= (set846 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv16 bv0) (set846 bv0))))
(assert (= (slen _lbv16) s))
(assert (=> (> (slen _lbv16) 0) (or (> (shd _lbv16) x0) (= (shd _lbv16) x0))))
(assert (forall ((bv0 Bool)) (= (set847 bv0) (and (= bv0 true)))))
(assert (not (forall ((bv0 Bool)) (= (slist _lbv16 bv0) (set847 bv0)))))

 
 Timedout the subtype check T_vi <: T_goal
 
 Enumerating a Scalar Term _lbv17
 
 Type of the Scalar Term {v:Ty_alphalist | 
 	 Conj <c (slist)(v) = (true)
 	 , 
 	 Conj <c (slen)(v) ==(s)
 	 , 
 	 Impl < (slen)(v) > (0)
 	 
 Disj <d  (shd)(v) > (x0)
 	,   (shd)(v) ==(x0)>d  > >c  >c }                                                                                                                                                                                                                                                              
solver 
 (declare-sort T5799)
(declare-fun set848 (Bool) Bool)
(declare-fun slist (T5799 Bool) Bool)
(declare-fun nil () T5799)
(declare-fun slen (T5799) Int)
(declare-fun |0| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv5 () Int)
(declare-fun s () Int)
(declare-fun _lbv6 () Int)
(declare-fun _lbv7 () Int)
(declare-fun _lbv8 () Int)
(declare-fun set849 (Bool) Bool)
(declare-fun _lbv13 () T5799)
(declare-fun shd (T5799) Int)
(declare-fun set850 (Bool) Bool)
(declare-fun _lbv14 () T5799)
(declare-fun set851 (Bool) Bool)
(declare-fun _lbv15 () T5799)
(declare-fun set852 (Bool) Bool)
(declare-fun _lbv16 () T5799)
(declare-fun set853 (Bool) Bool)
(declare-fun _lbv18 () T5799)
(declare-fun set854 (Bool) Bool)
(declare-fun _lbv19 () T5799)
(declare-fun set855 (Bool) Bool)
(declare-fun _lbv20 () T5799)
(declare-fun |3| () Int)
(declare-fun _lbv10 () Int)
(declare-fun _lbv9 () Int)
(declare-fun _lbv12 () Int)
(declare-fun _lbv11 () Int)
(declare-fun set856 (Bool) Bool)
(declare-fun _lbv17 () T5799)
(declare-fun set857 (Bool) Bool)
(declare-fun set858 (Bool) Bool)
(assert (forall ((bv0 Bool)) (= (set848 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set848 bv0))))
(assert (= (slen nil) 0))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv5))
(assert (> s _lbv6))
(assert (> s _lbv7))
(assert (= _lbv8 (- s 1)))
(assert (forall ((bv0 Bool)) (= (set849 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv13 bv0) (set849 bv0))))
(assert (= (slen _lbv13) s))
(assert (=> (> (slen _lbv13) 0) (or (> (shd _lbv13) x0) (= (shd _lbv13) x0))))
(assert (forall ((bv0 Bool)) (= (set850 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv14 bv0) (set850 bv0))))
(assert (= (slen _lbv14) s))
(assert (=> (> (slen _lbv14) 0) (or (> (shd _lbv14) x0) (= (shd _lbv14) x0))))
(assert (forall ((bv0 Bool)) (= (set851 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv15 bv0) (set851 bv0))))
(assert (= (slen _lbv15) s))
(assert (=> (> (slen _lbv15) 0) (or (> (shd _lbv15) x0) (= (shd _lbv15) x0))))
(assert (forall ((bv0 Bool)) (= (set852 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv16 bv0) (set852 bv0))))
(assert (= (slen _lbv16) s))
(assert (=> (> (slen _lbv16) 0) (or (> (shd _lbv16) x0) (= (shd _lbv16) x0))))
(assert (forall ((bv0 Bool)) (= (set853 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv18 bv0) (set853 bv0))))
(assert (= (slen _lbv18) s))
(assert (=> (> (slen _lbv18) 0) (or (> (shd _lbv18) x0) (= (shd _lbv18) x0))))
(assert (forall ((bv0 Bool)) (= (set854 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv19 bv0) (set854 bv0))))
(assert (= (slen _lbv19) s))
(assert (=> (> (slen _lbv19) 0) (or (> (shd _lbv19) x0) (= (shd _lbv19) x0))))
(assert (forall ((bv0 Bool)) (= (set855 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv20 bv0) (set855 bv0))))
(assert (= (slen _lbv20) s))
(assert (=> (> (slen _lbv20) 0) (or (> (shd _lbv20) x0) (= (shd _lbv20) x0))))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (or (> _lbv10 _lbv7) (= _lbv10 _lbv7)))
(assert (= |3| 3))
(assert (not (> _lbv10 |3|)))
(assert (or (> _lbv9 _lbv8) (= _lbv9 _lbv8)))
(assert (= |3| 3))
(assert (not (> _lbv9 |3|)))
(assert (or (> _lbv12 _lbv5) (= _lbv12 _lbv5)))
(assert (= |3| 3))
(assert (not (> _lbv12 |3|)))
(assert (or (> _lbv11 _lbv6) (= _lbv11 _lbv6)))
(assert (= |3| 3))
(assert (not (> _lbv11 |3|)))
(assert (forall ((bv0 Bool)) (= (set856 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv17 bv0) (set856 bv0))))
(assert (= (slen _lbv17) s))
(assert (=> (> (slen _lbv17) 0) (or (> (shd _lbv17) x0) (= (shd _lbv17) x0))))
(assert (= var_v5 true))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (forall ((bv0 Bool)) (= (set857 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv17 bv0) (set857 bv0))))
(assert (= (slen _lbv17) s))
(assert (=> (> (slen _lbv17) 0) (or (> (shd _lbv17) x0) (= (shd _lbv17) x0))))
(assert (forall ((bv0 Bool)) (= (set858 bv0) (and (= bv0 true)))))
(assert (not (forall ((bv0 Bool)) (= (slist _lbv17 bv0) (set858 bv0)))))

 
 Timedout the subtype check T_vi <: T_goal
 
 Enumerating a Scalar Term _lbv18
 
 Type of the Scalar Term {v:Ty_alphalist | 
 	 Conj <c (slist)(v) = (true)
 	 , 
 	 Conj <c (slen)(v) ==(s)
 	 , 
 	 Impl < (slen)(v) > (0)
 	 
 Disj <d  (shd)(v) > (x0)
 	,   (shd)(v) ==(x0)>d  > >c  >c }                                                                                                                                                                                                                                                              
solver 
 (declare-sort T5841)
(declare-fun set859 (Bool) Bool)
(declare-fun slist (T5841 Bool) Bool)
(declare-fun nil () T5841)
(declare-fun slen (T5841) Int)
(declare-fun |0| () Int)
(declare-fun x0 () Int)
(declare-fun _lbv2 () Bool)
(declare-fun _lbv1 () Int)
(declare-fun _lbv4 () Bool)
(declare-fun _lbv0 () Int)
(declare-fun _lbv3 () Bool)
(declare-fun var_v5 () Bool)
(declare-fun _lbv5 () Int)
(declare-fun s () Int)
(declare-fun _lbv6 () Int)
(declare-fun _lbv7 () Int)
(declare-fun _lbv8 () Int)
(declare-fun set860 (Bool) Bool)
(declare-fun _lbv13 () T5841)
(declare-fun shd (T5841) Int)
(declare-fun set861 (Bool) Bool)
(declare-fun _lbv14 () T5841)
(declare-fun set862 (Bool) Bool)
(declare-fun _lbv15 () T5841)
(declare-fun set863 (Bool) Bool)
(declare-fun _lbv16 () T5841)
(declare-fun set864 (Bool) Bool)
(declare-fun _lbv17 () T5841)
(declare-fun set865 (Bool) Bool)
(declare-fun _lbv19 () T5841)
(declare-fun set866 (Bool) Bool)
(declare-fun _lbv20 () T5841)
(declare-fun |3| () Int)
(declare-fun _lbv10 () Int)
(declare-fun _lbv9 () Int)
(declare-fun _lbv12 () Int)
(declare-fun _lbv11 () Int)
(declare-fun set867 (Bool) Bool)
(declare-fun _lbv18 () T5841)
(declare-fun set868 (Bool) Bool)
(declare-fun set869 (Bool) Bool)
(assert (forall ((bv0 Bool)) (= (set859 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist nil bv0) (set859 bv0))))
(assert (= (slen nil) 0))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv2 true) (and (= x0 |0|) (= (= _lbv2 false) (> x0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv4 true) (and (= _lbv1 |0|) (= (= _lbv4 false) (> _lbv1 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= _lbv3 true) (and (= _lbv0 |0|) (= (= _lbv3 false) (> _lbv0 |0|)))))
(assert (= |0| 0))
(assert (= |0| 0))
(assert (= (= var_v5 true) (and (= _lbv0 |0|) (= (= var_v5 false) (> _lbv0 |0|)))))
(assert (> s _lbv5))
(assert (> s _lbv6))
(assert (> s _lbv7))
(assert (= _lbv8 (- s 1)))
(assert (forall ((bv0 Bool)) (= (set860 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv13 bv0) (set860 bv0))))
(assert (= (slen _lbv13) s))
(assert (=> (> (slen _lbv13) 0) (or (> (shd _lbv13) x0) (= (shd _lbv13) x0))))
(assert (forall ((bv0 Bool)) (= (set861 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv14 bv0) (set861 bv0))))
(assert (= (slen _lbv14) s))
(assert (=> (> (slen _lbv14) 0) (or (> (shd _lbv14) x0) (= (shd _lbv14) x0))))
(assert (forall ((bv0 Bool)) (= (set862 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv15 bv0) (set862 bv0))))
(assert (= (slen _lbv15) s))
(assert (=> (> (slen _lbv15) 0) (or (> (shd _lbv15) x0) (= (shd _lbv15) x0))))
(assert (forall ((bv0 Bool)) (= (set863 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv16 bv0) (set863 bv0))))
(assert (= (slen _lbv16) s))
(assert (=> (> (slen _lbv16) 0) (or (> (shd _lbv16) x0) (= (shd _lbv16) x0))))
(assert (forall ((bv0 Bool)) (= (set864 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv17 bv0) (set864 bv0))))
(assert (= (slen _lbv17) s))
(assert (=> (> (slen _lbv17) 0) (or (> (shd _lbv17) x0) (= (shd _lbv17) x0))))
(assert (forall ((bv0 Bool)) (= (set865 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv19 bv0) (set865 bv0))))
(assert (= (slen _lbv19) s))
(assert (=> (> (slen _lbv19) 0) (or (> (shd _lbv19) x0) (= (shd _lbv19) x0))))
(assert (forall ((bv0 Bool)) (= (set866 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv20 bv0) (set866 bv0))))
(assert (= (slen _lbv20) s))
(assert (=> (> (slen _lbv20) 0) (or (> (shd _lbv20) x0) (= (shd _lbv20) x0))))
(assert (or (> _lbv1 s) (= _lbv1 s)))
(assert (= |3| 3))
(assert (not (> _lbv1 |3|)))
(assert (or (> _lbv0 x0) (= _lbv0 x0)))
(assert (= |3| 3))
(assert (not (> _lbv0 |3|)))
(assert (or (> _lbv10 _lbv7) (= _lbv10 _lbv7)))
(assert (= |3| 3))
(assert (not (> _lbv10 |3|)))
(assert (or (> _lbv9 _lbv8) (= _lbv9 _lbv8)))
(assert (= |3| 3))
(assert (not (> _lbv9 |3|)))
(assert (or (> _lbv12 _lbv5) (= _lbv12 _lbv5)))
(assert (= |3| 3))
(assert (not (> _lbv12 |3|)))
(assert (or (> _lbv11 _lbv6) (= _lbv11 _lbv6)))
(assert (= |3| 3))
(assert (not (> _lbv11 |3|)))
(assert (forall ((bv0 Bool)) (= (set867 bv0) (and (= bv0 true)))))
(assert (forall ((bv0 Bool)) (= (slist _lbv18 bv0) (set867 bv0))